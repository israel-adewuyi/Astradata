{
    "2094": {
        "A": {
            "name": "A. Trippi Troppi",
            "statement": "Trippi Troppi resides in a strange world. The ancient name of each country consists of three strings. The first letter of each string is concatenated to form the country's modern name.\nGiven the country's ancient name, please output the modern name.",
            "input_format": "The first line contains an integer $$$t$$$ – the number of independent test cases ($$$1 \\leq t \\leq 100$$$).\nThe following $$$t$$$ lines each contain three space-separated strings. Each string has a length of no more than $$$10$$$, and contains only lowercase Latin characters.",
            "output_format": "For each test case, output the string formed by concatenating the first letter of each word.",
            "examples": [
                {
                    "input": [
                        "7",
                        "united states america",
                        "oh my god",
                        "i cant lie",
                        "binary indexed tree",
                        "believe in yourself",
                        "skibidi slay sigma",
                        "god bless america"
                    ],
                    "output": [
                        "usa",
                        "omg",
                        "icl",
                        "bit",
                        "biy",
                        "sss",
                        "gba"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Bobritto Bandito",
            "statement": "In Bobritto Bandito's home town of residence, there are an infinite number of houses on an infinite number line, with houses at $$$\\ldots, -2, -1, 0, 1, 2, \\ldots$$$. On day $$$0$$$, he started a plague by giving an infection to the unfortunate residents of house $$$0$$$. Each succeeding day, the plague spreads to exactly one healthy household that is next to an infected household. It can be shown that each day the infected houses form a continuous segment.\nLet the segment starting at the $$$l$$$-th house and ending at the $$$r$$$-th house be denoted as $$$[l, r]$$$. You know that after $$$n$$$ days, the segment $$$[l, r]$$$ became infected. Find any such segment $$$[l', r']$$$ that could have been infected on the $$$m$$$-th day ($$$m \\le n$$$).",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) – the number of independent test cases.\nThe only line of each test case contains four integers $$$n$$$, $$$m$$$, $$$l$$$, and $$$r$$$ ($$$1 \\leq m\\leq n \\leq 2000, -n \\leq l \\leq 0 \\leq r \\leq n, r-l=n$$$).",
            "output_format": "For each test case, output two integers $$$l'$$$ and $$$r'$$$ on a new line. If there are multiple solutions, output any.",
            "examples": [
                {
                    "input": [
                        "4",
                        "4 2 -2 2",
                        "4 1 0 4",
                        "3 3 -1 2",
                        "9 8 -6 3"
                    ],
                    "output": [
                        "-1 1",
                        "0 1",
                        "-1 2",
                        "-5 3"
                    ]
                }
            ],
            "notes": "In the first test case, it is possible that on the $$$1$$$-st, $$$2$$$-nd, and $$$3$$$-rd days the interval of houses affected is $$$[-1,0]$$$, $$$[-1,1]$$$, $$$[-2,1]$$$. Therefore, $$$[-1,1]$$$ is a valid output."
        },
        "C": {
            "name": "C. Brr Brrr Patapim",
            "statement": "Brr Brrr Patapim is trying to learn of Tiramisù's secret passcode, which is a permutation$$$^{\\text{∗}}$$$ of $$$2\\cdot n$$$ elements. To help Patapim guess, Tiramisù gave him an $$$n\\times n$$$ grid $$$G$$$, in which $$$G_{i,j}$$$ (or the element in the $$$i$$$-th row and $$$j$$$-th column of the grid) contains $$$p_{i+j}$$$, or the $$$(i+j)$$$-th element in the permutation.\nGiven this grid, please help Patapim crack the forgotten code. It is guaranteed that the permutation exists, and it can be shown that the permutation can be determined uniquely.\n$$$^{\\text{∗}}$$$A permutation of $$$m$$$ integers is a sequence of $$$m$$$ integers which contains each of $$$1,2,\\ldots,m$$$ exactly once. For example, $$$[1, 3, 2]$$$ and $$$[2, 1]$$$ are permutations, while $$$[1, 2, 4]$$$ and $$$[1, 3, 2, 3]$$$ are not.",
            "input_format": "The first line contains an integer $$$t$$$ — the number of test cases ($$$1 \\leq t \\leq 200$$$).\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 800$$$).\nEach of the following $$$n$$$ lines contains $$$n$$$ integers, giving the grid $$$G$$$. The first of these lines contains $$$G_{1,1}, G_{1,2},\\ldots,G_{1,n}$$$; the second of these lines contains $$$G_{2,1}, G_{2,2},\\ldots,G_{2,n}$$$, and so on. ($$$1 \\leq G_{i,j} \\leq 2\\cdot n$$$).\nIt is guaranteed that the grid encodes a valid permutation, and the sum of $$$n$$$ over all test cases does not exceed $$$800$$$.",
            "output_format": "For each test case, please output $$$2n$$$ numbers on a new line: $$$p_1,p_2,\\ldots,p_{2n}$$$.",
            "examples": [
                {
                    "input": [
                        "3",
                        "3",
                        "1 6 2",
                        "6 2 4",
                        "2 4 3",
                        "1",
                        "1",
                        "2",
                        "2 3",
                        "3 4"
                    ],
                    "output": [
                        "5 1 6 2 4 3 ",
                        "2 1 ",
                        "1 2 3 4"
                    ]
                }
            ],
            "notes": ""
        },
        "D": {
            "name": "D. Tung Tung Sahur",
            "statement": "You have two drums in front of you: a left drum and a right drum. A hit on the left can be recorded as \"L\", and a hit on the right as \"R\".\nThe strange forces that rule this world are fickle: sometimes, a blow sounds once, and sometimes it sounds twice. Therefore, a hit on the left drum could have sounded as either \"L\" or \"LL\", and a hit on the right drum could have sounded as either \"R\" or \"RR\".\nThe sequence of hits made is recorded in the string $$$p$$$, and the sounds heard are in the string $$$s$$$. Given $$$p$$$ and $$$s$$$, determine whether it is true that the string $$$s$$$ could have been the result of the hits from the string $$$p$$$.\nFor example, if $$$p=$$$\"LR\", then the result of the hits could be any of the strings \"LR\", \"LRR\", \"LLR\", and \"LLRR\", but the strings \"LLLR\" or \"LRL\" cannot.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) – the number of independent test cases.\nThe first line of each test case contains the string $$$p$$$ ($$$1 \\le |p| \\le 2 \\cdot 10^5$$$) consisting only of the characters \"R\" and \"L\", where $$$|p|$$$ denotes the length of the string $$$p$$$.\nThe second line of each test case contains the string $$$s$$$ ($$$1 \\le |p| \\le |s| \\le 2 \\cdot 10^5$$$) consisting only of the characters \"R\" and \"L\".\nIt is guaranteed that the sum of $$$|s|$$$ does not exceed $$$2\\cdot 10^5$$$ across all test cases.",
            "output_format": "For each set of input data, output \"YES\" if $$$s$$$ can be the heard sound, and \"NO\" otherwise. You may output in any case.",
            "examples": [
                {
                    "input": [
                        "5",
                        "R",
                        "RR",
                        "LRLR",
                        "LRLR",
                        "LR",
                        "LLLR",
                        "LLLLLRL",
                        "LLLLRRLL",
                        "LLRLRLRRL",
                        "LLLRLRRLLRRRL"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": ""
        },
        "E": {
            "name": "E. Boneca Ambalabu",
            "statement": "Boneca Ambalabu gives you a sequence of $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$.\nOutput the maximum value of $$$(a_k\\oplus a_1)+(a_k\\oplus a_2)+\\ldots+(a_k\\oplus a_n)$$$ among all $$$1 \\leq k \\leq n$$$. Note that $$$\\oplus$$$ denotes the bitwise XOR operation.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) – the number of independent test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n\\leq 2\\cdot 10^5$$$) – the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$0 \\leq a_i < 2^{30}$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
            "output_format": "For each test case, output the maximum value on a new line.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3",
                        "18 18 18",
                        "5",
                        "1 2 4 8 16",
                        "5",
                        "8 13 4 5 15",
                        "6",
                        "625 676 729 784 841 900",
                        "1",
                        "1"
                    ],
                    "output": [
                        "0",
                        "79",
                        "37",
                        "1555",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case, the best we can do is $$$(18\\oplus18)+(18\\oplus18)+(18\\oplus18)=0$$$.\nIn the second test case, we choose $$$k=5$$$ to get $$$(16\\oplus1)+(16\\oplus2)+(16\\oplus4)+(16\\oplus8)+(16\\oplus16)=79$$$."
        },
        "F": {
            "name": "F. Trulimero Trulicina",
            "statement": "Trulicina gives you integers $$$n$$$, $$$m$$$, and $$$k$$$. It is guaranteed that $$$k\\geq 2$$$ and $$$n\\cdot m\\equiv 0 \\pmod{k}$$$.\nOutput a $$$n$$$ by $$$m$$$ grid of integers such that each of the following criteria hold:\nEach integer in the grid is between $$$1$$$ and $$$k$$$, inclusive.  Each integer from $$$1$$$ to $$$k$$$ appears an equal number of times.  No two cells that share an edge have the same integer.\nIt can be shown that such a grid always exists. If there are multiple solutions, output any.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$2 \\leq n\\cdot m\\leq 2\\cdot 10^5, 2\\leq k\\leq n\\cdot m, n\\cdot m\\equiv 0 \\pmod{k})$$$.\nIt is guaranteed that the sum of $$$n\\cdot m$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
            "output_format": "For each test case, output $$$n$$$ lines, each containing $$$m$$$ integers that satisfy the criteria. If there are multiple solutions, output any.",
            "examples": [
                {
                    "input": [
                        "3",
                        "2 2 2",
                        "3 4 6",
                        "5 5 25"
                    ],
                    "output": [
                        "1 2",
                        "2 1",
                        "1 6 1 6",
                        "2 5 2 5",
                        "3 4 3 4",
                        "17 2 12 25 14",
                        "3 1 6 19 11",
                        "8 20 23 24 4",
                        "9 10 5 13 21",
                        "22 7 15 18 16"
                    ]
                }
            ],
            "notes": ""
        },
        "G": {
            "name": "G. Chimpanzini Bananini",
            "statement": "Chimpanzini Bananini stands on the brink of a momentous battle—one destined to bring finality.\nFor an arbitrary array $$$b$$$ of length $$$m$$$, let's denote the rizziness of the array to be $$$\\sum_{i=1}^mb_i\\cdot i=b_1\\cdot 1+b_2\\cdot 2+b_3\\cdot 3+\\ldots + b_m\\cdot m$$$.\nChimpanzini Bananini gifts you an empty array. There are three types of operations you can perform on it.\nPerform a cyclic shift on the array. That is, the array $$$[a_1, a_2, \\ldots, a_n]$$$ becomes $$$[a_n, a_1, a_2, \\ldots, a_{n-1}].$$$  Reverse the entire array. That is, the array $$$[a_1, a_2, \\ldots, a_n]$$$ becomes $$$[a_n, a_{n-1}, \\ldots, a_1].$$$  Append an element to the end of the array. The array $$$[a_1, a_2, \\ldots, a_n]$$$ becomes $$$[a_1, a_2, \\ldots, a_n, k]$$$ after appending $$$k$$$ to the end of the array.\nAfter each operation, you are interested in calculating the rizziness of your array.\nNote that all operations are persistent. This means that each operation modifies the array, and subsequent operations should be applied to the current state of the array after the previous operations.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of the input contains an integer $$$q$$$ ($$$1 \\leq q \\leq 2\\cdot 10^5$$$) — the number of operations you perform on your array.\nThe following $$$q$$$ lines first contain a single integer $$$s$$$ ($$$1 \\leq s \\leq 3$$$) — the operation type.\nIt is guaranteed that the sum of $$$q$$$ will not exceed $$$2\\cdot 10^5$$$ over all test cases. Additionally, it is guaranteed that the first operation on each test case will be one with $$$s=3$$$.",
            "output_format": "For each test case, output $$$q$$$ lines, outputting the rizziness of your array after each operation.",
            "examples": [
                {
                    "input": [
                        "1",
                        "13",
                        "3 1",
                        "3 2",
                        "3 3",
                        "1",
                        "3 4",
                        "2",
                        "3 5",
                        "1",
                        "3 6",
                        "2",
                        "3 7",
                        "2",
                        "1"
                    ],
                    "output": [
                        "1",
                        "5",
                        "14",
                        "11",
                        "27",
                        "23",
                        "48",
                        "38",
                        "74",
                        "73",
                        "122",
                        "102",
                        "88"
                    ]
                }
            ],
            "notes": "The first six states of the array:"
        },
        "H": {
            "name": "H. La Vaca Saturno Saturnita",
            "statement": "Saturnita's mood depends on an array $$$a$$$ of length $$$n$$$, which only he knows the meaning of, and a function $$$f(k, a, l, r)$$$, which only he knows how to compute. Shown below is the pseudocode for his function $$$f(k, a, l, r)$$$.\nfunction f(k, a, l, r):   ans := 0   for i from l to r (inclusive):      while k is divisible by a[i]:         k := k/a[i]      ans := ans + k   return ans\nYou are given $$$q$$$ queries, each containing integers $$$k$$$, $$$l$$$, and $$$r$$$. For each query, please output $$$f(k,a,l,r)$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\leq n \\leq 10^5, 1 \\leq q \\leq 5\\cdot 10^4$$$).\nThe following line contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$2 \\leq a_i \\leq 10^5$$$).\nThe following $$$q$$$ lines each contain three integers $$$k$$$, $$$l$$$, and $$$r$$$ ($$$1 \\leq k \\leq 10^5, 1 \\leq l \\leq r \\leq n$$$).\nIt is guaranteed that the sum of $$$n$$$ does not exceed $$$10^5$$$ over all test cases, and the sum of $$$q$$$ does not exceed $$$5\\cdot 10^4$$$ over all test cases.",
            "output_format": "For each query, output the answer on a new line.",
            "examples": [
                {
                    "input": [
                        "2",
                        "5 3",
                        "2 3 5 7 11",
                        "2 1 5",
                        "2 2 4",
                        "2310 1 5",
                        "4 3",
                        "18 12 8 9",
                        "216 1 2",
                        "48 2 4",
                        "82944 1 4"
                    ],
                    "output": [
                        "5",
                        "6",
                        "1629",
                        "13",
                        "12",
                        "520"
                    ]
                }
            ],
            "notes": ""
        }
    },
    "2065": {
        "A": {
            "name": "A. Skibidus and Amog'u",
            "statement": "Skibidus lands on a foreign planet, where the local Amog tribe speaks the Amog'u language. In Amog'u, there are two forms of nouns, which are singular and plural.\nGiven that the root of the noun is transcribed as $$$S$$$, the two forms are transcribed as:\nSingular: $$$S$$$ $$$+$$$ \"us\"  Plural: $$$S$$$ $$$+$$$ \"i\"\nHere, $$$+$$$ denotes string concatenation. For example, abc $$$+$$$ def $$$=$$$ abcdef.\nFor example, when $$$S$$$ is transcribed as \"amog\", then the singular form is transcribed as \"amogus\", and the plural form is transcribed as \"amogi\". Do note that Amog'u nouns can have an empty root — in specific, \"us\" is the singular form of \"i\" (which, on an unrelated note, means \"imposter\" and \"imposters\" respectively).\nGiven a transcribed Amog'u noun in singular form, please convert it to the transcription of the corresponding plural noun.",
            "input_format": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). The description of the test cases follows.\nThe only line of each test case contains a string $$$W$$$, which is a transcribed Amog'u noun in singular form. It is guaranteed that $$$W$$$ consists of only lowercase English letters, has a length of at most $$$10$$$, and ends with \"us\".",
            "output_format": "For each test case, output the transcription of the corresponding plural noun on a separate line.",
            "examples": [
                {
                    "input": [
                        "9",
                        "us",
                        "sus",
                        "fungus",
                        "cactus",
                        "sussus",
                        "amogus",
                        "chungus",
                        "ntarsus",
                        "skibidus"
                    ],
                    "output": [
                        "i",
                        "si",
                        "fungi",
                        "cacti",
                        "sussi",
                        "amogi",
                        "chungi",
                        "ntarsi",
                        "skibidi"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Skibidus and Ohio",
            "statement": "Skibidus is given a string $$$s$$$ that consists of lowercase Latin letters. If $$$s$$$ contains more than $$$1$$$ letter, he can:\nChoose an index $$$i$$$ ($$$1 \\leq i \\leq |s| - 1$$$, $$$|s|$$$ denotes the current length of $$$s$$$) such that $$$s_i = s_{i+1}$$$. Replace $$$s_i$$$ with any lowercase Latin letter of his choice. Remove $$$s_{i+1}$$$ from the string.\nSkibidus must determine the minimum possible length he can achieve through any number of operations.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe only line of each test case contains a string $$$s$$$ ($$$1 \\leq |s| \\leq 100$$$). It is guaranteed $$$s$$$ only contains lowercase Latin letters.",
            "output_format": "For each test case, output an integer on the new line, the minimum achievable length of $$$s$$$.",
            "examples": [
                {
                    "input": [
                        "4",
                        "baa",
                        "skibidus",
                        "cc",
                        "ohio"
                    ],
                    "output": [
                        "1",
                        "8",
                        "1",
                        "4"
                    ]
                }
            ],
            "notes": "In the first test case, Skibidus can:\nTherefore, the answer is $$$1$$$ for the first test case.\nIn the second test case, he cannot perform an operation on any index. Therefore, the answer is still the length of the initial string, $$$8$$$."
        },
        "C1": {
            "name": "C1. Skibidus and Fanum Tax (easy version)",
            "statement": "This is the easy version of the problem. In this version, $$$m = 1$$$.\nSkibidus has obtained two arrays $$$a$$$ and $$$b$$$, containing $$$n$$$ and $$$m$$$ elements respectively. For each integer $$$i$$$ from $$$1$$$ to $$$n$$$, he is allowed to perform the operation at most once:\nChoose an integer $$$j$$$ such that $$$1 \\leq j \\leq m$$$. Set $$$a_i := b_j - a_i$$$. Note that $$$a_i$$$ may become non-positive as a result of this operation.\nSkibidus needs your help determining whether he can sort $$$a$$$ in non-decreasing order$$$^{\\text{∗}}$$$ by performing the above operation some number of times.\n$$$^{\\text{∗}}$$$$$$a$$$ is sorted in non-decreasing order if $$$a_1 \\leq a_2 \\leq \\ldots \\leq a_n$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$, $$$\\textbf{m = 1}$$$).\nThe following line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$).\nThe following line of each test case contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$).\nIt is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, if it is possible to sort $$$a$$$ in non-decreasing order, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.",
            "examples": [
                {
                    "input": [
                        "5",
                        "1 1",
                        "5",
                        "9",
                        "3 1",
                        "1 4 3",
                        "3",
                        "4 1",
                        "1 4 2 5",
                        "6",
                        "4 1",
                        "5 4 10 5",
                        "4",
                        "3 1",
                        "9 8 7",
                        "8"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, $$$[5]$$$ is already sorted.\nIn the second test case, it can be shown that it is impossible.\nIn the third test case, we can set $$$a_3:=b_1-a_3=6-2=4$$$. The sequence $$$[1,4,4,5]$$$ is in nondecreasing order.\nIn the last case, we can apply operations on each index. The sequence becomes $$$[-1,0,1]$$$, which is in nondecreasing order."
        },
        "C2": {
            "name": "C2. Skibidus and Fanum Tax (hard version)",
            "statement": "This is the hard version of the problem. In this version, $$$m \\leq 2\\cdot 10^5$$$.\nSkibidus has obtained two arrays $$$a$$$ and $$$b$$$, containing $$$n$$$ and $$$m$$$ elements respectively. For each integer $$$i$$$ from $$$1$$$ to $$$n$$$, he is allowed to perform the operation at most once:\nChoose an integer $$$j$$$ such that $$$1 \\leq j \\leq m$$$. Set $$$a_i := b_j - a_i$$$. Note that $$$a_i$$$ may become non-positive as a result of this operation.\nSkibidus needs your help determining whether he can sort $$$a$$$ in non-decreasing order$$$^{\\text{∗}}$$$ by performing the above operation some number of times.\n$$$^{\\text{∗}}$$$$$$a$$$ is sorted in non-decreasing order if $$$a_1 \\leq a_2 \\leq \\ldots \\leq a_n$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq m \\leq 2\\cdot 10^5$$$).\nThe following line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$).\nThe following line of each test case contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$).\nIt is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, if it is possible to sort $$$a$$$ in non-decreasing order, print \"YES\" on a new line. Otherwise, print \"NO\" on a new line.\nYou can output the answer in any case. For example, the strings \"yEs\", \"yes\", and \"Yes\" will also be recognized as positive responses.",
            "examples": [
                {
                    "input": [
                        "5",
                        "1 3",
                        "5",
                        "9 1 1000000000",
                        "3 2",
                        "1 4 3",
                        "3 4",
                        "4 3",
                        "2 4 6 5",
                        "6 1 8",
                        "5 2",
                        "6 4 5 4 5",
                        "4 1000",
                        "3 1",
                        "9 8 7",
                        "8"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, $$$[5]$$$ is already sorted.\nIn the second test case, it can be shown that it is impossible.\nIn the third test case, we can set $$$a_2:=b_1-a_2=6-4=2$$$ and $$$a_3:=b_3-a_3=8-6=2$$$. The sequence $$$[2,2,2,5]$$$ is in nondecreasing order.\nIn the last case, we can apply operations on each index. The sequence becomes $$$[-1,0,1]$$$, which is in nondecreasing order."
        },
        "D": {
            "name": "D. Skibidus and Sigma",
            "statement": "Let's denote the score of an array $$$b$$$ with $$$k$$$ elements as $$$\\sum_{i=1}^{k}\\left(\\sum_{j=1}^ib_j\\right)$$$. In other words, let $$$S_i$$$ denote the sum of the first $$$i$$$ elements of $$$b$$$. Then, the score can be denoted as $$$S_1+S_2+\\ldots+S_k$$$.\nSkibidus is given $$$n$$$ arrays $$$a_1,a_2,\\ldots,a_n$$$, each of which contains $$$m$$$ elements. Being the sigma that he is, he would like to concatenate them in any order to form a single array containing $$$n\\cdot m$$$ elements. Please find the maximum possible score Skibidus can achieve with his concatenated array!\nFormally, among all possible permutations$$$^{\\text{∗}}$$$ $$$p$$$ of length $$$n$$$, output the maximum score of $$$a_{p_1} + a_{p_2} + \\dots + a_{p_n}$$$, where $$$+$$$ represents concatenation$$$^{\\text{†}}$$$.\n$$$^{\\text{∗}}$$$A permutation of length $$$n$$$ contains all integers from $$$1$$$ to $$$n$$$ exactly once.$$$^{\\text{†}}$$$The concatenation of two arrays $$$c$$$ and $$$d$$$ with lengths $$$e$$$ and $$$f$$$ respectively (i.e. $$$c + d$$$) is $$$c_1, c_2, \\ldots, c_e, d_1, d_2, \\ldots d_f$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\cdot m \\leq 2 \\cdot 10^5$$$) — the number of arrays and the length of each array.\nThe $$$i$$$'th of the next $$$n$$$ lines contains $$$m$$$ integers $$$a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$$$ ($$$1 \\leq a_{i,j} \\leq 10^6$$$) — the elements of the $$$i$$$'th array.\nIt is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output the maximum score among all possible permutations $$$p$$$ on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "2 2",
                        "4 4",
                        "6 1",
                        "3 4",
                        "2 2 2 2",
                        "3 2 1 2",
                        "4 1 2 1",
                        "2 3",
                        "3 4 5",
                        "1 1 9"
                    ],
                    "output": [
                        "41",
                        "162",
                        "72"
                    ]
                }
            ],
            "notes": "For the first test case, there are two possibilities for $$$p$$$:\nThe maximum possible score is $$$41$$$.\nIn the second test case, one optimal arrangement of the final concatenated array is $$$[4,1,2,1,2,2,2,2,3,2,1,2]$$$. We can calculate that the score is $$$162$$$."
        },
        "E": {
            "name": "E. Skibidus and Rizz",
            "statement": "With the approach of Valentine's Day, Skibidus desperately needs a way to rizz up his crush! Fortunately, he knows of just the way: creating the perfect Binary String!\nGiven a binary string$$$^{\\text{∗}}$$$ $$$t$$$, let $$$x$$$ represent the number of $$$\\texttt{0}$$$ in $$$t$$$ and $$$y$$$ represent the number of $$$\\texttt{1}$$$ in $$$t$$$. Its balance-value is defined as the value of $$$\\max(x-y, y-x)$$$.\nSkibidus gives you three integers $$$n$$$, $$$m$$$, and $$$k$$$. He asks for your help to construct a binary string $$$s$$$ of length $$$n+m$$$ with exactly $$$n$$$ $$$\\texttt{0}$$$'s and $$$m$$$ $$$\\texttt{1}$$$'s such that the maximum balance-value among all of its substrings$$$^{\\text{†}}$$$ is exactly $$$k$$$. If it is not possible, output -1.\n$$$^{\\text{∗}}$$$A binary string only consists of characters $$$\\texttt{0}$$$ and $$$\\texttt{1}$$$.$$$^{\\text{†}}$$$A string $$$a$$$ is a substring of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first and only line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$0 \\leq n, m \\leq 2\\cdot 10^5$$$, $$$1 \\leq k \\leq n + m$$$, $$$n+m\\geq 1$$$).\nIt is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
            "output_format": "For each test case, if it is possible to construct $$$s$$$, output it on a new line. If there are multiple possible $$$s$$$, output any. Otherwise, output -1 on a new line.",
            "examples": [
                {
                    "input": [
                        "6",
                        "1 2 1",
                        "4 3 2",
                        "2 4 3",
                        "8 3 2",
                        "5 0 4",
                        "5 0 5"
                    ],
                    "output": [
                        "101",
                        "0100101",
                        "011011",
                        "-1",
                        "-1",
                        "00000"
                    ]
                }
            ],
            "notes": "In the first test case, we must construct $$$s$$$ such that it contains one $$$\\texttt{0}$$$, two $$$\\texttt{1}$$$, and a maximum balance of $$$1$$$ among all of its substrings. One possible valid $$$s$$$ is $$$\\texttt{101}$$$ because:\nAmong all possible substrings, the maximum balance-value is $$$1$$$.\nIn the second test case, the substring with the maximum balance-value is $$$0100$$$, which has a balance of $$$max(3-1, 1-3)=2$$$."
        },
        "F": {
            "name": "F. Skibidus and Slay",
            "statement": "Let's define the majority of a sequence of $$$k$$$ elements as the unique value that appears strictly more than $$$\\left \\lfloor {\\frac{k}{2}} \\right \\rfloor$$$ times. If such a value does not exist, then the sequence does not have a majority. For example, the sequence $$$[1,3,2,3,3]$$$ has a majority $$$3$$$ because it appears $$$3 > \\left \\lfloor {\\frac{5}{2}} \\right \\rfloor = 2$$$ times, but $$$[1,2,3,4,5]$$$ and $$$[1,3,2,3,4]$$$ do not have a majority.\nSkibidus found a tree$$$^{\\text{∗}}$$$ of $$$n$$$ vertices and an array $$$a$$$ of length $$$n$$$. Vertex $$$i$$$ has the value $$$a_i$$$ written on it, where $$$a_i$$$ is an integer in the range $$$[1, n]$$$.\nFor each $$$i$$$ from $$$1$$$ to $$$n$$$, please determine if there exists a non-trivial simple path$$$^{\\text{†}}$$$ such that $$$i$$$ is the majority of the sequence of integers written on the vertices that form the path.\n$$$^{\\text{∗}}$$$A tree is a connected graph without cycles. $$$^{\\text{†}}$$$A sequence of vertices $$$v_1, v_2, ..., v_m$$$ ($$$m \\geq 2$$$) forms a non-trivial simple path if $$$v_i$$$ and $$$v_{i+1}$$$ are connected by an edge for all $$$1 \\leq i \\leq m - 1$$$ and all $$$v_i$$$ are pairwise distinct. Note that the path must consist of at least $$$2$$$ vertices.",
            "input_format": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 5 \\cdot 10^5$$$)  — the number of vertices.\nThe second line of each test case contains $$$a_1,a_2,\\ldots,a_n$$$ ($$$1 \\le a_i \\le n$$$)  — the integers written on the vertices.\nEach of the next $$$n-1$$$ lines contains two integers $$$u_i$$$ and $$$v_i$$$, denoting the two vertices connected by an edge ($$$1 \\le u_i,v_i \\le n$$$, $$$u_i \\neq v_i$$$).\nIt is guaranteed that the given edges form a tree.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a binary string $$$s$$$ of length $$$n$$$ on a separate line. $$$s_i$$$ should be computed as follows:",
            "examples": [
                {
                    "input": [
                        "4",
                        "3",
                        "1 2 3",
                        "1 3",
                        "2 3",
                        "4",
                        "3 1 1 3",
                        "1 2",
                        "2 3",
                        "4 2",
                        "4",
                        "2 4 4 2",
                        "1 2",
                        "2 3",
                        "3 4",
                        "13",
                        "1 4 4 7 4 7 1 1 7 11 11 11 11",
                        "1 2",
                        "2 3",
                        "3 4",
                        "4 5",
                        "4 6",
                        "2 7",
                        "7 8",
                        "2 9",
                        "6 10",
                        "5 11",
                        "11 12",
                        "10 13"
                    ],
                    "output": [
                        "000",
                        "1010",
                        "0001",
                        "1001001000100"
                    ]
                }
            ],
            "notes": "In the first test case, there is no non-trivial path with $$$1$$$, $$$2$$$, or $$$3$$$ as a majority, so the binary string outputted is \"000\".\nIn the second test case, $$$1\\rightarrow 2\\rightarrow 4$$$ is a non-trivial path with $$$3$$$ as a majority."
        },
        "G": {
            "name": "G. Skibidus and Capping",
            "statement": "Skibidus was abducted by aliens of Amog! Skibidus tries to talk his way out, but the Amog aliens don't believe him. To prove that he is not totally capping, the Amog aliens asked him to solve this task:\nAn integer $$$x$$$ is considered a semi-prime if it can be written as $$$p \\cdot q$$$ where $$$p$$$ and $$$q$$$ are (not necessarily distinct) prime numbers. For example, $$$9$$$ is a semi-prime since it can be written as $$$3 \\cdot 3$$$, and $$$3$$$ is a prime number.\nSkibidus was given an array $$$a$$$ containing $$$n$$$ integers. He must report the number of pairs $$$(i, j)$$$ such that $$$i \\leq j$$$ and $$$\\operatorname{lcm}(a_i, a_j)$$$$$$^{\\text{∗}}$$$ is semi-prime.\n$$$^{\\text{∗}}$$$Given two integers $$$x$$$ and $$$y$$$, $$$\\operatorname{lcm}(x, y)$$$ denotes the least common multiple of $$$x$$$ and $$$y$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$).\nThe following line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$2 \\leq a_i \\leq n$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output the number of ordered pairs of indices on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "4",
                        "2 2 3 4",
                        "6",
                        "2 2 3 4 5 6",
                        "9",
                        "2 2 4 5 7 8 9 3 5"
                    ],
                    "output": [
                        "5",
                        "12",
                        "18"
                    ]
                }
            ],
            "notes": "In the first test case, the $$$5$$$ pairs of indices are $$$(1, 3)$$$, $$$(1, 4)$$$, $$$(2, 3)$$$, $$$(2, 4)$$$, and $$$(4, 4)$$$."
        },
        "H": {
            "name": "H. Bro Thinks He's Him",
            "statement": "Skibidus thinks he's Him! He proved it by solving this difficult task. Can you also prove yourself?\nGiven a binary string$$$^{\\text{∗}}$$$ $$$t$$$, $$$f(t)$$$ is defined as the minimum number of contiguous substrings, each consisting of identical characters, into which $$$t$$$ can be partitioned. For example, $$$f(\\texttt{00110001}) = 4$$$ because $$$t$$$ can be partitioned as $$$\\texttt{[00][11][000][1]}$$$ where each bracketed segment consists of identical characters.\nSkibidus gives you a binary string $$$s$$$ and $$$q$$$ queries. In each query, a single character of the string is flipped (i.e. $$$\\texttt{0}$$$ changes to $$$\\texttt{1}$$$ and $$$\\texttt{1}$$$ changes to $$$\\texttt{0}$$$); changes are saved after the query is processed. After each query, output the sum over all $$$f(b)$$$ where $$$b$$$ is a non-empty subsequence$$$^{\\text{†}}$$$ of $$$s$$$, modulo $$$998\\,244\\,353$$$.\n$$$^{\\text{∗}}$$$A binary string consists of only characters $$$\\texttt{0}$$$ and $$$\\texttt{1}$$$.$$$^{\\text{†}}$$$A subsequence of a string is a string which can be obtained by removing several (possibly zero) characters from the original string.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a binary string $$$s$$$ ($$$1 \\leq |s| \\leq 2 \\cdot 10^5$$$).\nThe following line of each test case contains an integer $$$q$$$ ($$$1 \\leq q \\leq 2 \\cdot 10^5$$$) — the number of queries.\nThe following line contains $$$q$$$ integers $$$v_1, v_2, \\ldots, v_q$$$ ($$$1 \\leq v_i \\leq |s|$$$), denoting $$$s_{v_i}$$$ is flipped for the $$$i$$$'th query.\nIt is guaranteed that the sum of $$$|s|$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output $$$q$$$ integers on a single line — the answer after each query modulo $$$998\\,244\\,353$$$.",
            "examples": [
                {
                    "input": [
                        "3",
                        "101",
                        "2",
                        "1 3",
                        "10110",
                        "3",
                        "1 2 3",
                        "101110101",
                        "5",
                        "7 2 4 4 1"
                    ],
                    "output": [
                        "10 7 ",
                        "61 59 67 ",
                        "1495 1169 1417 1169 1396"
                    ]
                }
            ],
            "notes": "In the first test case, $$$s$$$ becomes $$$\\texttt{001}$$$ after the first query. Let's calculate the answer for each subsequence:\nThe sum of these values is $$$10$$$, modulo $$$998\\,244\\,353$$$."
        }
    },
    "2044": {
        "A": {
            "name": "A. Easy Problem",
            "statement": "Cube is given an integer $$$n$$$. She wants to know how many ordered pairs of positive integers $$$(a,b)$$$ there are such that $$$a=n-b$$$. Since Cube is not very good at math, please help her!",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 99$$$) — the number of test cases.\nThe only line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 100$$$).",
            "output_format": "For each test case, output the number of ordered pairs $$$(a, b)$$$ on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "2",
                        "4",
                        "6"
                    ],
                    "output": [
                        "1",
                        "3",
                        "5"
                    ]
                }
            ],
            "notes": "In the first test case, the only ordered pair that works is $$$(a,b)=(1,1)$$$.\nIn the second test case, the three ordered pairs of $$$(a,b)$$$ that work are $$$(3,1), (2,2), (1,3)$$$."
        },
        "B": {
            "name": "B. Normal Problem",
            "statement": "A string consisting of only characters 'p', 'q', and 'w' is painted on a glass window of a store. Ship walks past the store, standing directly in front of the glass window, and observes string $$$a$$$. Ship then heads inside the store, looks directly at the same glass window, and observes string $$$b$$$.\nShip gives you string $$$a$$$. Your job is to find and output $$$b$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe only line of each test case contains a string $$$a$$$ ($$$1 \\leq |a| \\leq 100$$$) — the string Ship observes from outside the store. It is guaranteed that $$$a$$$ only contains characters 'p', 'q', and 'w'.",
            "output_format": "For each test case, output string $$$b$$$, the string Ship observes from inside the store, on a new line.",
            "examples": [
                {
                    "input": [
                        "5",
                        "qwq",
                        "ppppp",
                        "pppwwwqqq",
                        "wqpqwpqwwqp",
                        "pqpqpqpq"
                    ],
                    "output": [
                        "pwp",
                        "qqqqq",
                        "pppwwwqqq",
                        "qpwwpqwpqpw",
                        "pqpqpqpq"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. Hard Problem",
            "statement": "Ball is the teacher in Paperfold University. The seats of his classroom are arranged in $$$2$$$ rows with $$$m$$$ seats each.\nBall is teaching $$$a + b + c$$$ monkeys, and he wants to assign as many monkeys to a seat as possible. Ball knows that $$$a$$$ of them only want to sit in row $$$1$$$, $$$b$$$ of them only want to sit in row $$$2$$$, and $$$c$$$ of them have no preference. Only one monkey may sit in each seat, and each monkey's preference must be followed if it is seated.\nWhat is the maximum number of monkeys that Ball can seat?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nEach test case contains four integers $$$m$$$, $$$a$$$, $$$b$$$, and $$$c$$$ ($$$1 \\leq m, a, b, c \\leq 10^8$$$).",
            "output_format": "For each test case, output the maximum number of monkeys you can seat.",
            "examples": [
                {
                    "input": [
                        "5",
                        "10 5 5 10",
                        "3 6 1 1",
                        "15 14 12 4",
                        "1 1 1 1",
                        "420 6 9 69"
                    ],
                    "output": [
                        "20",
                        "5",
                        "30",
                        "2",
                        "84"
                    ]
                }
            ],
            "notes": "In the second test case, $$$6$$$ monkeys want to sit in the front row, but only $$$3$$$ seats are available. The monkeys that have no preference and the monkeys who prefer sitting in the second row can sit in the second row together. Thus, the answer is $$$3+2=5$$$."
        },
        "D": {
            "name": "D. Harder Problem",
            "statement": "Given a sequence of positive integers, a positive integer is called a mode of the sequence if it occurs the maximum number of times that any positive integer occurs. For example, the mode of $$$[2,2,3]$$$ is $$$2$$$. Any of $$$9$$$, $$$8$$$, or $$$7$$$ can be considered to be a mode of the sequence $$$[9,9,8,8,7,7]$$$.\nYou gave UFO an array $$$a$$$ of length $$$n$$$. To thank you, UFO decides to construct another array $$$b$$$ of length $$$n$$$ such that $$$a_i$$$ is a mode of the sequence $$$[b_1, b_2, \\ldots, b_i]$$$ for all $$$1 \\leq i \\leq n$$$.\nHowever, UFO doesn't know how to construct array $$$b$$$, so you must help her. Note that $$$1 \\leq b_i \\leq n$$$ must hold for your array for all $$$1 \\leq i \\leq n$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of $$$a$$$.\nThe following line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output $$$n$$$ numbers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\leq b_i \\leq n$$$) on a new line. It can be shown that $$$b$$$ can always be constructed. If there are multiple possible arrays, you may print any.",
            "examples": [
                {
                    "input": [
                        "4",
                        "2",
                        "1 2",
                        "4",
                        "1 1 1 2",
                        "8",
                        "4 5 5 5 1 1 2 1",
                        "10",
                        "1 1 2 2 1 1 3 3 1 1"
                    ],
                    "output": [
                        "1 2",
                        "1 1 2 2",
                        "4 5 5 1 1 2 2 3",
                        "1 8 2 2 1 3 3 9 1 1"
                    ]
                }
            ],
            "notes": "Let's verify the correctness for our sample output in test case $$$2$$$."
        },
        "E": {
            "name": "E. Insane Problem",
            "statement": "Wave is given five integers $$$k$$$, $$$l_1$$$, $$$r_1$$$, $$$l_2$$$, and $$$r_2$$$. Wave wants you to help her count the number of ordered pairs $$$(x, y)$$$ such that all of the following are satisfied:\n$$$l_1 \\leq x \\leq r_1$$$.  $$$l_2 \\leq y \\leq r_2$$$.  There exists a non-negative integer $$$n$$$ such that $$$\\frac{y}{x} = k^n$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe only line of each test case contains five integers $$$k$$$, $$$l_1$$$, $$$r_1$$$, $$$l_2$$$, and $$$r_2$$$ ($$$2 \\leq k \\leq 10^9, 1 \\leq l_1 \\leq r_1 \\leq 10^9, 1 \\leq l_2 \\leq r_2 \\leq 10^9$$$).",
            "output_format": "For each test case, output the number of matching ordered pairs $$$(x, y)$$$ on a new line.",
            "examples": [
                {
                    "input": [
                        "5",
                        "2 2 6 2 12",
                        "2 1 1000000000 1 1000000000",
                        "3 5 7 15 63",
                        "1000000000 1 5 6 1000000000",
                        "15 17 78 2596 20914861"
                    ],
                    "output": [
                        "12",
                        "1999999987",
                        "6",
                        "1",
                        "197"
                    ]
                }
            ],
            "notes": "In the third test case, the matching ordered pairs are the following:\nIn the fourth test case, the only valid ordered pair is $$$(1,1\\,000\\,000\\,000)$$$"
        },
        "F": {
            "name": "F. Easy Demon Problem",
            "statement": "For an arbitrary grid, Robot defines its beauty to be the sum of elements in the grid.\nRobot gives you an array $$$a$$$ of length $$$n$$$ and an array $$$b$$$ of length $$$m$$$. You construct a $$$n$$$ by $$$m$$$ grid $$$M$$$ such that $$$M_{i,j}=a_i\\cdot b_j$$$ for all $$$1 \\leq i \\leq n$$$ and $$$1 \\leq j \\leq m$$$.\nThen, Robot gives you $$$q$$$ queries, each consisting of a single integer $$$x$$$. For each query, determine whether or not it is possible to perform the following operation exactly once so that $$$M$$$ has a beauty of $$$x$$$:\nChoose integers $$$r$$$ and $$$c$$$ such that $$$1 \\leq r \\leq n$$$ and $$$1 \\leq c \\leq m$$$  Set $$$M_{i,j}$$$ to be $$$0$$$ for all ordered pairs $$$(i,j)$$$ such that $$$i=r$$$, $$$j=c$$$, or both.\nNote that queries are not persistent, meaning that you do not actually set any elements to $$$0$$$ in the process — you are only required to output if it is possible to find $$$r$$$ and $$$c$$$ such that if the above operation is performed, the beauty of the grid will be $$$x$$$. Also, note that you must perform the operation for each query, even if the beauty of the original grid is already $$$x$$$.",
            "input_format": "The first line contains three integers $$$n$$$, $$$m$$$, and $$$q$$$ ($$$1 \\leq n,m \\leq 2\\cdot 10^5, 1 \\leq q \\leq 5\\cdot 10^4$$$) — the length of $$$a$$$, the length of $$$b$$$, and the number of queries respectively.\nThe second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\leq |a_i| \\leq n$$$).\nThe third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$0 \\leq |b_i| \\leq m$$$).\nThe following $$$q$$$ lines each contain a single integer $$$x$$$ ($$$1 \\leq |x| \\leq 2\\cdot 10^5$$$), the beauty of the grid you wish to achieve by setting all elements in a row and a column to $$$0$$$.",
            "output_format": "For each testcase, output \"YES\" (without quotes) if there is a way to perform the aforementioned operation such that the beauty is $$$x$$$, and \"NO\" (without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).",
            "examples": [
                {
                    "input": [
                        "3 3 6",
                        "-2 3 -3",
                        "-2 2 -1",
                        "-1",
                        "1",
                        "-2",
                        "2",
                        "-3",
                        "3"
                    ],
                    "output": [
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "In the second example, the grid is\n0 -2 5 0 -3\n0 4 -10 0 6\n0 -6 15 0 -9\n0 0 0 0 0\n0 0 0 0 0\nBy performing the operation with $$$r=4$$$ and $$$c=2$$$, we create the following grid:\n0 0 5 0 -3\n0 0 -10 0 6\n0 0 15 0 -9\n0 0 0 0 0\n0 0 0 0 0\nwhich has beauty $$$4$$$. Thus, we output YES.\nIn the second query, selecting $$$r=3$$$ and $$$c=5$$$ creates a grid with beauty $$$-3$$$.\nIn the third query, selecting $$$r=3$$$ and $$$c=3$$$ creates a grid with beauty $$$5$$$."
        },
        "G1": {
            "name": "G1. Medium Demon Problem (easy version)",
            "statement": "This is the easy version of the problem. The key difference between the two versions is highlighted in bold.\nA group of $$$n$$$ spiders has come together to exchange plushies. Initially, each spider has $$$1$$$ plushie. Every year, if spider $$$i$$$ has at least one plushie, he will give exactly one plushie to spider $$$r_i$$$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, if any spider has more than $$$1$$$ plushie at any point in time, they will throw all but $$$1$$$ away.\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $$$1$$$ can never be stable.\nFind the first year in which the process becomes stable.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of spiders.\nThe following line contains $$$n$$$ integers $$$r_1, r_2, \\ldots, r_n$$$ ($$$1 \\leq r_i \\leq n, r_i \\neq i$$$) — the recipient of the plushie of each spider.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output an integer on a new line, the first year in which the process becomes stable.",
            "examples": [
                {
                    "input": [
                        "5",
                        "2",
                        "2 1",
                        "5",
                        "2 3 4 5 1",
                        "5",
                        "2 1 4 2 3",
                        "5",
                        "4 1 1 5 4",
                        "10",
                        "4 3 9 1 6 7 9 10 10 3"
                    ],
                    "output": [
                        "2",
                        "2",
                        "5",
                        "4",
                        "5"
                    ]
                }
            ],
            "notes": "For the second test case:\nFor the third test case:"
        },
        "G2": {
            "name": "G2. Medium Demon Problem (hard version)",
            "statement": "This is the hard version of the problem. The key difference between the two versions is highlighted in bold.\nA group of $$$n$$$ spiders has come together to exchange plushies. Initially, each spider has $$$1$$$ plushie. Every year, if spider $$$i$$$ has at least one plushie, he will give exactly one plushie to spider $$$r_i$$$. Otherwise, he will do nothing. Note that all plushie transfers happen at the same time. In this version, each spider is allowed to have more than 1 plushie at any point in time.\nThe process is stable in the current year if each spider has the same number of plushies (before the current year's exchange) as he did the previous year (before the previous year's exchange). Note that year $$$1$$$ can never be stable.\nFind the first year in which the process becomes stable.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of spiders.\nThe following line contains $$$n$$$ integers $$$r_1, r_2, \\ldots, r_n$$$ ($$$1 \\leq r_i \\leq n, r_i \\neq i$$$) — the recipient of the plushie of each spider.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output an integer on a new line, the first year in which the process becomes stable.",
            "examples": [
                {
                    "input": [
                        "5",
                        "2",
                        "2 1",
                        "5",
                        "2 3 4 5 1",
                        "5",
                        "2 1 4 2 3",
                        "5",
                        "4 1 1 5 4",
                        "10",
                        "4 3 9 1 6 7 9 10 10 3"
                    ],
                    "output": [
                        "2",
                        "2",
                        "5",
                        "5",
                        "5"
                    ]
                }
            ],
            "notes": "For the second test case:\nFor the third test case:"
        },
        "H": {
            "name": "H. Hard Demon Problem",
            "statement": "Swing is opening a pancake factory! A good pancake factory must be good at flattening things, so Swing is going to test his new equipment on 2D matrices.\nSwing is given an $$$n \\times n$$$ matrix $$$M$$$ containing positive integers. He has $$$q$$$ queries to ask you.\nFor each query, he gives you four integers $$$x_1$$$, $$$y_1$$$, $$$x_2$$$, $$$y_2$$$ and asks you to flatten the submatrix bounded by $$$(x_1, y_1)$$$ and $$$(x_2, y_2)$$$ into an array $$$A$$$. Formally, $$$A = [M_{(x1,y1)}, M_{(x1,y1+1)}, \\ldots, M_{(x1,y2)}, M_{(x1+1,y1)}, M_{(x1+1,y1+1)}, \\ldots, M_{(x2,y2)}]$$$.\nThe following image depicts the flattening of a submatrix bounded by the red dotted lines. The orange arrows denote the direction that the elements of the submatrix are appended to the back of $$$A$$$, and $$$A$$$ is shown at the bottom of the image.\nAfterwards, he asks you for the value of $$$\\sum_{i=1}^{|A|} A_i \\cdot i$$$ (sum of $$$A_i \\cdot i$$$ over all $$$i$$$).",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of test cases.\nThe first line of each test contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\leq n \\leq 2000, 1 \\leq q \\leq 10^6$$$) — the length of $$$M$$$ and the number of queries.\nThe following $$$n$$$ lines contain $$$n$$$ integers each, the $$$i$$$'th of which contains $$$M_{(i,1)}, M_{(i,2)}, \\ldots, M_{(i,n)}$$$ ($$$1 \\leq M_{(i, j)} \\leq 10^6$$$).\nThe following $$$q$$$ lines contain four integers $$$x_1$$$, $$$y_1$$$, $$$x_2$$$, and $$$y_2$$$ ($$$1 \\leq x_1 \\leq x_2 \\leq n, 1 \\leq y_1 \\leq y_2 \\leq n$$$) — the bounds of the query.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$10^6$$$.",
            "output_format": "For each test case, output the results of the $$$q$$$ queries on a new line.",
            "examples": [
                {
                    "input": [
                        "2",
                        "4 3",
                        "1 5 2 4",
                        "4 9 5 3",
                        "4 5 2 3",
                        "1 5 5 2",
                        "1 1 4 4",
                        "2 2 3 3",
                        "1 2 4 3",
                        "3 3",
                        "1 2 3",
                        "4 5 6",
                        "7 8 9",
                        "1 1 1 3",
                        "1 3 3 3",
                        "2 2 2 2"
                    ],
                    "output": [
                        "500 42 168 ",
                        "14 42 5"
                    ]
                }
            ],
            "notes": "In the second query of the first test case, $$$A = [9, 5, 5, 2]$$$. Therefore, the sum is $$$1 \\cdot 9 + 2 \\cdot 5 + 3 \\cdot 5 + 4 \\cdot 2 = 42$$$."
        }
    },
    "2009": {
        "A": {
            "name": "A. Minimize!",
            "statement": "You are given two integers $$$a$$$ and $$$b$$$ ($$$a \\leq b$$$). Over all possible integer values of $$$c$$$ ($$$a \\leq c \\leq b$$$), find the minimum value of $$$(c - a) + (b - c)$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 55$$$) — the number of test cases.\nEach test case contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\leq a \\leq b \\leq 10$$$).",
            "output_format": "For each test case, output the minimum possible value of $$$(c - a) + (b - c)$$$ on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "1 2",
                        "3 10",
                        "5 5"
                    ],
                    "output": [
                        "1",
                        "7",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case, you can choose $$$c = 1$$$ and obtain an answer of $$$(1 - 1) + (2 - 1) = 1$$$. It can be shown this is the minimum value possible.\nIn the second test case, you can choose $$$c = 6$$$ and obtain an answer of $$$(6 - 3) + (10 - 6) = 7$$$. It can be shown this is the minimum value possible."
        },
        "B": {
            "name": "B. osu!mania",
            "statement": "You are playing your favorite rhythm game, osu!mania. The layout of your beatmap consists of $$$n$$$ rows and $$$4$$$ columns. Because notes at the bottom are closer, you will process the bottommost row first and the topmost row last. Each row will contain exactly one note, represented as a '#'.\nFor each note $$$1, 2, \\dots, n$$$, in the order of processing, output the column in which the note appears.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nFor each test case, the first line contains $$$n$$$ ($$$1 \\leq n \\leq 500$$$) — the number of rows of the beatmap.\nThe following $$$n$$$ lines contain $$$4$$$ characters. The $$$i$$$-th line represents the $$$i$$$-th row of the beatmap from the top. It is guaranteed that the characters are either '.' or '#', and exactly one of the characters is '#'.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$500$$$.",
            "output_format": "For each test case, output $$$n$$$ integers on a new line, the column that the $$$i$$$-th note appears in for all $$$i$$$ from $$$1$$$ to $$$n$$$.",
            "examples": [
                {
                    "input": [
                        "3",
                        "4",
                        "#...",
                        ".#..",
                        "..#.",
                        "...#",
                        "2",
                        ".#..",
                        ".#..",
                        "1",
                        "...#"
                    ],
                    "output": [
                        "4 3 2 1 ",
                        "2 2 ",
                        "4"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. The Legend of Freya the Frog",
            "statement": "Freya the Frog is traveling on the 2D coordinate plane. She is currently at point $$$(0,0)$$$ and wants to go to point $$$(x,y)$$$. In one move, she chooses an integer $$$d$$$ such that $$$0 \\leq d \\leq k$$$ and jumps $$$d$$$ spots forward in the direction she is facing.\nInitially, she is facing the positive $$$x$$$ direction. After every move, she will alternate between facing the positive $$$x$$$ direction and the positive $$$y$$$ direction (i.e., she will face the positive $$$y$$$ direction on her second move, the positive $$$x$$$ direction on her third move, and so on).\nWhat is the minimum amount of moves she must perform to land on point $$$(x,y)$$$?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nEach test case contains three integers $$$x$$$, $$$y$$$, and $$$k$$$ ($$$0 \\leq x, y \\leq 10^9, 1 \\leq k \\leq 10^9$$$).",
            "output_format": "For each test case, output the number of jumps Freya needs to make on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "9 11 3",
                        "0 10 8",
                        "1000000 100000 10"
                    ],
                    "output": [
                        "8",
                        "4",
                        "199999"
                    ]
                }
            ],
            "notes": "In the first sample, one optimal set of moves is if Freya jumps in the following way: ($$$0,0$$$) $$$\\rightarrow$$$ ($$$2,0$$$) $$$\\rightarrow$$$ ($$$2,2$$$) $$$\\rightarrow$$$ ($$$3,2$$$) $$$\\rightarrow$$$ ($$$3,5$$$) $$$\\rightarrow$$$ ($$$6,5$$$) $$$\\rightarrow$$$ ($$$6,8$$$) $$$\\rightarrow$$$ ($$$9,8$$$) $$$\\rightarrow$$$ ($$$9,11$$$). This takes 8 jumps."
        },
        "D": {
            "name": "D. Satyam and Counting",
            "statement": "Satyam is given $$$n$$$ distinct points on the 2D coordinate plane. It is guaranteed that $$$0 \\leq y_i \\leq 1$$$ for all given points $$$(x_i, y_i)$$$. How many different nondegenerate right triangles$$$^{\\text{∗}}$$$ can be formed from choosing three different points as its vertices?\nTwo triangles $$$a$$$ and $$$b$$$ are different if there is a point $$$v$$$ such that $$$v$$$ is a vertex of $$$a$$$ but not a vertex of $$$b$$$.\n$$$^{\\text{∗}}$$$A nondegenerate right triangle has positive area and an interior $$$90^{\\circ}$$$ angle.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$3 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of points.\nThe following $$$n$$$ lines contain two integers $$$x_i$$$ and $$$y_i$$$ ($$$0 \\leq x_i \\leq n$$$, $$$0 \\leq y_i \\leq 1$$$) — the $$$i$$$'th point that Satyam can choose from. It is guaranteed that all $$$(x_i, y_i)$$$ are pairwise distinct.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "Output an integer for each test case, the number of distinct nondegenerate right triangles that can be formed from choosing three points.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5",
                        "1 0",
                        "1 1",
                        "3 0",
                        "5 0",
                        "2 1",
                        "3",
                        "0 0",
                        "1 0",
                        "3 0",
                        "9",
                        "1 0",
                        "2 0",
                        "3 0",
                        "4 0",
                        "5 0",
                        "2 1",
                        "7 1",
                        "8 1",
                        "9 1"
                    ],
                    "output": [
                        "4",
                        "0",
                        "8"
                    ]
                }
            ],
            "notes": "The four triangles in question for the first test case:"
        },
        "E": {
            "name": "E. Klee's SUPER DUPER LARGE Array!!!",
            "statement": "Klee has an array $$$a$$$ of length $$$n$$$ containing integers $$$[k, k+1, ..., k+n-1]$$$ in that order. Klee wants to choose an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) such that $$$x = |a_1 + a_2 + \\dots + a_i - a_{i+1} - \\dots - a_n|$$$ is minimized. Note that for an arbitrary integer $$$z$$$, $$$|z|$$$ represents the absolute value of $$$z$$$.\nOutput the minimum possible value of $$$x$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nEach test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\leq n, k \\leq 10^9$$$) — the length of the array and the starting element of the array.",
            "output_format": "For each test case, output the minimum value of $$$x$$$ on a new line.",
            "examples": [
                {
                    "input": [
                        "4",
                        "2 2",
                        "7 2",
                        "5 3",
                        "1000000000 1000000000"
                    ],
                    "output": [
                        "1",
                        "5",
                        "1",
                        "347369930"
                    ]
                }
            ],
            "notes": "In the first sample, $$$a = [2, 3]$$$. When $$$i = 1$$$ is chosen, $$$x = |2-3| = 1$$$. It can be shown this is the minimum possible value of $$$x$$$.\nIn the third sample, $$$a = [3, 4, 5, 6, 7]$$$. When $$$i = 3$$$ is chosen, $$$x = |3 + 4 + 5 - 6 - 7| = 1$$$. It can be shown this is the minimum possible value of $$$x$$$."
        },
        "F": {
            "name": "F. Firefly's Queries",
            "statement": "Firefly is given an array $$$a$$$ of length $$$n$$$. Let $$$c_i$$$ denote the $$$i$$$'th cyclic shift$$$^{\\text{∗}}$$$ of $$$a$$$. She creates a new array $$$b$$$ such that $$$b = c_1 + c_2 + \\dots + c_n$$$ where $$$+$$$ represents concatenation$$$^{\\text{†}}$$$.\nThen, she asks you $$$q$$$ queries. For each query, output the sum of all elements in the subarray of $$$b$$$ that starts from the $$$l$$$-th element and ends at the $$$r$$$-th element, inclusive of both ends.\n$$$^{\\text{∗}}$$$The $$$x$$$-th ($$$1 \\leq x \\leq n$$$) cyclic shift of the array $$$a$$$ is $$$a_x, a_{x+1} \\ldots a_n, a_1, a_2 \\ldots a_{x - 1}$$$. Note that the $$$1$$$-st shift is the initial $$$a$$$.$$$^{\\text{†}}$$$The concatenation of two arrays $$$p$$$ and $$$q$$$ of length $$$n$$$ (in other words, $$$p + q$$$) is $$$p_1, p_2, ..., p_n, q_1, q_2, ..., q_n$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\leq n, q \\leq 2 \\cdot 10^5$$$) — the length of the array and the number of queries.\nThe following line contains $$$n$$$ integers $$$a_1, a_2, ..., a_n$$$ ($$$1 \\leq a_i \\leq 10^6$$$).\nThe following $$$q$$$ lines contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n^2$$$) — the left and right bounds of the query.\nNote that the large inputs may require the use of 64-bit integers.\nIt is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\cdot 10^5$$$ and the sum of $$$q$$$ does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each query, output the answer on a new line.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3 3",
                        "1 2 3",
                        "1 9",
                        "3 5",
                        "8 8",
                        "5 5",
                        "4 8 3 2 4",
                        "1 14",
                        "3 7",
                        "7 10",
                        "2 11",
                        "1 25",
                        "1 1",
                        "6",
                        "1 1",
                        "5 7",
                        "3 1 6 10 4",
                        "3 21",
                        "6 17",
                        "2 2",
                        "1 5",
                        "1 14",
                        "9 15",
                        "12 13",
                        "5 3",
                        "4 9 10 10 1",
                        "20 25",
                        "3 11",
                        "20 22"
                    ],
                    "output": [
                        "18",
                        "8",
                        "1",
                        "55",
                        "20",
                        "13",
                        "41",
                        "105",
                        "6",
                        "96",
                        "62",
                        "1",
                        "24",
                        "71",
                        "31",
                        "14",
                        "44",
                        "65",
                        "15"
                    ]
                }
            ],
            "notes": "For the first test case, $$$b = [1, 2, 3, 2, 3, 1, 3, 1, 2]$$$."
        },
        "G1": {
            "name": "G1. Yunli's Subarray Queries (easy version)",
            "statement": "This is the easy version of the problem. In this version, it is guaranteed that $$$r=l+k-1$$$ for all queries.\nFor an arbitrary array $$$b$$$, Yunli can perform the following operation any number of times:\nSelect an index $$$i$$$. Set $$$b_i = x$$$ where $$$x$$$ is any integer she desires ($$$x$$$ is not limited to the interval $$$[1,n]$$$).\nDenote $$$f(b)$$$ as the minimum number of operations she needs to perform until there exists a consecutive subarray$$$^{\\text{∗}}$$$ of length at least $$$k$$$ in $$$b$$$.\nYunli is given an array $$$a$$$ of size $$$n$$$ and asks you $$$q$$$ queries. In each query, you must output $$$\\sum_{j=l+k-1}^{r} f([a_l, a_{l+1}, \\ldots, a_j])$$$. Note that in this version, you are only required to output $$$f([a_l, a_{l+1}, \\ldots, a_{l+k-1}])$$$.\n$$$^{\\text{∗}}$$$If there exists a consecutive subarray of length $$$k$$$ that starts at index $$$i$$$ ($$$1 \\leq i \\leq |b|-k+1$$$), then $$$b_j = b_{j-1} + 1$$$ for all $$$i < j \\leq i+k-1$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$k$$$, and $$$q$$$ ($$$1 \\leq k \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq q \\leq 2 \\cdot 10^5$$$) — the length of the array, the length of the consecutive subarray, and the number of queries.\nThe following line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$).\nThe following $$$q$$$ lines contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$, $$$r=l+k-1$$$) — the bounds of the query.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "Output $$$\\sum_{j=l+k-1}^{r} f([a_l, a_{l+1}, \\ldots, a_j])$$$ for each query on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "7 5 3",
                        "1 2 3 2 1 2 3",
                        "1 5",
                        "2 6",
                        "3 7",
                        "8 4 2",
                        "4 3 1 1 2 4 3 2",
                        "3 6",
                        "2 5",
                        "5 4 2",
                        "4 5 1 2 3",
                        "1 4",
                        "2 5"
                    ],
                    "output": [
                        "2",
                        "3",
                        "2",
                        "2",
                        "2",
                        "2",
                        "1"
                    ]
                }
            ],
            "notes": "In the first query of the first testcase, $$$b=[1,2,3,2,1]$$$. Yunli can make a consecutive subarray of length $$$5$$$ in $$$2$$$ moves:\nIn the second query of the first testcase, $$$b=[2,3,2,1,2]$$$. Yunli can make a consecutive subarray of length $$$5$$$ in $$$3$$$ moves:"
        },
        "G2": {
            "name": "G2. Yunli's Subarray Queries (hard version)",
            "statement": "This is the hard version of the problem. In this version, it is guaranteed that $$$r \\geq l+k-1$$$ for all queries.\nFor an arbitrary array $$$b$$$, Yunli can perform the following operation any number of times:\nSelect an index $$$i$$$. Set $$$b_i = x$$$ where $$$x$$$ is any integer she desires ($$$x$$$ is not limited to the interval $$$[1,n]$$$).\nDenote $$$f(b)$$$ as the minimum number of operations she needs to perform until there exists a consecutive subarray$$$^{\\text{∗}}$$$ of length at least $$$k$$$ in $$$b$$$.\nYunli is given an array $$$a$$$ of size $$$n$$$ and asks you $$$q$$$ queries. In each query, you must output $$$\\sum_{j=l+k-1}^{r} f([a_l, a_{l+1}, \\ldots, a_j])$$$.\n$$$^{\\text{∗}}$$$If there exists a consecutive subarray of length $$$k$$$ that starts at index $$$i$$$ ($$$1 \\leq i \\leq |b|-k+1$$$), then $$$b_j = b_{j-1} + 1$$$ for all $$$i < j \\leq i+k-1$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$k$$$, and $$$q$$$ ($$$1 \\leq k \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq q \\leq 2 \\cdot 10^5$$$) — the length of the array, the length of the consecutive subarray, and the number of queries.\nThe following line contains $$$n$$$ integers $$$a_1, a_2, ..., a_n$$$ ($$$1 \\leq a_i \\leq n$$$).\nThe following $$$q$$$ lines contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$, $$$r \\geq l+k-1$$$) — the bounds of the query.\nIt is guaranteed the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "Output $$$\\sum_{j=l+k-1}^{r} f([a_l, a_{l+1}, \\ldots, a_j])$$$ for each query on a new line.",
            "examples": [
                {
                    "input": [
                        "3",
                        "7 5 3",
                        "1 2 3 2 1 2 3",
                        "1 7",
                        "2 7",
                        "3 7",
                        "8 4 2",
                        "4 3 1 1 2 4 3 2",
                        "3 6",
                        "1 5",
                        "5 4 2",
                        "4 5 1 2 3",
                        "1 4",
                        "1 5"
                    ],
                    "output": [
                        "6",
                        "5",
                        "2",
                        "2",
                        "5",
                        "2",
                        "3"
                    ]
                }
            ],
            "notes": "In the second query of the first testcase, we calculate the following function values:\nThe answer to this query is $$$3+2=5$$$."
        },
        "G3": {
            "name": "G3. Yunli's Subarray Queries (extreme version)",
            "statement": "This is the extreme version of the problem. In this version, the output of each query is different from the easy and hard versions. It is also guaranteed that $$$r \\geq l+k-1$$$ for all queries.\nFor an arbitrary array $$$b$$$, Yunli can perform the following operation any number of times:\nSelect an index $$$i$$$. Set $$$b_i = x$$$ where $$$x$$$ is any integer she desires ($$$x$$$ is not limited to the interval $$$[1,n]$$$).\nDenote $$$f(b)$$$ as the minimum number of operations she needs to perform until there exists a consecutive subarray$$$^{\\text{∗}}$$$ of length at least $$$k$$$ in $$$b$$$.\nYunli is given an array $$$a$$$ of size $$$n$$$ and asks you $$$q$$$ queries. In each query, you must output $$$\\sum_{i=l}^{r-k+1} \\sum_{j=i+k-1}^{r} f([a_i, a_{i+1}, \\ldots, a_j])$$$.\n$$$^{\\text{∗}}$$$If there exists a consecutive subarray of length $$$k$$$ that starts at index $$$i$$$ ($$$1 \\leq i \\leq |b|-k+1$$$), then $$$b_j = b_{j-1} + 1$$$ for all $$$i < j \\leq i+k-1$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$k$$$, and $$$q$$$ ($$$1 \\leq k \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq q \\leq 2 \\cdot 10^5$$$) — the length of the array, the length of the consecutive subarray, and the number of queries.\nThe following line contains $$$n$$$ integers $$$a_1, a_2, ..., a_n$$$ ($$$1 \\leq a_i \\leq n$$$).\nThe following $$$q$$$ lines contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$, $$$r \\geq l+k-1$$$) — the bounds of the query.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "Output $$$\\sum_{i=l}^{r-k+1} \\sum_{j=i+k-1}^{r} f([a_i, a_{i+1}, \\ldots, a_j])$$$ for each query on a new line.",
            "examples": [
                {
                    "input": [
                        "5",
                        "7 2 4",
                        "1 2 3 2 1 2 3",
                        "4 6",
                        "1 7",
                        "2 7",
                        "3 7",
                        "8 4 2",
                        "4 3 1 1 2 4 3 2",
                        "3 6",
                        "1 5",
                        "5 4 2",
                        "4 5 1 2 3",
                        "1 4",
                        "1 5",
                        "10 4 8",
                        "2 3 6 5 8 9 8 10 10 1",
                        "2 7",
                        "6 10",
                        "1 9",
                        "1 6",
                        "3 9",
                        "4 10",
                        "2 10",
                        "1 8",
                        "10 7 4",
                        "3 4 5 3 4 5 9 10 8 9",
                        "1 9",
                        "2 10",
                        "1 10",
                        "2 9"
                    ],
                    "output": [
                        "1",
                        "3",
                        "3",
                        "3",
                        "2",
                        "7",
                        "2",
                        "4",
                        "8",
                        "6",
                        "28",
                        "7",
                        "16",
                        "20",
                        "32",
                        "19",
                        "18",
                        "15",
                        "26",
                        "9"
                    ]
                }
            ],
            "notes": "In the first query of the first testcase, we can calculate the answer for the query through the following:\nThe answer to this query is $$$1+0+0=1$$$."
        }
    },
    "1999": {
        "A": {
            "name": "A. A+B Again?",
            "statement": "Given a two-digit positive integer $$$n$$$, find the sum of its digits.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 90$$$) — the number of test cases.\nThe only line of each test case contains a single two-digit positive integer $$$n$$$ ($$$10 \\leq n \\leq 99$$$).",
            "output_format": "For each test case, output a single integer — the sum of the digits of $$$n$$$.",
            "examples": [
                {
                    "input": [
                        "8",
                        "77",
                        "21",
                        "40",
                        "34",
                        "19",
                        "84",
                        "10",
                        "99"
                    ],
                    "output": [
                        "14",
                        "3",
                        "4",
                        "7",
                        "10",
                        "12",
                        "1",
                        "18"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Card Game",
            "statement": "Suneet and Slavic play a card game. The rules of the game are as follows:\nEach card has an integer value between $$$1$$$ and $$$10$$$.  Each player receives $$$2$$$ cards which are face-down (so a player doesn't know their cards).  The game is turn-based and consists exactly of two turns. In a round, both players pick a random unflipped card and flip it. The player who flipped a card with a strictly greater number wins the round. In case of equality, no one wins the round.  A player wins a game if he wins the most number of rounds (i.e. strictly greater than the other player). In case of equality, no one wins the game.\nSince Suneet and Slavic aren't best friends, you need to calculate the number of ways the game could happen that Suneet would end up as the winner.\nFor a better understanding, please check the notes section.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first and only line of each test case contains $$$4$$$ integers $$$a_1$$$, $$$a_2$$$, $$$b_1$$$, $$$b_2$$$ ($$$1 \\leq a_1, a_2, b_1, b_2 \\leq 10$$$) where $$$a_1$$$ and $$$a_2$$$ represent the cards Suneet has, and $$$b_1$$$ and $$$b_2$$$ represent the cards Slavic has, respectively.",
            "output_format": "For each test case, output a single integer — the number of games Suneet would win considering all possible games.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3 8 2 6",
                        "1 1 1 1",
                        "10 10 2 2",
                        "1 1 10 10",
                        "3 8 7 2"
                    ],
                    "output": [
                        "2",
                        "0",
                        "4",
                        "0",
                        "2"
                    ]
                }
            ],
            "notes": "Consider the first test case when Slavic starts with the cards that have the values $$$2$$$ and $$$6$$$, and Suneet starts with cards that have the values $$$3$$$ and $$$8$$$. The game could happen in $$$4$$$ different ways:\n\n\n"
        },
        "C": {
            "name": "C. Showering",
            "statement": "As a computer science student, Alex faces a hard challenge — showering. He tries to shower daily, but despite his best efforts there are always challenges. He takes $$$s$$$ minutes to shower and a day only has $$$m$$$ minutes!\nHe already has $$$n$$$ tasks planned for the day. Task $$$i$$$ is represented as an interval $$$(l_i$$$, $$$r_i)$$$, which means that Alex is busy and can not take a shower in that time interval (at any point in time strictly between $$$l_i$$$ and $$$r_i$$$). No two tasks overlap.\nGiven all $$$n$$$ time intervals, will Alex be able to shower that day? In other words, will Alex have a free time interval of length at least $$$s$$$?\nIn the first test case, Alex can shower for the first $$$3$$$ minutes of the day and not miss any of the tasks.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$s$$$, and $$$m$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$; $$$1 \\leq s, m \\leq 10^9$$$) — the number of time intervals Alex already has planned, the amount of time Alex takes to take a shower, and the amount of minutes a day has.\nThen $$$n$$$ lines follow, the $$$i$$$-th of which contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$0 \\leq l_i < r_i \\leq m$$$) — the time interval of the $$$i$$$-th task. No two tasks overlap.\nAdditional constraint on the input: $$$l_i > r_{i-1}$$$ for every $$$i > 1$$$.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case output \"YES\" (without quotes) if Alex can take a shower for that given test case, and \"NO\" (also without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).",
            "examples": [
                {
                    "input": [
                        "4",
                        "3 3 10",
                        "3 5",
                        "6 8",
                        "9 10",
                        "3 3 10",
                        "1 2",
                        "3 5",
                        "6 7",
                        "3 3 10",
                        "1 2",
                        "3 5",
                        "6 8",
                        "3 4 10",
                        "1 2",
                        "6 7",
                        "8 9"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": ""
        },
        "D": {
            "name": "D. Slavic's Exam",
            "statement": "Slavic has a very tough exam and needs your help in order to pass it. Here is the question he is struggling with:\nThere exists a string $$$s$$$, which consists of lowercase English letters and possibly zero or more \"?\".\nSlavic is asked to change each \"?\" to a lowercase English letter such that string $$$t$$$ becomes a subsequence (not necessarily continuous) of the string $$$s$$$.\nOutput any such string, or say that it is impossible in case no string that respects the conditions exists.",
            "input_format": "The first line contains a single integer $$$T$$$ ($$$1 \\leq T \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single string $$$s$$$ ($$$1 \\leq |s| \\leq 2 \\cdot 10^5$$$, and $$$s$$$ consists only of lowercase English letters and \"?\"-s)  – the original string you have.\nThe second line of each test case contains a single string $$$t$$$ ($$$1 \\leq |t| \\leq |s|$$$, and $$$t$$$ consists only of lowercase English letters)  – the string that should be a subsequence of string $$$s$$$.\nThe sum of $$$|s|$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$, where $$$|x|$$$ denotes the length of the string $$$x$$$.",
            "output_format": "For each test case, if no such string exists as described in the statement, output \"NO\" (without quotes).\nOtherwise, output \"YES\" (without quotes). Then, output one line — the string that respects all conditions.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).\nIf multiple answers are possible, you can output any of them.",
            "examples": [
                {
                    "input": [
                        "5",
                        "?????",
                        "xbx",
                        "ab??e",
                        "abcde",
                        "ayy?x",
                        "a",
                        "ab??e",
                        "dac",
                        "paiu",
                        "mom"
                    ],
                    "output": [
                        "YES",
                        "xabax",
                        "YES",
                        "abcde",
                        "YES",
                        "ayyyx",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": ""
        },
        "E": {
            "name": "E. Triple Operations",
            "statement": "On the board Ivy wrote down all integers from $$$l$$$ to $$$r$$$, inclusive.\nIn an operation, she does the following:\npick two numbers $$$x$$$ and $$$y$$$ on the board, erase them, and in their place write the numbers $$$3x$$$ and $$$\\lfloor \\frac{y}{3} \\rfloor$$$. (Here $$$\\lfloor \\bullet \\rfloor$$$ denotes rounding down to the nearest integer).\nWhat is the minimum number of operations Ivy needs to make all numbers on the board equal $$$0$$$? We have a proof that this is always possible.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe only line of each test case contains two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l < r \\leq 2 \\cdot 10^5$$$).",
            "output_format": "For each test case, output a single integer — the minimum number of operations needed to make all numbers on the board equal $$$0$$$.",
            "examples": [
                {
                    "input": [
                        "4",
                        "1 3",
                        "2 4",
                        "199999 200000",
                        "19 84"
                    ],
                    "output": [
                        "5",
                        "6",
                        "36",
                        "263"
                    ]
                }
            ],
            "notes": "In the first test case, we can perform $$$5$$$ operations as follows: $$$$$$ 1,2,3 \\xrightarrow[x=1,\\,y=2]{} 3,0,3 \\xrightarrow[x=0,\\,y=3]{} 1,0,3 \\xrightarrow[x=0,\\,y=3]{} 1,0,1 \\xrightarrow[x=0,\\,y=1]{} 0,0,1 \\xrightarrow[x=0,\\,y=1]{} 0,0,0 .$$$$$$"
        },
        "F": {
            "name": "F. Expected Median",
            "statement": "Arul has a binary array$$$^{\\text{∗}}$$$ $$$a$$$ of length $$$n$$$.\nHe will take all subsequences$$$^{\\text{†}}$$$ of length $$$k$$$ ($$$k$$$ is odd) of this array and find their median.$$$^{\\text{‡}}$$$\nWhat is the sum of all these values?\nAs this sum can be very large, output it modulo $$$10^9 + 7$$$. In other words, print the remainder of this sum when divided by $$$10^9 + 7$$$.\n$$$^{\\text{∗}}$$$A binary array is an array consisting only of zeros and ones.$$$^{\\text{†}}$$$An array $$$b$$$ is a subsequence of an array $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly, zero or all) elements. Subsequences don't have to be contiguous.$$$^{\\text{‡}}$$$The median of an array of odd length $$$k$$$ is the $$$\\frac{k+1}{2}$$$-th element when sorted.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq k \\leq n \\leq 2 \\cdot 10^5$$$, $$$k$$$ is odd) — the length of the array and the length of the subsequence, respectively.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 1$$$) — the elements of the array.\nIt is guaranteed that sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, print the sum modulo $$$10^9 + 7$$$.",
            "examples": [
                {
                    "input": [
                        "8",
                        "4 3",
                        "1 0 0 1",
                        "5 1",
                        "1 1 1 1 1",
                        "5 5",
                        "0 1 0 1 0",
                        "6 3",
                        "1 0 1 0 1 1",
                        "4 3",
                        "1 0 1 1",
                        "5 3",
                        "1 0 1 1 0",
                        "2 1",
                        "0 0",
                        "34 17",
                        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
                    ],
                    "output": [
                        "2",
                        "5",
                        "0",
                        "16",
                        "4",
                        "7",
                        "0",
                        "333606206"
                    ]
                }
            ],
            "notes": "In the first test case, there are four subsequences of $$$[1,0,0,1]$$$ with length $$$k=3$$$:\nIn the second test case, all subsequences of length $$$1$$$ have median $$$1$$$, so the answer is $$$5$$$."
        },
        "G1": {
            "name": "G1. Ruler (easy version)",
            "statement": "This is the easy version of the problem. The only difference between the two versions is that in this version, you can make at most $$$\\mathbf{10}$$$ queries.\nThis is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read the guide for participants.\nWe have a secret ruler that is missing one number $$$x$$$ ($$$2 \\leq x \\leq 999$$$). When you measure an object of length $$$y$$$, the ruler reports the following values:\nIf $$$y < x$$$, the ruler (correctly) measures the object as having length $$$y$$$.  If $$$y \\geq x$$$, the ruler incorrectly measures the object as having length $$$y+1$$$.\nThe ruler above is missing the number $$$4$$$, so it correctly measures the first segment as length $$$3$$$ but incorrectly measures the second segment as length $$$6$$$ even though it is actually $$$5$$$.\nYou need to find the value of $$$x$$$. To do that, you can make queries of the following form:\n$$$\\texttt{?}~a~b$$$ — in response, we will measure the side lengths of an $$$a \\times b$$$ rectangle with our ruler and multiply the results, reporting the measured area of the rectangle back to you. For example, if $$$x=4$$$ and you query a $$$3 \\times 5$$$ rectangle, we will measure its side lengths as $$$3 \\times 6$$$ and report $$$18$$$ back to you.\nFind the value of $$$x$$$. You can ask at most $$$\\mathbf{10}$$$ queries.",
            "input_format": "Each test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.",
            "output_format": "",
            "examples": [
                {
                    "input": [
                        "2",
                        "",
                        "18",
                        "",
                        "25",
                        "",
                        "",
                        "9999"
                    ],
                    "output": [
                        "? 3 5",
                        "",
                        "? 4 4",
                        "",
                        "! 4",
                        "? 99 100",
                        "",
                        "! 100"
                    ]
                }
            ],
            "notes": "In the first test, the interaction proceeds as follows.\nNote that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction."
        },
        "G2": {
            "name": "G2. Ruler (hard version)",
            "statement": "This is the hard version of the problem. The only difference between the two versions is that in this version, you can make at most $$$\\mathbf{7}$$$ queries.\nThis is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read the guide for participants.\nWe have a secret ruler that is missing one number $$$x$$$ ($$$2 \\leq x \\leq 999$$$). When you measure an object of length $$$y$$$, the ruler reports the following values:\nIf $$$y < x$$$, the ruler (correctly) measures the object as having length $$$y$$$.  If $$$y \\geq x$$$, the ruler incorrectly measures the object as having length $$$y+1$$$.\nThe ruler above is missing the number $$$4$$$, so it correctly measures the first segment as length $$$3$$$ but incorrectly measures the second segment as length $$$6$$$ even though it is actually $$$5$$$.\nYou need to find the value of $$$x$$$. To do that, you can make queries of the following form:\n$$$\\texttt{?}~a~b$$$ — in response, we will measure the side lengths of an $$$a \\times b$$$ rectangle with our ruler and multiply the results, reporting the measured area of the rectangle back to you. For example, if $$$x=4$$$ and you query a $$$3 \\times 5$$$ rectangle, we will measure its side lengths as $$$3 \\times 6$$$ and report $$$18$$$ back to you.\nFind the value of $$$x$$$. You can ask at most $$$\\mathbf{7}$$$ queries.",
            "input_format": "Each test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.",
            "output_format": "",
            "examples": [
                {
                    "input": [
                        "2",
                        "",
                        "18",
                        "",
                        "25",
                        "",
                        "",
                        "9999"
                    ],
                    "output": [
                        "? 3 5",
                        "",
                        "? 4 4",
                        "",
                        "! 4",
                        "? 99 100",
                        "",
                        "! 100"
                    ]
                }
            ],
            "notes": "In the first test, the interaction proceeds as follows.\nNote that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction."
        }
    },
    "1985": {
        "A": {
            "name": "A. Creating Words",
            "statement": "Matthew is given two strings $$$a$$$ and $$$b$$$, both of length $$$3$$$. He thinks it's particularly funny to create two new words by swapping the first character of $$$a$$$ with the first character of $$$b$$$. He wants you to output $$$a$$$ and $$$b$$$ after the swap.\nNote that the new words may not necessarily be different.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 100$$$)  — the number of test cases.\nThe first and only line of each test case contains two space-separated strings, $$$a$$$ and $$$b$$$, both of length $$$3$$$. The strings only contain lowercase Latin letters.",
            "output_format": "For each test case, after the swap, output $$$a$$$ and $$$b$$$, separated by a space.",
            "examples": [
                {
                    "input": [
                        "6",
                        "bit set",
                        "cat dog",
                        "hot dog",
                        "uwu owo",
                        "cat cat",
                        "zzz zzz"
                    ],
                    "output": [
                        "sit bet",
                        "dat cog",
                        "dot hog",
                        "owu uwo",
                        "cat cat",
                        "zzz zzz"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Maximum Multiple Sum",
            "statement": "Given an integer $$$n$$$, find an integer $$$x$$$ such that:\n$$$2 \\leq x \\leq n$$$.  The sum of multiples of $$$x$$$ that are less than or equal to $$$n$$$ is maximized. Formally, $$$x + 2x + 3x + \\dots + kx$$$ where $$$kx \\leq n$$$ is maximized over all possible values of $$$x$$$.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nEach test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 100$$$).",
            "output_format": "For each test case, output an integer, the optimal value of $$$x$$$. It can be shown there is only one unique answer.",
            "examples": [
                {
                    "input": [
                        "2",
                        "3",
                        "15"
                    ],
                    "output": [
                        "3",
                        "2"
                    ]
                }
            ],
            "notes": "For $$$n = 3$$$, the possible values of $$$x$$$ are $$$2$$$ and $$$3$$$. The sum of all multiples of $$$2$$$ less than or equal to $$$n$$$ is just $$$2$$$, and the sum of all multiples of $$$3$$$ less than or equal to $$$n$$$ is $$$3$$$. Therefore, $$$3$$$ is the optimal value of $$$x$$$.\nFor $$$n = 15$$$, the optimal value of $$$x$$$ is $$$2$$$. The sum of all multiples of $$$2$$$ less than or equal to $$$n$$$ is $$$2 + 4 + 6 + 8 + 10 + 12 + 14 = 56$$$, which can be proven to be the maximal over all other possible values of $$$x$$$."
        },
        "C": {
            "name": "C. Good Prefixes",
            "statement": "Alex thinks some array is good if there exists some element that can be represented as the sum of all other elements (the sum of all other elements is $$$0$$$ if there are no other elements). For example, the array $$$[1,6,3,2]$$$ is good since $$$1+3+2=6$$$. Furthermore, the array $$$[0]$$$ is also good. However, the arrays $$$[1,2,3,4]$$$ and $$$[1]$$$ are not good.\nAlex has an array $$$a_1,a_2,\\ldots,a_n$$$. Help him count the number of good non-empty prefixes of the array $$$a$$$. In other words, count the number of integers $$$i$$$ ($$$1 \\le i \\le n$$$) such that the length $$$i$$$ prefix (i.e. $$$a_1,a_2,\\ldots,a_i$$$) is good.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of elements in the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$0 \\le a_i \\le 10^9$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of good non-empty prefixes of the array $$$a$$$.",
            "examples": [
                {
                    "input": [
                        "7",
                        "1",
                        "0",
                        "1",
                        "1",
                        "4",
                        "1 1 2 0",
                        "5",
                        "0 1 2 1 4",
                        "7",
                        "1 1 0 3 5 2 12",
                        "7",
                        "1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 294967296",
                        "10",
                        "0 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 589934592"
                    ],
                    "output": [
                        "1",
                        "0",
                        "3",
                        "3",
                        "4",
                        "1",
                        "2"
                    ]
                }
            ],
            "notes": "In the fourth test case, the array has five prefixes:\nAs you can see, three of them are good, so the answer is $$$3$$$."
        },
        "D": {
            "name": "D. Manhattan Circle",
            "statement": "Given a $$$n$$$ by $$$m$$$ grid consisting of '.' and '#' characters, there exists a whole manhattan circle on the grid. The top left corner of the grid has coordinates $$$(1,1)$$$, and the bottom right corner has coordinates $$$(n, m)$$$.\nPoint ($$$a, b$$$) belongs to the manhattan circle centered at ($$$h, k$$$) if $$$|h - a| + |k - b| < r$$$, where $$$r$$$ is a positive constant.\nOn the grid, the set of points that are part of the manhattan circle is marked as '#'. Find the coordinates of the center of the circle.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 1000$$$)  — the number of test cases.\nThe first line of each test case contains $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\cdot m \\leq 2 \\cdot 10^5$$$) — the height and width of the grid, respectively.\nThe next $$$n$$$ lines contains $$$m$$$ characters '.' or '#'. If the character is '#', then the point is part of the manhattan circle.\nIt is guaranteed the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$, and there is a whole manhattan circle on the grid.",
            "output_format": "For each test case, output the two integers, the coordinates of the center of the circle.",
            "examples": [
                {
                    "input": [
                        "6",
                        "5 5",
                        ".....",
                        ".....",
                        "..#..",
                        ".....",
                        ".....",
                        "5 5",
                        "..#..",
                        ".###.",
                        "#####",
                        ".###.",
                        "..#..",
                        "5 6",
                        "......",
                        "......",
                        ".#....",
                        "###...",
                        ".#....",
                        "1 1",
                        "#",
                        "5 6",
                        "...#..",
                        "..###.",
                        ".#####",
                        "..###.",
                        "...#..",
                        "2 10",
                        "..........",
                        "...#......"
                    ],
                    "output": [
                        "3 3",
                        "3 3",
                        "4 2",
                        "1 1",
                        "3 4",
                        "2 4"
                    ]
                }
            ],
            "notes": ""
        },
        "E": {
            "name": "E. Secret Box",
            "statement": "Ntarsis has a box $$$B$$$ with side lengths $$$x$$$, $$$y$$$, and $$$z$$$. It lies in the 3D coordinate plane, extending from $$$(0,0,0)$$$ to $$$(x,y,z)$$$.\nNtarsis has a secret box $$$S$$$. He wants to choose its dimensions such that all side lengths are positive integers, and the volume of $$$S$$$ is $$$k$$$. He can place $$$S$$$ somewhere within $$$B$$$ such that:\n$$$S$$$ is parallel to all axes.  every corner of $$$S$$$ lies on an integer coordinate.\n$$$S$$$ is magical, so when placed at an integer location inside $$$B$$$, it will not fall to the ground.\nAmong all possible ways to choose the dimensions of $$$S$$$, determine the maximum number of distinct locations he can choose to place his secret box $$$S$$$ inside $$$B$$$. Ntarsis does not rotate $$$S$$$ once its side lengths are selected.",
            "input_format": "The first line consists of an integer $$$t$$$, the number of test cases ($$$1 \\leq t \\leq 2000$$$). The description of the test cases follows.\nThe first and only line of each test case contains four integers $$$x, y, z$$$ and $$$k$$$ ($$$1 \\leq x, y, z \\leq 2000$$$, $$$1 \\leq k \\leq x \\cdot y \\cdot z$$$).\nIt is guaranteed the sum of all $$$x$$$, sum of all $$$y$$$, and sum of all $$$z$$$ do not exceed $$$2000$$$ over all test cases.\nNote that $$$k$$$ may not fit in a standard 32-bit integer data type.",
            "output_format": "For each test case, output the answer as an integer on a new line. If there is no way to select the dimensions of $$$S$$$ so it fits in $$$B$$$, output $$$0$$$.",
            "examples": [
                {
                    "input": [
                        "7",
                        "3 3 3 8",
                        "3 3 3 18",
                        "5 1 1 1",
                        "2 2 2 7",
                        "3 4 2 12",
                        "4 3 1 6",
                        "1800 1800 1800 4913000000"
                    ],
                    "output": [
                        "8",
                        "2",
                        "5",
                        "0",
                        "4",
                        "4",
                        "1030301"
                    ]
                }
            ],
            "notes": "For the first test case, it is optimal to choose $$$S$$$ with side lengths $$$2$$$, $$$2$$$, and $$$2$$$, which has a volume of $$$2 \\cdot 2 \\cdot 2 = 8$$$. It can be shown there are $$$8$$$ ways to put $$$S$$$ inside $$$B$$$.\nThe coordinate with the least $$$x$$$, $$$y$$$, and $$$z$$$ values for each possible arrangement of $$$S$$$ are:\nThe arrangement of $$$S$$$ with a coordinate of $$$(0, 0, 0)$$$ is depicted below:\nFor the second test case, $$$S$$$ with side lengths $$$2$$$, $$$3$$$, and $$$3$$$ are optimal."
        },
        "F": {
            "name": "F. Final Boss",
            "statement": "You are facing the final boss in your favorite video game. The boss enemy has $$$h$$$ health. Your character has $$$n$$$ attacks. The $$$i$$$'th attack deals $$$a_i$$$ damage to the boss but has a cooldown of $$$c_i$$$ turns, meaning the next time you can use this attack is turn $$$x + c_i$$$ if your current turn is $$$x$$$. Each turn, you can use all attacks that are not currently on cooldown, all at once. If all attacks are on cooldown, you do nothing for the turn and skip to the next turn.\nInitially, all attacks are not on cooldown. How many turns will you take to beat the boss? The boss is beaten when its health is $$$0$$$ or less.",
            "input_format": "The first line contains $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$)  – the number of test cases.\nThe first line of each test case contains two integers $$$h$$$ and $$$n$$$ ($$$1 \\leq h, n \\leq 2 \\cdot 10^5$$$) – the health of the boss and the number of attacks you have.\nThe following line of each test case contains $$$n$$$ integers $$$a_1, a_2, ..., a_n$$$ ($$$1 \\leq a_i \\leq 2 \\cdot 10^5$$$) – the damage of your attacks.\nThe following line of each test case contains $$$n$$$ integers $$$c_1, c_2, ..., c_n$$$ ($$$1 \\leq c_i \\leq 2 \\cdot 10^5$$$) – the cooldown of your attacks.\nIt is guaranteed that the sum of $$$h$$$ and $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output an integer, the minimum number of turns required to beat the boss.",
            "examples": [
                {
                    "input": [
                        "8",
                        "3 2",
                        "2 1",
                        "2 1",
                        "5 2",
                        "2 1",
                        "2 1",
                        "50 3",
                        "5 6 7",
                        "5 6 7",
                        "50 3",
                        "2 2 2",
                        "3 3 3",
                        "90000 2",
                        "200000 200000",
                        "1 1",
                        "100000 1",
                        "1",
                        "200000",
                        "6 7",
                        "3 2 3 2 3 1 2",
                        "6 5 9 5 10 7 7",
                        "21 6",
                        "1 1 1 1 1 1",
                        "5 5 8 10 7 6"
                    ],
                    "output": [
                        "1",
                        "3",
                        "15",
                        "25",
                        "1",
                        "19999800001",
                        "1",
                        "21"
                    ]
                }
            ],
            "notes": "For the first test case, you can use attacks $$$1$$$ and $$$2$$$ on the first turn, dealing $$$3$$$ damage in total, and slaying the boss.\nFor the second case, you can beat the boss in $$$3$$$ turns by using the following attacks:\nTurn $$$1$$$: Use attacks $$$1$$$ and $$$2$$$, dealing $$$3$$$ damage to the boss. The boss now has $$$2$$$ health left.\nTurn $$$2$$$: Use attack $$$2$$$, dealing $$$1$$$ damage to the boss. The boss now has $$$1$$$ health left.\nTurn $$$3$$$: Use attack $$$1$$$, dealing $$$2$$$ damage to the boss. The boss now has $$$-1$$$ health left. Since its health is less than or equal to $$$0$$$, you beat the boss.\nFor the sixth test case: remember to use 64-bit integers as the answer can get large."
        },
        "G": {
            "name": "G. D-Function",
            "statement": "Let $$$D(n)$$$ represent the sum of digits of $$$n$$$. For how many integers $$$n$$$ where $$$10^{l} \\leq n < 10^{r}$$$ satisfy $$$D(k \\cdot n) = k \\cdot D(n)$$$? Output the answer modulo $$$10^9+7$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) – the number of test cases.\nEach test case contains three integers $$$l$$$, $$$r$$$, and $$$k$$$ ($$$0 \\leq l < r \\leq 10^9$$$, $$$1 \\leq k \\leq 10^9$$$).",
            "output_format": "For each test case, output an integer, the answer, modulo $$$10^9 + 7$$$.",
            "examples": [
                {
                    "input": [
                        "6",
                        "0 1 4",
                        "0 2 7",
                        "1 2 1",
                        "1 2 3",
                        "582 74663 3",
                        "0 3 1"
                    ],
                    "output": [
                        "2",
                        "3",
                        "90",
                        "12",
                        "974995667",
                        "999"
                    ]
                }
            ],
            "notes": "For the first test case, the only values of $$$n$$$ that satisfy the condition are $$$1$$$ and $$$2$$$.\nFor the second test case, the only values of $$$n$$$ that satisfy the condition are $$$1$$$, $$$10$$$, and $$$11$$$.\nFor the third test case, all values of $$$n$$$ between $$$10$$$ inclusive and $$$100$$$ exclusive satisfy the condition."
        },
        "H1": {
            "name": "H1. Maximize the Largest Component (Easy Version)",
            "statement": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. The only difference between the two versions is the operation.\nAlex has a grid with $$$n$$$ rows and $$$m$$$ columns consisting of '.' and '#' characters. A set of '#' cells forms a connected component if from any cell in this set, it is possible to reach any other cell in this set by only moving to another cell in the set that shares a common side. The size of a connected component is the number of cells in the set.\nIn one operation, Alex selects any row $$$r$$$ ($$$1 \\le r \\le n$$$) or any column $$$c$$$ ($$$1 \\le c \\le m$$$), then sets every cell in row $$$r$$$ or column $$$c$$$ to be '#'. Help Alex find the maximum possible size of the largest connected component of '#' cells that he can achieve after performing the operation at most once.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\cdot m \\le 10^6$$$) — the number of rows and columns of the grid.\nThe next $$$n$$$ lines each contain $$$m$$$ characters. Each character is either '.' or '#'.\nIt is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$10^6$$$.",
            "output_format": "For each test case, output a single integer — the maximum possible size of a connected component of '#' cells that Alex can achieve.",
            "examples": [
                {
                    "input": [
                        "6",
                        "1 1",
                        ".",
                        "4 2",
                        "..",
                        "#.",
                        "#.",
                        ".#",
                        "3 5",
                        ".#.#.",
                        "..#..",
                        ".#.#.",
                        "5 5",
                        "#...#",
                        "....#",
                        "#...#",
                        ".....",
                        "...##",
                        "6 6",
                        ".#..#.",
                        "#..#..",
                        ".#...#",
                        "#.#.#.",
                        ".#.##.",
                        "###..#",
                        "6 8",
                        "..#....#",
                        ".####.#.",
                        "###.#..#",
                        ".##.#.##",
                        ".#.##.##",
                        "#..##.#."
                    ],
                    "output": [
                        "1",
                        "6",
                        "9",
                        "11",
                        "15",
                        "30"
                    ]
                }
            ],
            "notes": "In the second test case, it is optimal for Alex to set all cells in column $$$2$$$ to be '#'. Doing so will lead to the largest connected component of '#' having a size of $$$6$$$.\nIn the third test case, it is optimal for Alex to set all cells in row $$$2$$$ to be '#'. Doing so will lead to the largest connected component of '#' having a size of $$$9$$$.\nIn the fourth test case, it is optimal for Alex to set all cells in row $$$4$$$ to be '#'. Doing so will lead to the largest connected component of '#' having a size of $$$11$$$."
        },
        "H2": {
            "name": "H2. Maximize the Largest Component (Hard Version)",
            "statement": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. The only difference between the two versions is the operation.\nAlex has a grid with $$$n$$$ rows and $$$m$$$ columns consisting of '.' and '#' characters. A set of '#' cells forms a connected component if from any cell in this set, it is possible to reach any other cell in this set by only moving to another cell in the set that shares a common side. The size of a connected component is the number of cells in the set.\nIn one operation, Alex selects any row $$$r$$$ ($$$1 \\le r \\le n$$$) and any column $$$c$$$ ($$$1 \\le c \\le m$$$), then sets every cell in row $$$r$$$ and column $$$c$$$ to be '#'. Help Alex find the maximum possible size of the largest connected component of '#' cells that he can achieve after performing the operation at most once.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\cdot m \\le 10^6$$$) — the number of rows and columns of the grid.\nThe next $$$n$$$ lines each contain $$$m$$$ characters. Each character is either '.' or '#'.\nIt is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$10^6$$$.",
            "output_format": "For each test case, output a single integer — the maximum possible size of a connected component of '#' cells that Alex can achieve.",
            "examples": [
                {
                    "input": [
                        "6",
                        "1 1",
                        ".",
                        "4 2",
                        "..",
                        "#.",
                        "#.",
                        ".#",
                        "3 5",
                        ".#.#.",
                        "..#..",
                        ".#.#.",
                        "5 5",
                        "#...#",
                        "....#",
                        "#...#",
                        ".....",
                        "...##",
                        "6 6",
                        ".#..#.",
                        "#..#..",
                        ".#...#",
                        "#.#.#.",
                        ".#.##.",
                        "###..#",
                        "6 8",
                        "..#....#",
                        ".####.#.",
                        "###.#..#",
                        ".##.#.##",
                        ".#.##.##",
                        "#..##.#."
                    ],
                    "output": [
                        "1",
                        "7",
                        "11",
                        "16",
                        "22",
                        "36"
                    ]
                }
            ],
            "notes": "In the fourth test case, it is optimal for Alex to set all cells in row $$$4$$$ and column $$$2$$$ to be '#'. Doing so will lead to the largest connected component of '#' having a size of $$$16$$$.\nIn the fifth test case, it is optimal for Alex to set all cells in row $$$2$$$ and column $$$4$$$ to be '#'. Doing so will lead to the largest connected component of '#' having a size of $$$22$$$."
        }
    },
    "1971": {
        "A": {
            "name": "A. My First Sorting Problem",
            "statement": "You are given two integers $$$x$$$ and $$$y$$$.\nOutput two integers: the minimum of $$$x$$$ and $$$y$$$, followed by the maximum of $$$x$$$ and $$$y$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe only line of each test case contains two space-separated integers $$$x$$$ and $$$y$$$ ($$$0 \\leq x, y \\leq 9$$$).",
            "output_format": "For each test case, output two integers: the minimum of $$$x$$$ and $$$y$$$, followed by the maximum of $$$x$$$ and $$$y$$$.",
            "examples": [
                {
                    "input": [
                        "10",
                        "1 9",
                        "8 4",
                        "1 4",
                        "3 4",
                        "2 0",
                        "2 4",
                        "6 9",
                        "3 3",
                        "0 0",
                        "9 9"
                    ],
                    "output": [
                        "1 9",
                        "4 8",
                        "1 4",
                        "3 4",
                        "0 2",
                        "2 4",
                        "6 9",
                        "3 3",
                        "0 0",
                        "9 9"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Different String",
            "statement": "You are given a string $$$s$$$ consisting of lowercase English letters.\nRearrange the characters of $$$s$$$ to form a new string $$$r$$$ that is not equal to $$$s$$$, or report that it's impossible.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains a string $$$s$$$ of length at most $$$10$$$ consisting of lowercase English letters.",
            "output_format": "For each test case, if no such string $$$r$$$ exists as described in the statement, output \"NO\" (without quotes).\nOtherwise, output \"YES\" (without quotes). Then, output one line — the string $$$r$$$, consisting of letters of string $$$s$$$.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).\nIf multiple answers are possible, you can output any of them.",
            "examples": [
                {
                    "input": [
                        "8",
                        "codeforces",
                        "aaaaa",
                        "xxxxy",
                        "co",
                        "d",
                        "nutdealer",
                        "mwistht",
                        "hhhhhhhhhh"
                    ],
                    "output": [
                        "YES",
                        "forcodesec",
                        "NO",
                        "YES",
                        "xxyxx",
                        "YES",
                        "oc",
                        "NO",
                        "YES",
                        "undertale",
                        "YES",
                        "thtsiwm",
                        "NO"
                    ]
                }
            ],
            "notes": "In the first test case, another possible answer is $$$\\texttt{forcescode}$$$.\nIn the second test case, all rearrangements of $$$\\texttt{aaaaa}$$$ are equal to $$$\\texttt{aaaaa}$$$."
        },
        "C": {
            "name": "C. Clock and Strings",
            "statement": "There is a clock labeled with the numbers $$$1$$$ through $$$12$$$ in clockwise order, as shown below.\nIn this example, $$$(a,b,c,d)=(2,9,10,6)$$$, and the strings intersect.\nAlice and Bob have four distinct integers $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$ not more than $$$12$$$. Alice ties a red string connecting $$$a$$$ and $$$b$$$, and Bob ties a blue string connecting $$$c$$$ and $$$d$$$. Do the strings intersect? (The strings are straight line segments.)",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 5940$$$) — the number of test cases.\nThe only line of each test case contains four distinct integers $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$ ($$$1 \\leq a, b, c, d \\leq 12$$$).",
            "output_format": "For each test case, output \"YES\" (without quotes) if the strings intersect, and \"NO\" (without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).",
            "examples": [
                {
                    "input": [
                        "15",
                        "2 9 10 6",
                        "3 8 9 1",
                        "1 2 3 4",
                        "5 3 4 12",
                        "1 8 2 10",
                        "3 12 11 8",
                        "9 10 12 1",
                        "12 1 10 2",
                        "3 12 6 9",
                        "1 9 8 4",
                        "6 7 9 12",
                        "7 12 9 6",
                        "10 12 11 1",
                        "3 9 6 12",
                        "1 4 3 5"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "NO",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES",
                        "YES",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement.\nIn the second test case, the strings do not intersect, as shown below."
        },
        "D": {
            "name": "D. Binary Cut",
            "statement": "You are given a binary string$$$^{\\dagger}$$$. Please find the minimum number of pieces you need to cut it into, so that the resulting pieces can be rearranged into a sorted binary string.\nNote that:\neach character must lie in exactly one of the pieces;  the pieces must be contiguous substrings of the original string;  you must use all the pieces in the rearrangement.\n$$$^{\\dagger}$$$ A binary string is a string consisting of characters $$$\\texttt{0}$$$ and $$$\\texttt{1}$$$. A sorted binary string is a binary string such that all characters $$$\\texttt{0}$$$ come before all characters $$$\\texttt{1}$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 500$$$) — the number of test cases.\nThe only line of each test case contains a single string $$$s$$$ ($$$1 \\leq |s| \\leq 500$$$) consisting of characters $$$\\texttt{0}$$$ and $$$\\texttt{1}$$$, where $$$|s|$$$ denotes the length of the string $$$s$$$.",
            "output_format": "For each test case, output a single integer — the minimum number of pieces needed to be able to rearrange the string into a sorted binary string.",
            "examples": [
                {
                    "input": [
                        "6",
                        "11010",
                        "00000000",
                        "1",
                        "10",
                        "0001111",
                        "0110"
                    ],
                    "output": [
                        "3",
                        "1",
                        "1",
                        "2",
                        "1",
                        "2"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. It can be proven that you can't use fewer than $$$3$$$ pieces.\nIn the second and third test cases, the binary string is already sorted, so only $$$1$$$ piece is needed.\nIn the fourth test case, you need to make a single cut between the two characters and rearrange them to make the string $$$\\texttt{01}$$$."
        },
        "E": {
            "name": "E. Find the Car",
            "statement": "Timur is in a car traveling on the number line from point $$$0$$$ to point $$$n$$$. The car starts moving from point $$$0$$$ at minute $$$0$$$.\nThere are $$$k+1$$$ signs on the line at points $$$0, a_1, a_2, \\dots, a_k$$$, and Timur knows that the car will arrive there at minutes $$$0, b_1, b_2, \\dots, b_k$$$, respectively. The sequences $$$a$$$ and $$$b$$$ are strictly increasing with $$$a_k = n$$$.\nBetween any two adjacent signs, the car travels with a constant speed. Timur has $$$q$$$ queries: each query will be an integer $$$d$$$, and Timur wants you to output how many minutes it takes the car to reach point $$$d$$$, rounded down to the nearest integer.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$k$$$, and $$$q$$$, ($$$k \\leq n \\leq 10^9$$$; $$$1 \\leq k, q \\leq 10^5$$$) — the final destination, the number of points Timur knows the time for, and the number of queries respectively.\nThe second line of each test case contains $$$k$$$ integers $$$a_i$$$ ($$$1 \\leq a_i \\leq n$$$; $$$a_i < a_{i+1}$$$ for every $$$1 \\leq i \\leq k-1$$$; $$$a_k = n$$$).\nThe third line of each test case contains $$$k$$$ integers $$$b_i$$$ ($$$1 \\leq b_i \\leq 10^9$$$; $$$b_i < b_{i+1}$$$ for every $$$1 \\leq i \\leq k-1$$$).\nEach of the following $$$q$$$ lines contains a single integer $$$d$$$ ($$$0 \\leq d \\leq n$$$) — the distance that Timur asks the minutes passed for.\nThe sum of $$$k$$$ over all test cases doesn't exceed $$$10^5$$$, and the sum of $$$q$$$ over all test cases doesn't exceed $$$10^5$$$.",
            "output_format": "For each query, output a single integer — the number of minutes passed until the car reaches the point $$$d$$$, rounded down.",
            "examples": [
                {
                    "input": [
                        "4",
                        "10 1 3",
                        "10",
                        "10",
                        "0",
                        "6",
                        "7",
                        "10 2 4",
                        "4 10",
                        "4 7",
                        "6",
                        "4",
                        "2",
                        "7",
                        "1000000000 1 1",
                        "1000000000",
                        "1000000000",
                        "99999999",
                        "6 1 3",
                        "6",
                        "5",
                        "2",
                        "6",
                        "5"
                    ],
                    "output": [
                        "0 6 7 ",
                        "5 4 2 5 ",
                        "99999999 ",
                        "1 5 4"
                    ]
                }
            ],
            "notes": "For the first test case, the car goes from point $$$0$$$ to point $$$10$$$ in $$$10$$$ minutes, so the speed is $$$1$$$ unit per minute and:\nFor the second test case, between points $$$0$$$ and $$$4$$$, the car travels at a speed of $$$1$$$ unit per minute and between $$$4$$$ and $$$10$$$ with a speed of $$$2$$$ units per minute and:\nFor the fourth test case, the car travels with $$$1.2$$$ units per minute, so the answers to the queries are:"
        },
        "F": {
            "name": "F. Circle Perimeter",
            "statement": "Given an integer $$$r$$$, find the number of lattice points that have a Euclidean distance from $$$(0, 0)$$$ greater than or equal to $$$r$$$ but strictly less than $$$r+1$$$.\nA lattice point is a point with integer coordinates. The Euclidean distance from $$$(0, 0)$$$ to the point $$$(x,y)$$$ is $$$\\sqrt{x^2 + y^2}$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains a single integer $$$r$$$ ($$$1 \\leq r \\leq 10^5$$$).\nThe sum of $$$r$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of lattice points that have an Euclidean distance $$$d$$$ from $$$(0, 0)$$$ such that $$$r \\leq d < r+1$$$.",
            "examples": [
                {
                    "input": [
                        "6",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "1984"
                    ],
                    "output": [
                        "8",
                        "16",
                        "20",
                        "24",
                        "40",
                        "12504"
                    ]
                }
            ],
            "notes": "The points for the first three test cases are shown below."
        },
        "G": {
            "name": "G. XOUR",
            "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ nonnegative integers.\nYou can swap the elements at positions $$$i$$$ and $$$j$$$ if $$$a_i~\\mathsf{XOR}~a_j < 4$$$, where $$$\\mathsf{XOR}$$$ is the bitwise XOR operation.\nFind the lexicographically smallest array that can be made with any number of swaps.\nAn array $$$x$$$ is lexicographically smaller than an array $$$y$$$ if in the first position where $$$x$$$ and $$$y$$$ differ, $$$x_i < y_i$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 10^9$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output $$$n$$$ integers — the lexicographically smallest array that can be made with any number of swaps.",
            "examples": [
                {
                    "input": [
                        "4",
                        "4",
                        "1 0 3 2",
                        "5",
                        "2 7 1 5 6",
                        "8",
                        "1 2 1 2 1 2 1 2",
                        "4",
                        "16 4 1 64"
                    ],
                    "output": [
                        "0 1 2 3 ",
                        "1 5 2 6 7 ",
                        "1 1 1 1 2 2 2 2 ",
                        "16 4 1 64"
                    ]
                }
            ],
            "notes": "For the first test case, you can swap any two elements, so we can produce the sorted array.\nFor the second test case, you can swap $$$2$$$ and $$$1$$$ (their $$$\\mathsf{XOR}$$$ is $$$3$$$), $$$7$$$ and $$$5$$$ (their $$$\\mathsf{XOR}$$$ is $$$2$$$), and $$$7$$$ and $$$6$$$ (their $$$\\mathsf{XOR}$$$ is $$$1$$$) to get the lexicographically smallest array."
        },
        "H": {
            "name": "H. ±1",
            "statement": "Bob has a grid with $$$3$$$ rows and $$$n$$$ columns, each of which contains either $$$a_i$$$ or $$$-a_i$$$ for some integer $$$1 \\leq i \\leq n$$$. For example, one possible grid for $$$n=4$$$ is shown below:\n$$$$$$\\begin{bmatrix} a_1 & -a_2 & -a_3 & -a_2 \\\\ -a_4 & a_4 & -a_1 & -a_3 \\\\ a_1 & a_2 & -a_2 & a_4 \\end{bmatrix}$$$$$$\nAlice and Bob play a game as follows:\nBob shows Alice his grid.  Alice gives Bob an array $$$a_1, a_2, \\dots, a_n$$$ of her choosing, whose elements are all $$$\\mathbf{-1}$$$ or $$$\\mathbf{1}$$$.  Bob substitutes these values into his grid to make a grid of $$$-1$$$s and $$$1$$$s.  Bob sorts the elements of each column in non-decreasing order.  Alice wins if all the elements in the middle row are $$$1$$$; otherwise, Bob wins.\nFor example, suppose Alice gives Bob the array $$$[1, -1, -1, 1]$$$ for the grid above. Then the following will happen (colors are added for clarity):\n$$$$$$\\begin{bmatrix} \\color{red}{a_1} & \\color{green}{-a_2} & \\color{blue}{-a_3} & \\color{green}{-a_2} \\\\ -a_4 & a_4 & \\color{red}{-a_1} & \\color{blue}{-a_3} \\\\ \\color{red}{a_1} & \\color{green}{a_2} & \\color{green}{-a_2} & a_4 \\end{bmatrix} \\xrightarrow{[\\color{red}{1},\\color{green}{-1},\\color{blue}{-1},1]} \\begin{bmatrix} \\color{red}{1} & \\color{green}{1} & \\color{blue}{1} & \\color{green}{1} \\\\ -1 & 1 & \\color{red}{-1} & \\color{blue}{1} \\\\ \\color{red}{1} & \\color{green}{-1} & \\color{green}{1} & 1 \\end{bmatrix} \\xrightarrow{\\text{sort each column}} \\begin{bmatrix} -1 & -1 & -1 & 1 \\\\ \\mathbf{1} & \\mathbf{1} & \\mathbf{1} & \\mathbf{1} \\\\ 1 & 1 & 1 & 1 \\\\ \\end{bmatrix}\\,. $$$$$$ Since the middle row is all $$$1$$$, Alice wins.\nGiven Bob's grid, determine whether or not Alice can choose the array $$$a$$$ to win the game.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 500$$$) — the number of columns of Bob's grid.\nThe next three lines each contain $$$n$$$ integers, the $$$i$$$-th of which contains $$$g_{i,1}, g_{i,2}, \\dots, g_{i,n}$$$ ($$$-n \\leq g_{i,j} \\leq n$$$, $$$g_{i,j} \\neq 0$$$), representing Bob's grid.\nIf cell $$$x > 0$$$ is in the input, that cell in Bob's grid should contain $$$a_x$$$; if $$$x < 0$$$ is in the input, that cell in Bob's grid should contain $$$-a_{-x}$$$. See the sample input and notes for a better understanding.",
            "output_format": "For each test case, output \"YES\" (without quotes) if Alice can win, and \"NO\" (without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\", and \"Yes\" will be recognized as a positive response).",
            "examples": [
                {
                    "input": [
                        "4",
                        "4",
                        "1 -2 -3 -2",
                        "-4 4 -1 -3",
                        "1 2 -2 4",
                        "2",
                        "1 2",
                        "-1 -2",
                        "2 -2",
                        "5",
                        "1 2 3 4 5",
                        "-2 3 -4 -5 -1",
                        "3 -5 1 2 2",
                        "6",
                        "1 3 -6 2 5 2",
                        "1 3 -2 -3 -6 -5",
                        "-2 -1 -3 2 3 1"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "The first test case is described in the statement.\nIn the second test case, Bob's grid is as follows:\n$$$$$$\\begin{bmatrix} a_1 & a_2 \\\\ -a_1 & -a_2 \\\\ a_2 & -a_2 \\end{bmatrix}$$$$$$\nFor the last column to have $$$1$$$ in the middle row when sorted, Alice must pick $$$a_2 = -1$$$. However, it is then impossible to choose $$$a_1$$$ such that the first column has $$$1$$$ in the middle when sorted. Thus, Alice cannot win.\nIn the third test case, Alice can pick $$$a = [1,1,1,1,1]$$$."
        }
    },
    "1950": {
        "A": {
            "name": "A. Stair, Peak, or Neither?",
            "statement": "You are given three digits $$$a$$$, $$$b$$$, and $$$c$$$. Determine whether they form a stair, a peak, or neither.\nA stair satisfies the condition $$$a<b<c$$$.  A peak satisfies the condition $$$a<b>c$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains three digits $$$a$$$, $$$b$$$, $$$c$$$ ($$$0 \\leq a$$$, $$$b$$$, $$$c \\leq 9$$$).",
            "output_format": "For each test case, output \"STAIR\" if the digits form a stair, \"PEAK\" if the digits form a peak, and \"NONE\" otherwise (output the strings without quotes).",
            "examples": [
                {
                    "input": [
                        "7",
                        "1 2 3",
                        "3 2 1",
                        "1 5 3",
                        "3 4 1",
                        "0 0 0",
                        "4 1 7",
                        "4 5 7"
                    ],
                    "output": [
                        "STAIR",
                        "NONE",
                        "PEAK",
                        "PEAK",
                        "NONE",
                        "NONE",
                        "STAIR"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Upscaling",
            "statement": "You are given an integer $$$n$$$. Output a $$$2n \\times 2n$$$ checkerboard made of $$$2 \\times 2$$$ squares alternating '$$$\\texttt{#}$$$' and '$$$\\texttt{.}$$$', with the top-left cell being '$$$\\texttt{#}$$$'.\nThe picture above shows the answers for $$$n=1,2,3,4$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 20$$$) — the number of test cases.\nThe only line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 20$$$) — it means you need to output a checkerboard of side length $$$2n$$$.",
            "output_format": "For each test case, output $$$2n$$$ lines, each containing $$$2n$$$ characters without spaces — the checkerboard, as described in the statement. Do not output empty lines between test cases.",
            "examples": [
                {
                    "input": [
                        "4",
                        "1",
                        "2",
                        "3",
                        "4"
                    ],
                    "output": [
                        "##",
                        "##",
                        "##..",
                        "##..",
                        "..##",
                        "..##",
                        "##..##",
                        "##..##",
                        "..##..",
                        "..##..",
                        "##..##",
                        "##..##",
                        "##..##..",
                        "##..##..",
                        "..##..##",
                        "..##..##",
                        "##..##..",
                        "##..##..",
                        "..##..##",
                        "..##..##"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. Clock Conversion",
            "statement": "Given the time in 24-hour format, output the equivalent time in 12-hour format.\n24-hour format divides the day into 24 hours from $$$00$$$ to $$$23$$$, each of which has 60 minutes from $$$00$$$ to $$$59$$$.  12-hour format divides the day into two halves: the first half is $$$\\mathrm{AM}$$$, and the second half is $$$\\mathrm{PM}$$$. In each half, the hours are numbered in the order $$$12, 01, 02, 03, \\dots, 11$$$. Each hour has 60 minutes numbered from $$$00$$$ to $$$59$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1440$$$) — the number of test cases.\nThe only line of each test case contains a string $$$s$$$ of length $$$5$$$ with format hh:mm representing a valid time in the 24-hour format. hh represents the hour from $$$00$$$ to $$$23$$$, and mm represents the minute from $$$00$$$ to $$$59$$$.\nThe input will always be a valid time in 24-hour format.",
            "output_format": "For each test case, output two strings separated by a space (\"hh:mm AM\" or \"hh:mm PM\"), which are the 12-hour equivalent to the time provided in the test case (without quotes).\nYou should output the time exactly as indicated; in particular, you should not remove leading zeroes.",
            "examples": [
                {
                    "input": [
                        "11",
                        "09:41",
                        "18:06",
                        "12:14",
                        "00:59",
                        "00:00",
                        "14:34",
                        "01:01",
                        "19:07",
                        "11:59",
                        "12:00",
                        "21:37"
                    ],
                    "output": [
                        "09:41 AM",
                        "06:06 PM",
                        "12:14 PM",
                        "12:59 AM",
                        "12:00 AM",
                        "02:34 PM",
                        "01:01 AM",
                        "07:07 PM",
                        "11:59 AM",
                        "12:00 PM",
                        "09:37 PM"
                    ]
                }
            ],
            "notes": ""
        },
        "D": {
            "name": "D. Product of Binary Decimals",
            "statement": "Let's call a number a binary decimal if it is a positive integer and all digits in its decimal notation are either $$$0$$$ or $$$1$$$. For example, $$$1\\,010\\,111$$$ is a binary decimal, while $$$10\\,201$$$ and $$$787\\,788$$$ are not.\nGiven a number $$$n$$$, you are asked whether or not it is possible to represent $$$n$$$ as a product of some (not necessarily distinct) binary decimals.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 5 \\cdot 10^4$$$) — the number of test cases.\nThe only line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$).",
            "output_format": "For each test case, output \"YES\" (without quotes) if $$$n$$$ can be represented as a product of binary decimals, and \"NO\" (without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\", and \"Yes\" will be recognized as a positive response).",
            "examples": [
                {
                    "input": [
                        "11",
                        "121",
                        "1",
                        "14641",
                        "12221",
                        "10110",
                        "100000",
                        "99",
                        "112",
                        "2024",
                        "12421",
                        "1001"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "The first five test cases can be represented as a product of binary decimals as follows:"
        },
        "E": {
            "name": "E. Nearly Shortest Repeating Substring",
            "statement": "You are given a string $$$s$$$ of length $$$n$$$ consisting of lowercase Latin characters. Find the length of the shortest string $$$k$$$ such that several (possibly one) copies of $$$k$$$ can be concatenated together to form a string with the same length as $$$s$$$ and, at most, one different character.\nMore formally, find the length of the shortest string $$$k$$$ such that $$$c = \\underbrace{k + \\cdots + k}_{x\\rm\\ \\text{times}}$$$ for some positive integer $$$x$$$, strings $$$s$$$ and $$$c$$$ has the same length and $$$c_i \\neq s_i$$$ for at most one $$$i$$$ (i.e. there exist $$$0$$$ or $$$1$$$ such positions).",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of string $$$s$$$.\nThe second line of each test case contains the string $$$s$$$, consisting of lowercase Latin characters.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, print the length of the shortest string $$$k$$$ satisfying the constraints in the statement.",
            "examples": [
                {
                    "input": [
                        "5",
                        "4",
                        "abaa",
                        "4",
                        "abba",
                        "13",
                        "slavicgslavic",
                        "8",
                        "hshahaha",
                        "20",
                        "stormflamestornflame"
                    ],
                    "output": [
                        "1",
                        "4",
                        "13",
                        "2",
                        "10"
                    ]
                }
            ],
            "notes": "In the first test case, you can select $$$k = \\texttt{a}$$$ and $$$k+k+k+k = \\texttt{aaaa}$$$, which only differs from $$$s$$$ in the second position.\nIn the second test case, you cannot select $$$k$$$ of length one or two. We can have $$$k = \\texttt{abba}$$$, which is equal to $$$s$$$."
        },
        "F": {
            "name": "F. 0, 1, 2, Tree!",
            "statement": "Find the minimum height of a rooted tree$$$^{\\dagger}$$$ with $$$a+b+c$$$ vertices that satisfies the following conditions:\n$$$a$$$ vertices have exactly $$$2$$$ children,  $$$b$$$ vertices have exactly $$$1$$$ child, and  $$$c$$$ vertices have exactly $$$0$$$ children.\nIf no such tree exists, you should report it.\nThe tree above is rooted at the top vertex, and each vertex is labeled with the number of children it has. Here $$$a=2$$$, $$$b=1$$$, $$$c=3$$$, and the height is $$$2$$$.\n$$$^{\\dagger}$$$ A rooted tree is a connected graph without cycles, with a special vertex called the root. In a rooted tree, among any two vertices connected by an edge, one vertex is a parent (the one closer to the root), and the other one is a child.\nThe distance between two vertices in a tree is the number of edges in the shortest path between them. The height of a rooted tree is the maximum distance from a vertex to the root.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe only line of each test case contains three integers $$$a$$$, $$$b$$$, and $$$c$$$ ($$$0 \\leq a, b, c \\leq 10^5$$$; $$$1 \\leq a + b + c$$$).\nThe sum of $$$a + b + c$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
            "output_format": "For each test case, if no such tree exists, output $$$-1$$$. Otherwise, output one integer — the minimum height of a tree satisfying the conditions in the statement.",
            "examples": [
                {
                    "input": [
                        "10",
                        "2 1 3",
                        "0 0 1",
                        "0 1 1",
                        "1 0 2",
                        "1 1 3",
                        "3 1 4",
                        "8 17 9",
                        "24 36 48",
                        "1 0 0",
                        "0 3 1"
                    ],
                    "output": [
                        "2",
                        "0",
                        "1",
                        "1",
                        "-1",
                        "3",
                        "6",
                        "-1",
                        "-1",
                        "3"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. It can be proven that you can't get a height smaller than $$$2$$$.\nIn the second test case, you can form a tree with a single vertex and no edges. It has height $$$0$$$, which is clearly optimal.\nIn the third test case, you can form a tree with two vertices joined by a single edge. It has height $$$1$$$, which is clearly optimal."
        },
        "G": {
            "name": "G. Shuffling Songs",
            "statement": "Vladislav has a playlist consisting of $$$n$$$ songs, numbered from $$$1$$$ to $$$n$$$. Song $$$i$$$ has genre $$$g_i$$$ and writer $$$w_i$$$. He wants to make a playlist in such a way that every pair of adjacent songs either have the same writer or are from the same genre (or both). He calls such a playlist exciting. Both $$$g_i$$$ and $$$w_i$$$ are strings of length no more than $$$10^4$$$.\nIt might not always be possible to make an exciting playlist using all the songs, so the shuffling process occurs in two steps. First, some amount (possibly zero) of the songs are removed, and then the remaining songs in the playlist are rearranged to make it exciting.\nSince Vladislav doesn't like when songs get removed from his playlist, he wants the making playlist to perform as few removals as possible. Help him find the minimum number of removals that need to be performed in order to be able to rearrange the rest of the songs to make the playlist exciting.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 16$$$) — the number of songs in the original playlist.\nThen $$$n$$$ lines follow, the $$$i$$$-th of which contains two strings of lowercase letters $$$g_i$$$ and $$$w_i$$$ ($$$1 \\leq |g_i|, |w_i| \\leq 10^4$$$) — the genre and the writer of the $$$i$$$-th song. Where $$$|g_i|$$$ and $$$|w_i|$$$ are lengths of the strings.\nThe sum of $$$2^n$$$ over all test cases does not exceed $$$2^{16}$$$.\nThe sum of $$$|g_i| + |w_i|$$$ over all test cases does not exceed $$$4 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the minimum number of removals necessary so that the resulting playlist can be made exciting.",
            "examples": [
                {
                    "input": [
                        "4",
                        "1",
                        "pop taylorswift",
                        "4",
                        "electronic themotans",
                        "electronic carlasdreams",
                        "pop themotans",
                        "pop irinarimes",
                        "7",
                        "rap eminem",
                        "rap drdre",
                        "rap kanyewest",
                        "pop taylorswift",
                        "indierock arcticmonkeys",
                        "indierock arcticmonkeys",
                        "punkrock theoffspring",
                        "4",
                        "a b",
                        "c d",
                        "e f",
                        "g h"
                    ],
                    "output": [
                        "0",
                        "0",
                        "4",
                        "3"
                    ]
                }
            ],
            "notes": "In the first test case, the playlist is already exciting.\nIn the second test case, if you have the songs in the order $$$4, 3, 1, 2$$$, it is exciting, so you don't need to remove any songs.\nIn the third test case, you can remove songs $$$4, 5, 6, 7$$$. Then the playlist with songs in the order $$$1, 2, 3$$$ is exciting."
        }
    },
    "1926": {
        "A": {
            "name": "A. Vlad and the Best of Five",
            "statement": "Vladislav has a string of length $$$5$$$, whose characters are each either $$$\\texttt{A}$$$ or $$$\\texttt{B}$$$.\nWhich letter appears most frequently: $$$\\texttt{A}$$$ or $$$\\texttt{B}$$$?",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 32$$$) — the number of test cases.\nThe only line of each test case contains a string of length $$$5$$$ consisting of letters $$$\\texttt{A}$$$ and $$$\\texttt{B}$$$.\nAll $$$t$$$ strings in a test are different (distinct).",
            "output_format": "For each test case, output one letter ($$$\\texttt{A}$$$ or $$$\\texttt{B}$$$) denoting the character that appears most frequently in the string.",
            "examples": [
                {
                    "input": [
                        "8",
                        "ABABB",
                        "ABABA",
                        "BBBAB",
                        "AAAAA",
                        "BBBBB",
                        "BABAA",
                        "AAAAB",
                        "BAAAA"
                    ],
                    "output": [
                        "B",
                        "A",
                        "B",
                        "A",
                        "B",
                        "A",
                        "A",
                        "A"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Vlad and Shapes",
            "statement": "Vladislav has a binary square grid of $$$n \\times n$$$ cells. A triangle or a square is drawn on the grid with symbols $$$\\texttt{1}$$$. As he is too busy being cool, he asks you to tell him which shape is drawn on the grid.\nA triangle is a shape consisting of $$$k$$$ ($$$k>1$$$) consecutive rows, where the $$$i$$$-th row has $$$2 \\cdot i-1$$$ consecutive characters $$$\\texttt{1}$$$, and the central 1s are located in one column. An upside down triangle is also considered a valid triangle (but not rotated by 90 degrees).\nTwo left pictures contain examples of triangles: $$$k=4$$$, $$$k=3$$$. The two right pictures don't contain triangles.\nA square is a shape consisting of $$$k$$$ ($$$k>1$$$) consecutive rows, where the $$$i$$$-th row has $$$k$$$ consecutive characters $$$\\texttt{1}$$$, which are positioned at an equal distance from the left edge of the grid.\nExamples of two squares: $$$k=2$$$, $$$k=4$$$.\nFor the given grid, determine the type of shape that is drawn on it.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 10$$$) — the size of the grid.\nThe next $$$n$$$ lines each contain $$$n$$$ characters $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$.\nThe grid contains exactly one triangle or exactly one square that contains all the $$$\\texttt{1}$$$s in the grid. It is guaranteed that the size of the triangle or square is greater than $$$1$$$ (i.e., the shape cannot consist of exactly one 1).",
            "output_format": "For each test case, output \"SQUARE\" if all the $$$\\texttt{1}$$$s in the grid form a square, and \"TRIANGLE\" otherwise (without quotes).",
            "examples": [
                {
                    "input": [
                        "6",
                        "3",
                        "000",
                        "011",
                        "011",
                        "4",
                        "0000",
                        "0000",
                        "0100",
                        "1110",
                        "2",
                        "11",
                        "11",
                        "5",
                        "00111",
                        "00010",
                        "00000",
                        "00000",
                        "00000",
                        "10",
                        "0000000000",
                        "0000000000",
                        "0000000000",
                        "0000000000",
                        "0000000000",
                        "1111111110",
                        "0111111100",
                        "0011111000",
                        "0001110000",
                        "0000100000",
                        "3",
                        "111",
                        "111",
                        "111"
                    ],
                    "output": [
                        "SQUARE",
                        "TRIANGLE",
                        "SQUARE",
                        "TRIANGLE",
                        "TRIANGLE",
                        "SQUARE"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. Vlad and a Sum of Sum of Digits",
            "statement": "Please note that the time limit for this problem is only 0.5 seconds per test.\nVladislav wrote the integers from $$$1$$$ to $$$n$$$, inclusive, on the board. Then he replaced each integer with the sum of its digits.\nWhat is the sum of the numbers on the board now?\nFor example, if $$$n=12$$$ then initially the numbers on the board are: $$$$$$1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.$$$$$$ Then after the replacement, the numbers become: $$$$$$1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3.$$$$$$ The sum of these numbers is $$$1+2+3+4+5+6+7+8+9+1+2+3=51$$$. Thus, for $$$n=12$$$ the answer is $$$51$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe only line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the largest number Vladislav writes.",
            "output_format": "For each test case, output a single integer — the sum of the numbers at the end of the process.",
            "examples": [
                {
                    "input": [
                        "7",
                        "12",
                        "1",
                        "2",
                        "3",
                        "1434",
                        "2024",
                        "200000"
                    ],
                    "output": [
                        "51",
                        "1",
                        "3",
                        "6",
                        "18465",
                        "28170",
                        "4600002"
                    ]
                }
            ],
            "notes": ""
        },
        "D": {
            "name": "D. Vlad and Division",
            "statement": "Vladislav has $$$n$$$ non-negative integers, and he wants to divide all of them into several groups so that in any group, any pair of numbers does not have matching bit values among bits from $$$1$$$-st to $$$31$$$-st bit (i.e., considering the $$$31$$$ least significant bits of the binary representation).\nFor an integer $$$k$$$, let $$$k_2(i)$$$ denote the $$$i$$$-th bit in its binary representation (from right to left, indexing from 1). For example, if $$$k=43$$$, since $$$43=101011_2$$$, then $$$43_2(1)=1$$$, $$$43_2(2)=1$$$, $$$43_2(3)=0$$$, $$$43_2(4)=1$$$, $$$43_2(5)=0$$$, $$$43_2(6)=1$$$, $$$43_2(7)=0$$$, $$$43_2(8)=0, \\dots, 43_2(31)=0$$$.\nFormally, for any two numbers $$$x$$$ and $$$y$$$ in the same group, the condition $$$x_2(i) \\neq y_2(i)$$$ must hold for all $$$1 \\leq i < 32$$$.\nWhat is the minimum number of groups Vlad needs to achieve his goal? Each number must fall into exactly one group.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the total number of integers.\nThe second line of each test case contains $$$n$$$ given integers $$$a_1, \\ldots, a_n$$$ ($$$0 \\leq a_j < 2^{31}$$$).\nThe sum of $$$n$$$ over all test cases in a test does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer  — the minimum number of groups required to satisfy the condition.",
            "examples": [
                {
                    "input": [
                        "9",
                        "4",
                        "1 4 3 4",
                        "2",
                        "0 2147483647",
                        "5",
                        "476319172 261956880 2136179468 1671164475 1885526767",
                        "3",
                        "1335890506 811593141 1128223362",
                        "4",
                        "688873446 627404104 1520079543 1458610201",
                        "4",
                        "61545621 2085938026 1269342732 1430258575",
                        "4",
                        "0 0 2147483647 2147483647",
                        "3",
                        "0 0 2147483647",
                        "8",
                        "1858058912 289424735 1858058912 2024818580 1858058912 289424735 122665067 289424735"
                    ],
                    "output": [
                        "4",
                        "1",
                        "3",
                        "2",
                        "2",
                        "3",
                        "2",
                        "2",
                        "4"
                    ]
                }
            ],
            "notes": "In the first test case, any two numbers have the same last $$$31$$$ bits, so we need to place each number in its own group.\nIn the second test case, $$$a_1=0000000000000000000000000000000_2$$$, $$$a_2=1111111111111111111111111111111_2$$$ so they can be placed in the same group because $$$a_1(i) \\ne a_2(i)$$$ for each $$$i$$$ between $$$1$$$ and $$$31$$$, inclusive."
        },
        "E": {
            "name": "E. Vlad and an Odd Ordering",
            "statement": "Vladislav has $$$n$$$ cards numbered $$$1, 2, \\dots, n$$$. He wants to lay them down in a row as follows:\nFirst, he lays down all the odd-numbered cards from smallest to largest.  Next, he lays down all cards that are twice an odd number from smallest to largest (i.e. $$$2$$$ multiplied by an odd number).  Next, he lays down all cards that are $$$3$$$ times an odd number from smallest to largest (i.e. $$$3$$$ multiplied by an odd number).  Next, he lays down all cards that are $$$4$$$ times an odd number from smallest to largest (i.e. $$$4$$$ multiplied by an odd number).  And so on, until all cards are laid down.\nWhat is the $$$k$$$-th card he lays down in this process? Once Vladislav puts a card down, he cannot use that card again.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 5 \\cdot 10^4$$$) — the number of test cases.\nThe only line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq k \\leq n \\leq 10^9$$$) — the number of cards Vlad has, and the position of the card you need to output.",
            "output_format": "For each test case, output a single integer — the $$$k$$$-th card Vladislav lays down.",
            "examples": [
                {
                    "input": [
                        "11",
                        "7 1",
                        "7 2",
                        "7 3",
                        "7 4",
                        "7 5",
                        "7 6",
                        "7 7",
                        "1 1",
                        "34 14",
                        "84 19",
                        "1000000000 1000000000"
                    ],
                    "output": [
                        "1",
                        "3",
                        "5",
                        "7",
                        "2",
                        "6",
                        "4",
                        "1",
                        "27",
                        "37",
                        "536870912"
                    ]
                }
            ],
            "notes": "In the first seven test cases, $$$n=7$$$. Vladislav lays down the cards as follows:"
        },
        "F": {
            "name": "F. Vlad and Avoiding X",
            "statement": "Vladislav has a grid of size $$$7 \\times 7$$$, where each cell is colored black or white. In one operation, he can choose any cell and change its color (black $$$\\leftrightarrow$$$ white).\nFind the minimum number of operations required to ensure that there are no black cells with four diagonal neighbors also being black.\nThe left image shows that initially there are two black cells violating the condition. By flipping one cell, the grid will work.",
            "input_format": "The first line of input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 200$$$) — the number of test cases. Then follows the description of the test cases.\nEach test case consists of $$$7$$$ lines, each containing $$$7$$$ characters. Each of these characters is either $$$\\texttt{W}$$$ or $$$\\texttt{B}$$$, denoting a white or black cell, respectively.",
            "output_format": "For each test case, output a single integer — the minimum number of operations required to ensure that there are no black cells with all four diagonal neighbors also being black.",
            "examples": [
                {
                    "input": [
                        "4",
                        "WWWWWWW",
                        "WWWWBBB",
                        "WWWWWBW",
                        "WWBBBBB",
                        "WWWBWWW",
                        "WWBBBWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WBBBBBW",
                        "WBBBBBW",
                        "WBBBBBW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WWWWWWW",
                        "WBBBBBW",
                        "BBBBBBB",
                        "BBBBBBB",
                        "WWWWWWW",
                        "BBBBBBB",
                        "BBBBBBB",
                        "BBBBBBB"
                    ],
                    "output": [
                        "1",
                        "2",
                        "0",
                        "5"
                    ]
                }
            ],
            "notes": "The first test case is illustrated in the statement.\nThe second test case is illustrated below:\nIn the third test case, the grid already satisfies the condition."
        },
        "G": {
            "name": "G. Vlad and Trouble at MIT",
            "statement": "Vladislav has a son who really wanted to go to MIT. The college dormitory at MIT (Moldova Institute of Technology) can be represented as a tree with $$$n$$$ vertices, each vertex being a room with exactly one student. A tree is a connected undirected graph with $$$n$$$ vertices and $$$n-1$$$ edges.\nTonight, there are three types of students:\nstudents who want to party and play music (marked with $$$\\texttt{P}$$$),  students who wish to sleep and enjoy silence (marked with $$$\\texttt{S}$$$), and  students who don't care (marked with $$$\\texttt{C}$$$).\nInitially, all the edges are thin walls which allow music to pass through, so when a partying student puts music on, it will be heard in every room. However, we can place some thick walls on any edges — thick walls don't allow music to pass through them.\nThe university wants to install some thick walls so that every partying student can play music, and no sleepy student can hear it.\nBecause the university lost a lot of money in a naming rights lawsuit, they ask you to find the minimum number of thick walls they will need to use.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 10^5$$$) — the number of vertices in the tree.\nThe second line of each test case contains $$$n-1$$$ integers $$$a_2, \\dots , a_n$$$ ($$$1 \\leq a_i < i$$$) — it means there is an edge between $$$i$$$ and $$$a_i$$$ in the tree.\nThe third line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of characters $$$\\texttt{P}$$$, $$$\\texttt{S}$$$, and $$$\\texttt{C}$$$, denoting that student $$$i$$$ is of type $$$s_i$$$.\nThe sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "For each test case, output a single integer — the minimum number of thick walls needed.",
            "examples": [
                {
                    "input": [
                        "3",
                        "3",
                        "1 1",
                        "CSP",
                        "4",
                        "1 2 2",
                        "PCSS",
                        "4",
                        "1 2 2",
                        "PPSS"
                    ],
                    "output": [
                        "1",
                        "1",
                        "2"
                    ]
                }
            ],
            "notes": "In the first case, we can install one thick wall between rooms $$$1$$$ and $$$2$$$, as shown below. We cannot install $$$0$$$ walls, since then the music from room 3 will reach room 2 where a student wants to sleep, so the answer is $$$1$$$. There are other valid solutions."
        }
    },
    "1915": {
        "A": {
            "name": "A. Odd One Out",
            "statement": "You are given three digits $$$a$$$, $$$b$$$, $$$c$$$. Two of them are equal, but the third one is different from the other two.\nFind the value that occurs exactly once.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 270$$$) — the number of test cases.\nThe only line of each test case contains three digits $$$a$$$, $$$b$$$, $$$c$$$ ($$$0 \\leq a$$$, $$$b$$$, $$$c \\leq 9$$$). Two of the digits are equal, but the third one is different from the other two.",
            "output_format": "For each test case, output the value that occurs exactly once.",
            "examples": [
                {
                    "input": [
                        "10",
                        "1 2 2",
                        "4 3 4",
                        "5 5 6",
                        "7 8 8",
                        "9 0 9",
                        "3 6 3",
                        "2 8 2",
                        "5 7 7",
                        "7 7 5",
                        "5 7 5"
                    ],
                    "output": [
                        "1",
                        "3",
                        "6",
                        "7",
                        "0",
                        "6",
                        "8",
                        "5",
                        "5",
                        "7"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Not Quite Latin Square",
            "statement": "A Latin square is a $$$3 \\times 3$$$ grid made up of the letters $$$\\texttt{A}$$$, $$$\\texttt{B}$$$, and $$$\\texttt{C}$$$ such that:\nin each row, the letters $$$\\texttt{A}$$$, $$$\\texttt{B}$$$, and $$$\\texttt{C}$$$ each appear once, and  in each column, the letters $$$\\texttt{A}$$$, $$$\\texttt{B}$$$, and $$$\\texttt{C}$$$ each appear once.\nFor example, one possible Latin square is shown below. $$$$$$\\begin{bmatrix} \\texttt{A} & \\texttt{B} & \\texttt{C} \\\\ \\texttt{C} & \\texttt{A} & \\texttt{B} \\\\ \\texttt{B} & \\texttt{C} & \\texttt{A} \\\\ \\end{bmatrix}$$$$$$\nYou are given a Latin square, but one of the letters was replaced with a question mark $$$\\texttt{?}$$$. Find the letter that was replaced.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 108$$$) — the number of testcases.\nEach test case contains three lines, each consisting of three characters, representing the Latin square. Each character is one of $$$\\texttt{A}$$$, $$$\\texttt{B}$$$, $$$\\texttt{C}$$$, or $$$\\texttt{?}$$$.\nEach test case is a Latin square with exactly one of the letters replaced with a question mark $$$\\texttt{?}$$$.",
            "output_format": "For each test case, output the letter that was replaced.",
            "examples": [
                {
                    "input": [
                        "3",
                        "ABC",
                        "C?B",
                        "BCA",
                        "BCA",
                        "CA?",
                        "ABC",
                        "?AB",
                        "BCA",
                        "ABC"
                    ],
                    "output": [
                        "A",
                        "B",
                        "C"
                    ]
                }
            ],
            "notes": "The correct Latin squares for the three test cases are shown below:\n$$$$$$\\begin{bmatrix} \\texttt{A} & \\texttt{B} & \\texttt{C} \\\\ \\texttt{C} & \\color{red}{\\texttt{A}} & \\texttt{B} \\\\ \\texttt{B} & \\texttt{C} & \\texttt{A} \\\\ \\end{bmatrix} \\quad \\begin{bmatrix} \\texttt{B} & \\texttt{C} & \\texttt{A} \\\\ \\texttt{C} & \\texttt{A} & \\color{red}{\\texttt{B}} \\\\ \\texttt{A} & \\texttt{B} & \\texttt{C} \\\\ \\end{bmatrix} \\quad \\begin{bmatrix} \\color{red}{\\texttt{C}} & \\texttt{A} & \\texttt{B} \\\\ \\texttt{B} & \\texttt{C} & \\texttt{A} \\\\ \\texttt{A} & \\texttt{B} & \\texttt{C} \\\\ \\end{bmatrix}$$$$$$"
        },
        "C": {
            "name": "C. Can I Square?",
            "statement": "Calin has $$$n$$$ buckets, the $$$i$$$-th of which contains $$$a_i$$$ wooden squares of side length $$$1$$$.\nCan Calin build a square using all the given squares?",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of buckets.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the number of squares in each bucket.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output \"YES\" if Calin can build a square using all of the given $$$1 \\times 1$$$ squares, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "5",
                        "1",
                        "9",
                        "2",
                        "14 2",
                        "7",
                        "1 2 3 4 5 6 7",
                        "6",
                        "1 3 5 7 9 11",
                        "4",
                        "2 2 2 2"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "In the first test case, Calin can build a $$$3 \\times 3$$$ square.\nIn the second test case, Calin can build a $$$4 \\times 4$$$ square.\nIn the third test case, Calin cannot build a square using all the given squares."
        },
        "D": {
            "name": "D. Unnatural Language Processing",
            "statement": "Lura was bored and decided to make a simple language using the five letters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$, $$$\\texttt{d}$$$, $$$\\texttt{e}$$$. There are two types of letters:\nvowels — the letters $$$\\texttt{a}$$$ and $$$\\texttt{e}$$$. They are represented by $$$\\textsf{V}$$$.  consonants — the letters $$$\\texttt{b}$$$, $$$\\texttt{c}$$$, and $$$\\texttt{d}$$$. They are represented by $$$\\textsf{C}$$$.\nThere are two types of\nsyllables\nin the language: $$$\\textsf{CV}$$$ (consonant followed by vowel) or $$$\\textsf{CVC}$$$ (vowel with consonant before and after). For example, $$$\\texttt{ba}$$$, $$$\\texttt{ced}$$$, $$$\\texttt{bab}$$$ are syllables, but $$$\\texttt{aa}$$$, $$$\\texttt{eda}$$$, $$$\\texttt{baba}$$$ are not.\nA word in the language is a sequence of syllables. Lura has written a word in the language, but she doesn't know how to split it into syllables. Help her break the word into syllables.\nFor example, given the word $$$\\texttt{bacedbab}$$$, it would be split into syllables as $$$\\texttt{ba.ced.bab}$$$ (the dot $$$\\texttt{.}$$$ represents a syllable boundary).",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the word.\nThe second line of each test case contains a string consisting of $$$n$$$ lowercase Latin characters  — the word.\nAll words given are valid words in the language; that is, they only use the letters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$, $$$\\texttt{d}$$$, $$$\\texttt{e}$$$, and each word is made up of several syllables.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For test case, output a string denoting the word split into syllables by inserting a dot $$$\\texttt{.}$$$ between every pair of adjacent syllables.\nIf there are multiple possible splittings, output any of them. The input is given in such a way that at least one possible splitting exists.",
            "examples": [
                {
                    "input": [
                        "6",
                        "8",
                        "bacedbab",
                        "4",
                        "baba",
                        "13",
                        "daddecabeddad",
                        "3",
                        "dac",
                        "6",
                        "dacdac",
                        "22",
                        "dababbabababbabbababba"
                    ],
                    "output": [
                        "ba.ced.bab",
                        "ba.ba",
                        "dad.de.ca.bed.dad",
                        "dac",
                        "dac.dac",
                        "da.bab.ba.ba.bab.bab.ba.bab.ba"
                    ]
                }
            ],
            "notes": ""
        },
        "E": {
            "name": "E. Romantic Glasses",
            "statement": "Iulia has $$$n$$$ glasses arranged in a line. The $$$i$$$-th glass has $$$a_i$$$ units of juice in it. Iulia drinks only from odd-numbered glasses, while her date drinks only from even-numbered glasses.\nTo impress her date, Iulia wants to find a contiguous subarray of these glasses such that both Iulia and her date will have the same amount of juice in total if only the glasses in this subarray are considered. Please help her to do that.\nMore formally, find out if there exists two indices $$$l$$$, $$$r$$$ such that $$$1 \\leq l \\leq r \\leq n$$$, and $$$a_l + a_{l + 2} + a_{l + 4} + \\dots + a_{r} = a_{l + 1} + a_{l + 3} + \\dots + a_{r-1}$$$ if $$$l$$$ and $$$r$$$ have the same parity and $$$a_l + a_{l + 2} + a_{l + 4} + \\dots + a_{r - 1} = a_{l + 1} + a_{l + 3} + \\dots + a_{r}$$$ otherwise.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the total number of glasses.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the amount of juice in each glass.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output \"YES\" if there exists a subarray satisfying the condition, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "3",
                        "1 3 2",
                        "6",
                        "1 1 1 1 1 1",
                        "10",
                        "1 6 9 8 55 3 14 2 7 2",
                        "8",
                        "1 2 11 4 1 5 1 2",
                        "6",
                        "2 6 1 5 7 8",
                        "9",
                        "2 5 10 4 4 9 6 7 8"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, Iulia can pick $$$l=1$$$ and $$$r=3$$$. Then she drinks $$$a_1+a_3=1+2=3$$$ units and her date drinks $$$a_2=3$$$ units of juice.\nIn the second test case, Iulia can pick $$$l=2$$$ and $$$r=5$$$. Then she drinks $$$a_3+a_5=1+1=2$$$ units and her date drinks $$$a_2+a_4=1+1=2$$$ units of juice.\nIn the third test case no such contiguous subarray works.\nIn the fourth test case, Iulia can pick $$$l=2$$$ and $$$r=8$$$. Then she drinks $$$a_3+a_5+a_7=11+1+1=13$$$ units and her date drinks $$$a_2+a_4+a_6+a_8=2+4+5+2=13$$$ units of juice."
        },
        "F": {
            "name": "F. Greetings",
            "statement": "There are $$$n$$$ people on the number line; the $$$i$$$-th person is at point $$$a_i$$$ and wants to go to point $$$b_i$$$. For each person, $$$a_i < b_i$$$, and the starting and ending points of all people are distinct. (That is, all of the $$$2n$$$ numbers $$$a_1, a_2, \\dots, a_n, b_1, b_2, \\dots, b_n$$$ are distinct.)\nAll the people will start moving simultaneously at a speed of $$$1$$$ unit per second until they reach their final point $$$b_i$$$. When two people meet at the same point, they will greet each other once. How many greetings will there be?\nNote that a person can still greet other people even if they have reached their final point.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of people.\nThen $$$n$$$ lines follow, the $$$i$$$-th of which contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$-10^9 \\leq a_i < b_i \\leq 10^9$$$) — the starting and ending positions of each person.\nFor each test case, all of the $$$2n$$$ numbers $$$a_1, a_2, \\dots, a_n, b_1, b_2, \\dots, b_n$$$ are distinct.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer denoting the number of greetings that will happen.",
            "examples": [
                {
                    "input": [
                        "5",
                        "2",
                        "2 3",
                        "1 4",
                        "6",
                        "2 6",
                        "3 9",
                        "4 5",
                        "1 8",
                        "7 10",
                        "-2 100",
                        "4",
                        "-10 10",
                        "-5 5",
                        "-12 12",
                        "-13 13",
                        "5",
                        "-4 9",
                        "-2 5",
                        "3 4",
                        "6 7",
                        "8 10",
                        "4",
                        "1 2",
                        "3 4",
                        "5 6",
                        "7 8"
                    ],
                    "output": [
                        "1",
                        "9",
                        "6",
                        "4",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case, the two people will meet at point $$$3$$$ and greet each other."
        },
        "G": {
            "name": "G. Bicycles",
            "statement": "All of Slavic's friends are planning to travel from the place where they live to a party using their bikes. And they all have a bike except Slavic. There are $$$n$$$ cities through which they can travel. They all live in the city $$$1$$$ and want to go to the party located in the city $$$n$$$. The map of cities can be seen as an undirected graph with $$$n$$$ nodes and $$$m$$$ edges. Edge $$$i$$$ connects cities $$$u_i$$$ and $$$v_i$$$ and has a length of $$$w_i$$$.\nSlavic doesn't have a bike, but what he has is money. Every city has exactly one bike for sale. The bike in the $$$i$$$-th city has a slowness factor of $$$s_{i}$$$. Once Slavic buys a bike, he can use it whenever to travel from the city he is currently in to any neighboring city, by taking $$$w_i \\cdot s_j$$$ time, considering he is traversing edge $$$i$$$ using a bike $$$j$$$ he owns.\nSlavic can buy as many bikes as he wants as money isn't a problem for him. Since Slavic hates traveling by bike, he wants to get from his place to the party in the shortest amount of time possible. And, since his informatics skills are quite rusty, he asks you for help.\nWhat's the shortest amount of time required for Slavic to travel from city $$$1$$$ to city $$$n$$$? Slavic can't travel without a bike. It is guaranteed that it is possible for Slavic to travel from city $$$1$$$ to any other city.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains two space-separated integers $$$n$$$ and $$$m$$$ ($$$2 \\leq n \\leq 1000$$$; $$$n - 1 \\leq m \\leq 1000$$$) — the number of cities and the number of roads, respectively.\nThe $$$i$$$-th of the following $$$m$$$ lines each contain three integers $$$u_i$$$, $$$v_i$$$, $$$w_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u_i \\neq v_i$$$; $$$1 \\leq w_i \\leq 10^5$$$), denoting that there is a road between cities $$$u_i$$$ and $$$v_i$$$ of length $$$w_i$$$. The same pair of cities can be connected by more than one road.\nThe next line contains $$$n$$$ integers $$$s_1, \\ldots, s_n$$$ ($$$1 \\leq s_i \\leq 1000$$$) — the slowness factor of each bike.\nThe sum of $$$n$$$ over all test cases does not exceed $$$1000$$$, and the sum of $$$m$$$ over all test cases does not exceed $$$1000$$$.\nAdditional constraint on the input: it is possible to travel from city $$$1$$$ to any other city.",
            "output_format": "For each test case, output a single integer denoting the shortest amount of time Slavic can reach city $$$n$$$ starting from city $$$1$$$.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5 5",
                        "1 2 2",
                        "3 2 1",
                        "2 4 5",
                        "2 5 7",
                        "4 5 1",
                        "5 2 1 3 3",
                        "5 10",
                        "1 2 5",
                        "1 3 5",
                        "1 4 4",
                        "1 5 8",
                        "2 3 6",
                        "2 4 3",
                        "2 5 2",
                        "3 4 1",
                        "3 5 8",
                        "4 5 2",
                        "7 2 8 4 1",
                        "7 10",
                        "3 2 8",
                        "2 1 4",
                        "2 5 7",
                        "2 6 4",
                        "7 1 2",
                        "4 3 5",
                        "6 4 2",
                        "6 7 1",
                        "6 7 4",
                        "4 5 9",
                        "7 6 5 4 3 2 1"
                    ],
                    "output": [
                        "19",
                        "36",
                        "14"
                    ]
                }
            ],
            "notes": ""
        }
    },
    "1873": {
        "A": {
            "name": "A. Short Sort",
            "statement": "There are three cards with letters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$ placed in a row in some order. You can do the following operation at most once:\nPick two cards, and swap them.\nIs it possible that the row becomes $$$\\texttt{abc}$$$ after the operation? Output \"\nYES\n\" if it is possible, and \"\nNO\n\" otherwise.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 6$$$) — the number of test cases.\nThe only line of each test case contains a single string consisting of each of the three characters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, and $$$\\texttt{c}$$$ exactly once, representing the cards.",
            "output_format": "For each test case, output \"YES\" if you can make the row $$$\\texttt{abc}$$$ with at most one operation, or \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "abc",
                        "acb",
                        "bac",
                        "bca",
                        "cab",
                        "cba"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, we don't need to do any operations, since the row is already $$$\\texttt{abc}$$$.\nIn the second test case, we can swap $$$\\texttt{c}$$$ and $$$\\texttt{b}$$$: $$$\\texttt{acb} \\to \\texttt{abc}$$$.\nIn the third test case, we can swap $$$\\texttt{b}$$$ and $$$\\texttt{a}$$$: $$$\\texttt{bac} \\to \\texttt{abc}$$$.\nIn the fourth test case, it is impossible to make $$$\\texttt{abc}$$$ using at most one operation."
        },
        "B": {
            "name": "B. Good Kid",
            "statement": "Slavic is preparing a present for a friend's birthday. He has an array $$$a$$$ of $$$n$$$ digits and the present will be the product of all these digits. Because Slavic is a good kid who wants to make the biggest product possible, he wants to add $$$1$$$ to exactly one of his digits.\nWhat is the maximum product Slavic can make?",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 9$$$) — the number of digits.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 9$$$) — the digits in the array.",
            "output_format": "For each test case, output a single integer — the maximum product Slavic can make, by adding $$$1$$$ to exactly one of his digits.",
            "examples": [
                {
                    "input": [
                        "4",
                        "4",
                        "2 2 1 2",
                        "3",
                        "0 1 2",
                        "5",
                        "4 3 2 3 4",
                        "9",
                        "9 9 9 9 9 9 9 9 9"
                    ],
                    "output": [
                        "16",
                        "2",
                        "432",
                        "430467210"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. Target Practice",
            "statement": "A $$$10 \\times 10$$$ target is made out of five \"rings\" as shown. Each ring has a different point value: the outermost ring — 1 point, the next ring — 2 points, ..., the center ring — 5 points.\nVlad fired several arrows at the target. Help him determine how many points he got.",
            "input_format": "The input consists of multiple test cases. The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nEach test case consists of 10 lines, each containing 10 characters. Each character in the grid is either $$$\\texttt{X}$$$ (representing an arrow) or $$$\\texttt{.}$$$ (representing no arrow).",
            "output_format": "For each test case, output a single integer — the total number of points of the arrows.",
            "examples": [
                {
                    "input": [
                        "4",
                        "X.........",
                        "..........",
                        ".......X..",
                        ".....X....",
                        "......X...",
                        "..........",
                        ".........X",
                        "..X.......",
                        "..........",
                        ".........X",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "....X.....",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "..........",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX",
                        "XXXXXXXXXX"
                    ],
                    "output": [
                        "17",
                        "0",
                        "5",
                        "220"
                    ]
                }
            ],
            "notes": "In the first test case, there are three arrows on the outer ring worth 1 point each, two arrows on the ring worth 3 points each, and two arrows on the ring worth 4 points each. The total score is $$$3 \\times 1 + 2 \\times 3 + 2 \\times 4 = 17$$$.\nIn the second test case, there aren't any arrows, so the score is $$$0$$$."
        },
        "D": {
            "name": "D. 1D Eraser",
            "statement": "You are given a strip of paper $$$s$$$ that is $$$n$$$ cells long. Each cell is either black or white. In an operation you can take any $$$k$$$ consecutive cells and make them all white.\nFind the minimum number of operations needed to remove all black cells.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq k \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the paper and the integer used in the operation.\nThe second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of characters $$$\\texttt{B}$$$ (representing a black cell) or $$$\\texttt{W}$$$ (representing a white cell).\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the minimum number of operations needed to remove all black cells.",
            "examples": [
                {
                    "input": [
                        "8",
                        "6 3",
                        "WBWWWB",
                        "7 3",
                        "WWBWBWW",
                        "5 4",
                        "BWBWB",
                        "5 5",
                        "BBBBB",
                        "8 2",
                        "BWBWBBBB",
                        "10 2",
                        "WBBWBBWBBW",
                        "4 1",
                        "BBBB",
                        "3 2",
                        "WWW"
                    ],
                    "output": [
                        "2",
                        "1",
                        "2",
                        "1",
                        "4",
                        "3",
                        "4",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case you can perform the following operations: $$$$$$\\color{red}{\\texttt{WBW}}\\texttt{WWB} \\to \\texttt{WWW}\\color{red}{\\texttt{WWB}} \\to \\texttt{WWWWWW}$$$$$$\nIn the second test case you can perform the following operations: $$$$$$\\texttt{WW}\\color{red}{\\texttt{BWB}}\\texttt{WW} \\to \\texttt{WWWWWWW}$$$$$$\nIn the third test case you can perform the following operations: $$$$$$\\texttt{B}\\color{red}{\\texttt{WBWB}} \\to \\color{red}{\\texttt{BWWW}}\\texttt{W} \\to \\texttt{WWWWW}$$$$$$"
        },
        "E": {
            "name": "E. Building an Aquarium",
            "statement": "You love fish, that's why you have decided to build an aquarium. You have a piece of coral made of $$$n$$$ columns, the $$$i$$$-th of which is $$$a_i$$$ units tall. Afterwards, you will build a tank around the coral as follows:\nPick an integer $$$h \\geq 1$$$ — the height of the tank. Build walls of height $$$h$$$ on either side of the tank.  Then, fill the tank up with water so that the height of each column is $$$h$$$, unless the coral is taller than $$$h$$$; then no water should be added to this column.\nFor example, with $$$a=[3,1,2,4,6,2,5]$$$ and a height of $$$h=4$$$, you will end up using a total of $$$w=8$$$ units of water, as shown.\nYou can use at most $$$x$$$ units of water to fill up the tank, but you want to build the biggest tank possible. What is the largest value of $$$h$$$ you can select?",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two positive integers $$$n$$$ and $$$x$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$; $$$1 \\leq x \\leq 10^9$$$) — the number of columns of the coral and the maximum amount of water you can use.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the heights of the coral.\nThe sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single positive integer $$$h$$$ ($$$h \\geq 1$$$) — the maximum height the tank can have, so you need at most $$$x$$$ units of water to fill up the tank.\nWe have a proof that under these constraints, such a value of $$$h$$$ always exists.",
            "examples": [
                {
                    "input": [
                        "5",
                        "7 9",
                        "3 1 2 4 6 2 5",
                        "3 10",
                        "1 1 1",
                        "4 1",
                        "1 4 3 4",
                        "6 1984",
                        "2 6 5 9 1 8",
                        "1 1000000000",
                        "1"
                    ],
                    "output": [
                        "4",
                        "4",
                        "2",
                        "335",
                        "1000000001"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. With $$$h=4$$$ we need $$$8$$$ units of water, but if $$$h$$$ is increased to $$$5$$$ we need $$$13$$$ units of water, which is more than $$$x=9$$$. So $$$h=4$$$ is optimal.\nIn the second test case, we can pick $$$h=4$$$ and add $$$3$$$ units to each column, using a total of $$$9$$$ units of water. It can be shown that this is optimal.\nIn the third test case, we can pick $$$h=2$$$ and use all of our water, so it is optimal."
        },
        "F": {
            "name": "F. Money Trees",
            "statement": "Luca is in front of a row of $$$n$$$ trees. The $$$i$$$-th tree has $$$a_i$$$ fruit and height $$$h_i$$$.\nHe wants to choose a contiguous subarray of the array $$$[h_l, h_{l+1}, \\dots, h_r]$$$ such that for each $$$i$$$ ($$$l \\leq i < r$$$), $$$h_i$$$ is divisible$$$^{\\dagger}$$$ by $$$h_{i+1}$$$. He will collect all the fruit from each of the trees in the subarray (that is, he will collect $$$a_l + a_{l+1} + \\dots + a_r$$$ fruits). However, if he collects more than $$$k$$$ fruits in total, he will get caught.\nWhat is the maximum length of a subarray Luca can choose so he doesn't get caught?\n$$$^{\\dagger}$$$ $$$x$$$ is divisible by $$$y$$$ if the ratio $$$\\frac{x}{y}$$$ is an integer.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first of each test case line contains two space-separated integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$; $$$1 \\leq k \\leq 10^9$$$) — the number of trees and the maximum amount of fruits Luca can collect without getting caught.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^4$$$) — the number of fruits in the $$$i$$$-th tree.\nThe third line of each test case contains $$$n$$$ space-separated integers $$$h_i$$$ ($$$1 \\leq h_i \\leq 10^9$$$) — the height of the $$$i$$$-th tree.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case output a single integer, the length of the maximum length contiguous subarray satisfying the conditions, or $$$0$$$ if there is no such subarray.",
            "examples": [
                {
                    "input": [
                        "5",
                        "5 12",
                        "3 2 4 1 8",
                        "4 4 2 4 1",
                        "4 8",
                        "5 4 1 2",
                        "6 2 3 1",
                        "3 12",
                        "7 9 10",
                        "2 2 4",
                        "1 10",
                        "11",
                        "1",
                        "7 10",
                        "2 6 3 1 5 10 6",
                        "72 24 24 12 4 4 2"
                    ],
                    "output": [
                        "3",
                        "2",
                        "1",
                        "0",
                        "3"
                    ]
                }
            ],
            "notes": "In the first test case, Luca can select the subarray with $$$l=1$$$ and $$$r=3$$$.\nIn the second test case, Luca can select the subarray with $$$l=3$$$ and $$$r=4$$$.\nIn the third test case, Luca can select the subarray with $$$l=2$$$ and $$$r=2$$$."
        },
        "G": {
            "name": "G. ABBC or BACB",
            "statement": "You are given a string $$$s$$$ made up of characters $$$\\texttt{A}$$$ and $$$\\texttt{B}$$$. Initially you have no coins. You can perform two types of operations:\nPick a substring$$$^\\dagger$$$ $$$\\texttt{AB}$$$, change it to $$$\\texttt{BC}$$$, and get a coin.  Pick a substring$$$^\\dagger$$$ $$$\\texttt{BA}$$$, change it to $$$\\texttt{CB}$$$, and get a coin.\nWhat is the most number of coins you can obtain?\n$$$^\\dagger$$$ A substring of length $$$2$$$ is a sequence of two adjacent characters of a string.",
            "input_format": "The input consists of multiple test cases. The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains the string $$$s$$$ ($$$1 \\leq |s| \\leq 2 \\cdot 10^5$$$). All characters of $$$s$$$ are either $$$\\texttt{A}$$$ or $$$\\texttt{B}$$$.\nThe sum of the lengths of $$$s$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the maximum number of coins you can obtain.",
            "examples": [
                {
                    "input": [
                        "8",
                        "ABBA",
                        "ABA",
                        "BAABA",
                        "ABB",
                        "AAAAAAB",
                        "BABA",
                        "B",
                        "AAA"
                    ],
                    "output": [
                        "2",
                        "1",
                        "3",
                        "1",
                        "6",
                        "2",
                        "0",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case you can perform the following operations to get $$$2$$$ coins: $$$$$$\\color{red}{\\texttt{AB}}\\texttt{BA} \\to \\texttt{BC}\\color{red}{\\texttt{BA}} \\to \\texttt{BCCB}$$$$$$\nIn the second test case you can perform the following operation to get $$$1$$$ coin: $$$$$$\\color{red}{\\texttt{AB}}\\texttt{A} \\to \\texttt{BCA}$$$$$$\nIn the third test case you can perform the following operations to get $$$3$$$ coins: $$$$$$\\color{red}{\\texttt{BA}}\\texttt{ABA} \\to \\texttt{CBA}\\color{red}{\\texttt{BA}} \\to \\texttt{C}\\color{red}{\\texttt{BA}}\\texttt{CB} \\to \\texttt{CCBCB}$$$$$$"
        },
        "H": {
            "name": "H. Mad City",
            "statement": "Marcel and Valeriu are in the mad city, which is represented by $$$n$$$ buildings with $$$n$$$ two-way roads between them.\nMarcel and Valeriu start at buildings $$$a$$$ and $$$b$$$ respectively. Marcel wants to catch Valeriu, in other words, be in the same building as him or meet on the same road.\nDuring each move, they choose to go to an adjacent building of their current one or stay in the same building. Because Valeriu knows Marcel so well, Valeriu can predict where Marcel will go in the next move. Valeriu can use this information to make his move. They start and end the move at the same time.\nIt is guaranteed that any pair of buildings is connected by some path and there is at most one road between any pair of buildings.\nAssuming both players play optimally, answer if Valeriu has a strategy to indefinitely escape Marcel.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains three space-separated integers $$$n$$$, $$$a$$$, $$$b$$$ ($$$3 \\leq n \\leq 2 \\cdot 10^5$$$; $$$1 \\leq a, b \\leq n$$$) — the number of buildings (which equals the number of roads) and the starting buildings of Marcel and Valeriu.\nThe following $$$n$$$ lines each contain two integers $$$u_i$$$, $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u_i \\neq v_i$$$) — there is a road between buildings $$$u_i$$$ and $$$v_i$$$. There is at most one road between any unordered pair of buildings.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.\nThe roads are given that it is possible to get from any building to any other building going along the roads.",
            "output_format": "For each test case output \"YES\" if Valeriu can escape Marcel forever and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "3 2 1",
                        "2 1",
                        "3 2",
                        "1 3",
                        "4 1 4",
                        "1 4",
                        "1 2",
                        "1 3",
                        "2 3",
                        "4 1 2",
                        "1 2",
                        "2 3",
                        "2 4",
                        "3 4",
                        "7 1 1",
                        "4 1",
                        "2 1",
                        "5 3",
                        "4 6",
                        "4 2",
                        "7 5",
                        "3 4",
                        "8 5 3",
                        "8 3",
                        "5 1",
                        "2 6",
                        "6 8",
                        "1 2",
                        "4 8",
                        "5 7",
                        "6 7",
                        "10 6 1",
                        "1 2",
                        "4 3",
                        "5 8",
                        "7 8",
                        "10 4",
                        "1 9",
                        "2 4",
                        "8 1",
                        "6 2",
                        "3 1"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case the graph looks as follows:\nIn the second test case the graph looks as follows:"
        }
    },
    "1850": {
        "A": {
            "name": "A. To My Critics",
            "statement": "Suneet has three digits $$$a$$$, $$$b$$$, and $$$c$$$.\nSince math isn't his strongest point, he asks you to determine if you can choose any two digits to make a sum greater or equal to $$$10$$$.\nOutput \"YES\" if there is such a pair, and \"NO\" otherwise.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains three digits $$$a$$$, $$$b$$$, $$$c$$$ ($$$0 \\leq a, b, c \\leq 9$$$).",
            "output_format": "For each test case, output \"YES\" if such a pair exists, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "5",
                        "8 1 2",
                        "4 4 5",
                        "9 9 9",
                        "0 0 0",
                        "8 5 3"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case, by choosing the digits $$$8$$$ and $$$2$$$ we can obtain a sum of $$$8 + 2 = 10$$$ which satisfies the condition, thus the output should be \"YES\".\nFor the second test case, any combination of chosen digits won't be at least $$$10$$$, thus the output should be \"NO\" (note that we can not choose the digit on the same position twice).\nFor the third test case, any combination of chosen digits will have a sum equal to $$$18$$$, thus the output should be \"YES\"."
        },
        "B": {
            "name": "B. Ten Words of Wisdom",
            "statement": "In the game show \"Ten Words of Wisdom\", there are $$$n$$$ participants numbered from $$$1$$$ to $$$n$$$, each of whom submits one response. The $$$i$$$-th response is $$$a_i$$$ words long and has quality $$$b_i$$$. No two responses have the same quality, and at least one response has length at most $$$10$$$.\nThe winner of the show is the response which has the highest quality out of all responses that are not longer than $$$10$$$ words. Which response is the winner?",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the number of responses.\nThen $$$n$$$ lines follow, the $$$i$$$-th of which contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\leq a_i, b_i \\leq 50$$$) — the number of words and the quality of the $$$i$$$-th response, respectively.\nAdditional constraints on the input: in each test case, at least one value of $$$i$$$ satisfies $$$a_i \\leq 10$$$, and all values of $$$b_i$$$ are distinct.",
            "output_format": "For each test case, output a single line containing one integer $$$x$$$ ($$$1 \\leq x \\leq n$$$) — the winner of the show, according to the rules given in the statement.\nIt can be shown that, according to the constraints in the statement, exactly one winner exists for each test case.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5",
                        "7 2",
                        "12 5",
                        "9 3",
                        "9 4",
                        "10 1",
                        "3",
                        "1 2",
                        "3 4",
                        "5 6",
                        "1",
                        "1 43"
                    ],
                    "output": [
                        "4",
                        "3",
                        "1"
                    ]
                }
            ],
            "notes": "In the first test case, the responses provided are as follows:\nWe can see that the responses with indices $$$1$$$, $$$3$$$, $$$4$$$, and $$$5$$$ have lengths not exceeding $$$10$$$ words. Out of these responses, the winner is the one with the highest quality.\nComparing the qualities, we find that:\nAmong these responses, Response 4 has the highest quality."
        },
        "C": {
            "name": "C. Word on the Paper",
            "statement": "On an $$$8 \\times 8$$$ grid of dots, a word consisting of lowercase Latin letters is written vertically in one column, from top to bottom. What is it?",
            "input_format": "The input consists of multiple test cases. The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nEach test case consists of $$$8$$$ lines, each containing $$$8$$$ characters. Each character in the grid is either $$$\\texttt{.}$$$ (representing a dot) or a lowercase Latin letter ($$$\\texttt{a}$$$–$$$\\texttt{z}$$$).\nThe word lies entirely in a single column and is continuous from the beginning to the ending (without gaps). See the sample input for better understanding.",
            "output_format": "For each test case, output a single line containing the word made up of lowercase Latin letters ($$$\\texttt{a}$$$–$$$\\texttt{z}$$$) that is written vertically in one column from top to bottom.",
            "examples": [
                {
                    "input": [
                        "5",
                        "........",
                        "........",
                        "........",
                        "........",
                        "...i....",
                        "........",
                        "........",
                        "........",
                        "........",
                        ".l......",
                        ".o......",
                        ".s......",
                        ".t......",
                        "........",
                        "........",
                        "........",
                        "........",
                        "........",
                        "........",
                        "........",
                        "......t.",
                        "......h.",
                        "......e.",
                        "........",
                        "........",
                        "........",
                        "........",
                        "........",
                        ".......g",
                        ".......a",
                        ".......m",
                        ".......e",
                        "a.......",
                        "a.......",
                        "a.......",
                        "a.......",
                        "a.......",
                        "a.......",
                        "a.......",
                        "a......."
                    ],
                    "output": [
                        "i",
                        "lost",
                        "the",
                        "game",
                        "aaaaaaaa"
                    ]
                }
            ],
            "notes": ""
        },
        "D": {
            "name": "D. Balanced Round",
            "statement": "You are the author of a Codeforces round and have prepared $$$n$$$ problems you are going to set, problem $$$i$$$ having difficulty $$$a_i$$$. You will do the following process:\nremove some (possibly zero) problems from the list;  rearrange the remaining problems in any order you wish.\nA round is considered balanced if and only if the absolute difference between the difficulty of any two consecutive problems is at most $$$k$$$ (less or equal than $$$k$$$).\nWhat is the minimum number of problems you have to remove so that an arrangement of problems is balanced?",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains two positive integers $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) and $$$k$$$ ($$$1 \\leq k \\leq 10^9$$$) — the number of problems, and the maximum allowed absolute difference between consecutive problems.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the difficulty of each problem.\nNote that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the minimum number of problems you have to remove so that an arrangement of problems is balanced.",
            "examples": [
                {
                    "input": [
                        "7",
                        "5 1",
                        "1 2 4 5 6",
                        "1 2",
                        "10",
                        "8 3",
                        "17 3 1 20 12 5 17 12",
                        "4 2",
                        "2 4 6 8",
                        "5 3",
                        "2 3 19 10 8",
                        "3 4",
                        "1 10 5",
                        "8 1",
                        "8 3 1 4 5 10 7 3"
                    ],
                    "output": [
                        "2",
                        "0",
                        "5",
                        "0",
                        "3",
                        "1",
                        "4"
                    ]
                }
            ],
            "notes": "For the first test case, we can remove the first $$$2$$$ problems and construct a set using problems with the difficulties $$$[4, 5, 6]$$$, with difficulties between adjacent problems equal to $$$|5 - 4| = 1 \\leq 1$$$ and $$$|6 - 5| = 1 \\leq 1$$$.\nFor the second test case, we can take the single problem and compose a round using the problem with difficulty $$$10$$$."
        },
        "E": {
            "name": "E. Cardboard for Pictures",
            "statement": "Mircea has $$$n$$$ pictures. The $$$i$$$-th picture is a square with a side length of $$$s_i$$$ centimeters.\nHe mounted each picture on a square piece of cardboard so that each picture has a border of $$$w$$$ centimeters of cardboard on all sides. In total, he used $$$c$$$ square centimeters of cardboard. Given the picture sizes and the value $$$c$$$, can you find the value of $$$w$$$?\nA picture of the first test case. Here $$$c = 50 = 5^2 + 4^2 + 3^2$$$, so $$$w=1$$$ is the answer.\nPlease note that the piece of cardboard goes behind each picture, not just the border.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains two positive integers $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) and $$$c$$$ ($$$1 \\leq c \\leq 10^{18}$$$) — the number of paintings, and the amount of used square centimeters of cardboard.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$s_i$$$ ($$$1 \\leq s_i \\leq 10^4$$$) — the sizes of the paintings.\nThe sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.\nAdditional constraint on the input: Such an integer $$$w$$$ exists for each test case.\nPlease note, that some of the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "output_format": "For each test case, output a single integer — the value of $$$w$$$ ($$$w \\geq 1$$$) which was used to use exactly $$$c$$$ squared centimeters of cardboard.",
            "examples": [
                {
                    "input": [
                        "10",
                        "3 50",
                        "3 2 1",
                        "1 100",
                        "6",
                        "5 500",
                        "2 2 2 2 2",
                        "2 365",
                        "3 4",
                        "2 469077255466389",
                        "10000 2023",
                        "10 635472106413848880",
                        "9181 4243 7777 1859 2017 4397 14 9390 2245 7225",
                        "7 176345687772781240",
                        "9202 9407 9229 6257 7743 5738 7966",
                        "14 865563946464579627",
                        "3654 5483 1657 7571 1639 9815 122 9468 3079 2666 5498 4540 7861 5384",
                        "19 977162053008871403",
                        "9169 9520 9209 9013 9300 9843 9933 9454 9960 9167 9964 9701 9251 9404 9462 9277 9661 9164 9161",
                        "18 886531871815571953",
                        "2609 10 5098 9591 949 8485 6385 4586 1064 5412 6564 8460 2245 6552 5089 8353 3803 3764"
                    ],
                    "output": [
                        "1",
                        "2",
                        "4",
                        "5",
                        "7654321",
                        "126040443",
                        "79356352",
                        "124321725",
                        "113385729",
                        "110961227"
                    ]
                }
            ],
            "notes": "The first test case is explained in the statement.\nFor the second test case, the chosen $$$w$$$ was $$$2$$$, thus the only cardboard covers an area of $$$c = (2 \\cdot 2 + 6)^2 = 10^2 = 100$$$ squared centimeters.\nFor the third test case, the chosen $$$w$$$ was $$$4$$$, which obtains the covered area $$$c = (2 \\cdot 4 + 2)^2 \\times 5 = 10^2 \\times 5 = 100 \\times 5 = 500$$$ squared centimeters."
        },
        "F": {
            "name": "F. We Were Both Children",
            "statement": "Mihai and Slavic were looking at a group of $$$n$$$ frogs, numbered from $$$1$$$ to $$$n$$$, all initially located at point $$$0$$$. Frog $$$i$$$ has a hop length of $$$a_i$$$.\nEach second, frog $$$i$$$ hops $$$a_i$$$ units forward. Before any frogs start hopping, Slavic and Mihai can place exactly one trap in a coordinate in order to catch all frogs that will ever pass through the corresponding coordinate.\nHowever, the children can't go far away from their home so they can only place a trap in the first $$$n$$$ points (that is, in a point with a coordinate between $$$1$$$ and $$$n$$$) and the children can't place a trap in point $$$0$$$ since they are scared of frogs.\nCan you help Slavic and Mihai find out what is the maximum number of frogs they can catch using a trap?",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of frogs, which equals the distance Slavic and Mihai can travel to place a trap.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the lengths of the hops of the corresponding frogs.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case output a single integer — the maximum number of frogs Slavic and Mihai can catch using a trap.",
            "examples": [
                {
                    "input": [
                        "7",
                        "5",
                        "1 2 3 4 5",
                        "3",
                        "2 2 2",
                        "6",
                        "3 1 3 4 9 10",
                        "9",
                        "1 3 2 4 2 3 7 8 5",
                        "1",
                        "10",
                        "8",
                        "7 11 6 8 12 4 4 8",
                        "10",
                        "9 11 9 12 1 7 2 5 8 10"
                    ],
                    "output": [
                        "3",
                        "3",
                        "3",
                        "5",
                        "0",
                        "4",
                        "4"
                    ]
                }
            ],
            "notes": "In the first test case, the frogs will hop as follows:\nIn the second test case, Slavic and Mihai can put a trap at coordinate $$$2$$$ and catch all three frogs instantly."
        },
        "G": {
            "name": "G. The Morning Star",
            "statement": "A compass points directly toward the morning star. It can only point in one of eight directions: the four cardinal directions (N, S, E, W) or some combination (NW, NE, SW, SE). Otherwise, it will break.\nThe directions the compass can point.\nThere are $$$n$$$ distinct points with integer coordinates on a plane. How many ways can you put a compass at one point and the morning star at another so that the compass does not break?",
            "input_format": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of points.\nThen $$$n$$$ lines follow, each line containing two integers $$$x_i$$$, $$$y_i$$$ ($$$-10^9 \\leq x_i, y_i \\leq 10^9$$$) — the coordinates of each point, all points have distinct coordinates.\nIt is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of pairs of points that don't break the compass.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3",
                        "0 0",
                        "-1 -1",
                        "1 1",
                        "4",
                        "4 5",
                        "5 7",
                        "6 9",
                        "10 13",
                        "3",
                        "-1000000000 1000000000",
                        "0 0",
                        "1000000000 -1000000000",
                        "5",
                        "0 0",
                        "2 2",
                        "-1 5",
                        "-1 10",
                        "2 11",
                        "3",
                        "0 0",
                        "-1 2",
                        "1 -2"
                    ],
                    "output": [
                        "6",
                        "2",
                        "6",
                        "8",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case, any pair of points won't break the compass:\nIn the second test case, only two pairs of points won't break the compass:"
        },
        "H": {
            "name": "H. The Third Letter",
            "statement": "In order to win his toughest battle, Mircea came up with a great strategy for his army. He has $$$n$$$ soldiers and decided to arrange them in a certain way in camps. Each soldier has to belong to exactly one camp, and there is one camp at each integer point on the $$$x$$$-axis (at points $$$\\cdots, -2, -1, 0, 1, 2, \\cdots$$$).\nThe strategy consists of $$$m$$$ conditions. Condition $$$i$$$ tells that soldier $$$a_i$$$ should belong to a camp that is situated $$$d_i$$$ meters in front of the camp that person $$$b_i$$$ belongs to. (If $$$d_i < 0$$$, then $$$a_i$$$'s camp should be $$$-d_i$$$ meters behind $$$b_i$$$'s camp.)\nNow, Mircea wonders if there exists a partition of soldiers that respects the condition and he asks for your help! Answer \"YES\" if there is a partition of the $$$n$$$ soldiers that satisfies all of the $$$m$$$ conditions and \"NO\" otherwise.\nNote that two different soldiers may be placed in the same camp.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains two positive integers $$$n$$$ and $$$m$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$; $$$1 \\leq m \\leq n$$$) — the number of soldiers, and the number of conditions respectively.\nThen $$$m$$$ lines follow, each of them containing $$$3$$$ integers: $$$a_i$$$, $$$b_i$$$, $$$d_i$$$ ($$$a_i \\neq b_i$$$; $$$1 \\leq a_i, b_i \\leq n$$$; $$$-10^9 \\leq d_i \\leq 10^9$$$) — denoting the conditions explained in the statement. Note that if $$$d_i$$$ is positive, $$$a_i$$$ should be $$$d_i$$$ meters in front of $$$b_i$$$ and if it is negative, $$$a_i$$$ should be $$$-d_i$$$ meters behind $$$b_i$$$.\nNote that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output \"YES\" if there is an arrangement of the $$$n$$$ soldiers that satisfies all of the $$$m$$$ conditions and \"NO\" otherwise.",
            "examples": [
                {
                    "input": [
                        "4",
                        "5 3",
                        "1 2 2",
                        "2 3 4",
                        "4 2 -6",
                        "6 5",
                        "1 2 2",
                        "2 3 4",
                        "4 2 -6",
                        "5 4 4",
                        "3 5 100",
                        "2 2",
                        "1 2 5",
                        "1 2 4",
                        "4 1",
                        "1 2 3"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case, we can partition the soldiers into camps in the following way: soldier:\nFor the second test case, there is no partition that can satisfy all the constraints at the same time.\nFor the third test case, there is no partition that satisfies all the constraints since we get contradictory information about the same pair.\nFor the fourth test case, in order to satisfy the only condition, a possible partition is:"
        }
    },
    "1829": {
        "A": {
            "name": "A. Love Story",
            "statement": "Timur loves codeforces. That's why he has a string $$$s$$$ having length $$$10$$$ made containing only lowercase Latin letters. Timur wants to know how many indices string $$$s$$$ differs from the string \"codeforces\".\nFor example string $$$s =$$$ \"coolforsez\" differs from \"codeforces\" in $$$4$$$ indices, shown in bold.\nHelp Timur by finding the number of indices where string $$$s$$$ differs from \"codeforces\".\nNote that you can't reorder the characters in the string $$$s$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nEach test case is one line and contains the string $$$s$$$, consisting of exactly $$$10$$$ lowercase Latin characters.",
            "output_format": "For each test case, output a single integer — the number of indices where string $$$s$$$ differs.",
            "examples": [
                {
                    "input": [
                        "5",
                        "coolforsez",
                        "cadafurcie",
                        "codeforces",
                        "paiuforces",
                        "forcescode"
                    ],
                    "output": [
                        "4",
                        "5",
                        "0",
                        "4",
                        "9"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Blank Space",
            "statement": "You are given a binary array $$$a$$$ of $$$n$$$ elements, a binary array is an array consisting only of $$$0$$$s and $$$1$$$s.\nA blank space is a segment of consecutive elements consisting of only $$$0$$$s.\nYour task is to find the length of the longest blank space.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 1$$$) — the elements of the array.",
            "output_format": "For each test case, output a single integer — the length of the longest blank space.",
            "examples": [
                {
                    "input": [
                        "5",
                        "5",
                        "1 0 0 1 0",
                        "4",
                        "0 1 1 1",
                        "1",
                        "0",
                        "3",
                        "1 1 1",
                        "9",
                        "1 0 0 0 1 0 0 0 1"
                    ],
                    "output": [
                        "2",
                        "1",
                        "1",
                        "0",
                        "3"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. Mr. Perfectly Fine",
            "statement": "Victor wants to become \"Mr. Perfectly Fine\". For that, he needs to acquire a certain set of skills. More precisely, he has $$$2$$$ skills he needs to acquire.\nVictor has $$$n$$$ books. Reading book $$$i$$$ takes him $$$m_i$$$ minutes and will give him some (possibly none) of the required two skills, represented by a binary string of length $$$2$$$.\nWhat is the minimum amount of time required so that Victor acquires all of the two skills?",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of books available.\nThen $$$n$$$ lines follow. Line $$$i$$$ contains a positive integer $$$m_i$$$ ($$$1 \\leq m_i \\leq 2 \\cdot 10^5$$$) and a binary string of length $$$2$$$, where $$$s_{i1} = 1$$$ if reading book $$$i$$$ acquires Victor skill $$$1$$$, and $$$s_{i1} = 0$$$ otherwise, and $$$s_{i2} = 1$$$ if reading book $$$i$$$ acquires Victor skill $$$2$$$, and $$$s_{i2} = 0$$$ otherwise.\nIt is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer denoting the minimum amount of minutes required for Victor to obtain both needed skills and $$$-1$$$ in case it's impossible to obtain the two skills after reading any amount of books.",
            "examples": [
                {
                    "input": [
                        "6",
                        "4",
                        "2 00",
                        "3 10",
                        "4 01",
                        "4 00",
                        "5",
                        "3 01",
                        "3 01",
                        "5 01",
                        "2 10",
                        "9 10",
                        "1",
                        "5 11",
                        "3",
                        "9 11",
                        "8 01",
                        "7 10",
                        "6",
                        "4 01",
                        "6 01",
                        "7 01",
                        "8 00",
                        "9 01",
                        "1 00",
                        "4",
                        "8 00",
                        "9 10",
                        "9 11",
                        "8 11"
                    ],
                    "output": [
                        "7",
                        "5",
                        "5",
                        "9",
                        "-1",
                        "8"
                    ]
                }
            ],
            "notes": "In the first test case, we can use books $$$2$$$ and $$$3$$$, with a total amount of minutes spent equal to $$$3 + 4 = 7$$$.\nIn the second test case, we can use the books $$$1$$$ and $$$4$$$, with a total amount of minutes spent equal to $$$3 + 2 = 5$$$.\nIn the third test case, we have only one option and that is reading book $$$1$$$ for a total amount of minutes spent equal to $$$5$$$."
        },
        "D": {
            "name": "D. Gold Rush",
            "statement": "Initially you have a single pile with $$$n$$$ gold nuggets. In an operation you can do the following:\nTake any pile and split it into two piles, so that one of the resulting piles has exactly twice as many gold nuggets as the other. (All piles should have an integer number of nuggets.)\nOne possible move is to take a pile of size $$$6$$$ and split it into piles of sizes $$$2$$$ and $$$4$$$, which is valid since $$$4$$$ is twice as large as $$$2$$$.\nCan you make a pile with\nexactly\n$$$m$$$ gold nuggets using zero or more operations?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^7$$$) — the starting and target pile sizes, respectively.",
            "output_format": "For each test case, output \"YES\" if you can make a pile of size exactly $$$m$$$, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "11",
                        "6 4",
                        "9 4",
                        "4 2",
                        "18 27",
                        "27 4",
                        "27 2",
                        "27 10",
                        "1 1",
                        "3 1",
                        "5 1",
                        "746001 2984004"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "YES",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. We can make a pile of size $$$4$$$.\nIn the second test case, we can perform the following operations: $$$\\{\\color{red}{9}\\} \\to \\{\\color{red}{6},3\\} \\to \\{4,2,3\\}$$$. The pile that is split apart is colored red before each operation.\nIn the third test case, we can't perform a single operation.\nIn the fourth test case, we can't end up with a larger pile than we started with."
        },
        "E": {
            "name": "E. The Lakes",
            "statement": "You are given an $$$n \\times m$$$ grid $$$a$$$ of non-negative integers. The value $$$a_{i,j}$$$ represents the depth of water at the $$$i$$$-th row and $$$j$$$-th column.\nA lake is a set of cells such that:\neach cell in the set has $$$a_{i,j} > 0$$$, and  there exists a path between any pair of cells in the lake by going up, down, left, or right a number of times and without stepping on a cell with $$$a_{i,j} = 0$$$.\nThe volume of a lake is the sum of depths of all the cells in the lake.\nFind the largest volume of a lake in the grid.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n, m$$$ ($$$1 \\leq n, m \\leq 1000$$$) — the number of rows and columns of the grid, respectively.\nThen $$$n$$$ lines follow each with $$$m$$$ integers $$$a_{i,j}$$$ ($$$0 \\leq a_{i,j} \\leq 1000$$$) — the depth of the water at each cell.\nIt is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$10^6$$$.",
            "output_format": "For each test case, output a single integer — the largest volume of a lake in the grid.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3 3",
                        "1 2 0",
                        "3 4 0",
                        "0 0 5",
                        "1 1",
                        "0",
                        "3 3",
                        "0 1 1",
                        "1 0 1",
                        "1 1 1",
                        "5 5",
                        "1 1 1 1 1",
                        "1 0 0 0 1",
                        "1 0 5 0 1",
                        "1 0 0 0 1",
                        "1 1 1 1 1",
                        "5 5",
                        "1 1 1 1 1",
                        "1 0 0 0 1",
                        "1 1 4 0 1",
                        "1 0 0 0 1",
                        "1 1 1 1 1"
                    ],
                    "output": [
                        "10",
                        "0",
                        "7",
                        "16",
                        "21"
                    ]
                }
            ],
            "notes": ""
        },
        "F": {
            "name": "F. Forever Winter",
            "statement": "A snowflake graph is generated from two integers $$$x$$$ and $$$y$$$, both greater than $$$1$$$, as follows:\nStart with one central vertex.  Connect $$$x$$$ new vertices to this central vertex.  Connect $$$y$$$ new vertices to each of these $$$x$$$ vertices.\nFor example, below is a snowflake graph for $$$x=5$$$ and $$$y=3$$$.\nThe snowflake graph above has a central vertex $$$15$$$, then $$$x=5$$$ vertices attached to it ($$$3$$$, $$$6$$$, $$$7$$$, $$$8$$$, and $$$20$$$), and then $$$y=3$$$ vertices attached to each of those.\nGiven a snowflake graph, determine the values of $$$x$$$ and $$$y$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\leq n \\leq 200$$$; $$$1 \\leq m \\leq \\min\\left(1000, \\frac{n(n-1)}{2}\\right)$$$) — the number of vertices and edges in the graph, respectively.\nThe next $$$m$$$ lines each contain two integers each $$$u$$$ and $$$v$$$ ($$$1 \\leq u, v \\leq n$$$, $$$u \\neq v$$$) — the numbers of vertices connected by an edge. The graph does not contain multiple edges and self-loops.\nIt is guaranteed that this graph is a snowflake graph for some integers $$$x$$$ and $$$y$$$ both greater than $$$1$$$.",
            "output_format": "For each test case, on a separate line output the values of $$$x$$$ and $$$y$$$, in that order, separated by a space.",
            "examples": [
                {
                    "input": [
                        "3",
                        "21 20",
                        "21 20",
                        "5 20",
                        "13 20",
                        "1 3",
                        "11 3",
                        "10 3",
                        "4 8",
                        "19 8",
                        "14 8",
                        "9 7",
                        "12 7",
                        "17 7",
                        "18 6",
                        "16 6",
                        "2 6",
                        "6 15",
                        "7 15",
                        "8 15",
                        "20 15",
                        "3 15",
                        "7 6",
                        "1 2",
                        "1 3",
                        "2 4",
                        "2 5",
                        "3 6",
                        "3 7",
                        "9 8",
                        "9 3",
                        "3 6",
                        "6 2",
                        "2 1",
                        "5 2",
                        "2 7",
                        "4 3",
                        "3 8"
                    ],
                    "output": [
                        "5 3",
                        "2 2",
                        "2 3"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. Note that the output 3 5 is incorrect, since $$$x$$$ should be output before $$$y$$$."
        },
        "G": {
            "name": "G. Hits Different",
            "statement": "In a carnival game, there is a huge pyramid of cans with $$$2023$$$ rows, numbered in a regular pattern as shown.\nIf can $$$9^2$$$ is hit initially, then all cans colored red in the picture above would fall.\nYou throw a ball at the pyramid, and it hits a single can with number $$$n^2$$$. This causes all cans that are stacked on top of this can to fall (that is, can $$$n^2$$$ falls, then the cans directly above $$$n^2$$$ fall, then the cans directly above those cans, and so on). For example, the picture above shows the cans that would fall if can $$$9^2$$$ is hit.\nWhat is the sum of the numbers on all cans that fall? Recall that $$$n^2 = n \\times n$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe only line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^6$$$) — it means that the can you hit has label $$$n^2$$$.",
            "output_format": "For each test case, output a single integer — the sum of the numbers on all cans that fall.\nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++). For all valid inputs, the answer will always fit into 64-bit integer type.",
            "examples": [
                {
                    "input": [
                        "10",
                        "9",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "10",
                        "1434",
                        "1000000"
                    ],
                    "output": [
                        "156",
                        "1",
                        "5",
                        "10",
                        "21",
                        "39",
                        "46",
                        "146",
                        "63145186",
                        "58116199242129511"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. The sum of the numbers that fall is $$$$$$1^2 + 2^2 + 3^2 + 5^2 + 6^2 + 9^2 = 1 + 4 + 9 + 25 + 36 + 81 = 156.$$$$$$\nIn the second test case, only the can labeled $$$1^2$$$ falls, so the answer is $$$1^2=1$$$.\nIn the third test case, the cans labeled $$$1^2$$$ and $$$2^2$$$ fall, so the answer is $$$1^2+2^2=1+4=5$$$.\nIn the fourth test case, the cans labeled $$$1^2$$$ and $$$3^2$$$ fall, so the answer is $$$1^2+3^2=1+9=10$$$.\nIn the fifth test case, the cans labeled $$$1^2$$$, $$$2^2$$$, and $$$4^2$$$ fall, so the answer is $$$1^2+2^2+4^2=1+4+16=21$$$."
        },
        "H": {
            "name": "H. Don't Blame Me",
            "statement": "Sadly, the problem setter couldn't think of an interesting story, thus he just asks you to solve the following problem.\nGiven an array $$$a$$$ consisting of $$$n$$$ positive integers, count the number of non-empty subsequences for which the bitwise $$$\\mathsf{AND}$$$ of the elements in the subsequence has exactly $$$k$$$ set bits in its binary representation. The answer may be large, so output it modulo $$$10^9+7$$$.\nRecall that the subsequence of an array $$$a$$$ is a sequence that can be obtained from $$$a$$$ by removing some (possibly, zero) elements. For example, $$$[1, 2, 3]$$$, $$$[3]$$$, $$$[1, 3]$$$ are subsequences of $$$[1, 2, 3]$$$, but $$$[3, 2]$$$ and $$$[4, 5, 6]$$$ are not.\nNote that $$$\\mathsf{AND}$$$ represents the bitwise AND operation.",
            "input_format": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows.\nThe first line of each test case consists of two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$, $$$0 \\le k \\le 6$$$) — the length of the array and the number of set bits that the bitwise $$$\\mathsf{AND}$$$ the counted subsequences should have in their binary representation.\nThe second line of each test case consists of $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 63$$$) — the array $$$a$$$.\nIt is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of subsequences that have exactly $$$k$$$ set bits in their bitwise $$$\\mathsf{AND}$$$ value's binary representation. The answer may be large, so output it modulo $$$10^9+7$$$.",
            "examples": [
                {
                    "input": [
                        "6",
                        "5 1",
                        "1 1 1 1 1",
                        "4 0",
                        "0 1 2 3",
                        "5 1",
                        "5 5 7 4 2",
                        "1 2",
                        "3",
                        "12 0",
                        "0 2 0 2 0 2 0 2 0 2 0 2",
                        "10 6",
                        "63 0 63 5 5 63 63 4 12 13"
                    ],
                    "output": [
                        "31",
                        "10",
                        "10",
                        "1",
                        "4032",
                        "15"
                    ]
                }
            ],
            "notes": ""
        }
    },
    "1807": {
        "A": {
            "name": "A. Plus or Minus",
            "statement": "You are given three integers $$$a$$$, $$$b$$$, and $$$c$$$ such that exactly one of these two equations is true:\n$$$a+b=c$$$  $$$a-b=c$$$\nOutput\n+\nif the first equation is true, and\n-\notherwise.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 162$$$) — the number of test cases.\nThe description of each test case consists of three integers $$$a$$$, $$$b$$$, $$$c$$$ ($$$1 \\leq a, b \\leq 9$$$, $$$-8 \\leq c \\leq 18$$$). The additional constraint on the input: it will be generated so that exactly one of the two equations will be true.",
            "output_format": "For each test case, output either + or - on a new line, representing the correct equation.",
            "examples": [
                {
                    "input": [
                        "11",
                        "1 2 3",
                        "3 2 1",
                        "2 9 -7",
                        "3 4 7",
                        "1 1 2",
                        "1 1 0",
                        "3 3 6",
                        "9 9 18",
                        "9 9 0",
                        "1 9 -8",
                        "1 9 10"
                    ],
                    "output": [
                        "+",
                        "-",
                        "-",
                        "+",
                        "+",
                        "-",
                        "+",
                        "+",
                        "-",
                        "-",
                        "+"
                    ]
                }
            ],
            "notes": "In the first test case, $$$1+2=3$$$.\nIn the second test case, $$$3-2=1$$$.\nIn the third test case, $$$2-9=-7$$$. Note that $$$c$$$ can be negative."
        },
        "B": {
            "name": "B. Grab the Candies",
            "statement": "Mihai and Bianca are playing with bags of candies. They have a row $$$a$$$ of $$$n$$$ bags of candies. The $$$i$$$-th bag has $$$a_i$$$ candies. The bags are given to the players in the order from the first bag to the $$$n$$$-th bag.\nIf a bag has an even number of candies, Mihai grabs the bag. Otherwise, Bianca grabs the bag. Once a bag is grabbed, the number of candies in it gets added to the total number of candies of the player that took it.\nMihai wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no candies), Mihai will have strictly more candies than Bianca. Help Mihai find out if such a reordering exists.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the number of bags in the array.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 100$$$) — the number of candies in each bag.",
            "output_format": "For each test case, output \"YES\" (without quotes) if such a reordering exists, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "3",
                        "4",
                        "1 2 3 4",
                        "4",
                        "1 1 1 2",
                        "3",
                        "1 4 3"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": "In the first test case, Mihai can reorder the array as follows: $$$[4, 1, 2, 3]$$$. Then the process proceeds as follows:"
        },
        "C": {
            "name": "C. Find and Replace",
            "statement": "You are given a string $$$s$$$ consisting of lowercase Latin characters. In an operation, you can take a character and replace all occurrences of this character with $$$\\texttt{0}$$$ or replace all occurrences of this character with $$$\\texttt{1}$$$.\nIs it possible to perform some number of moves so that the resulting string is an alternating binary string$$$^{\\dagger}$$$?\nFor example, consider the string $$$\\texttt{abacaba}$$$. You can perform the following moves:\nReplace $$$\\texttt{a}$$$ with $$$\\texttt{0}$$$. Now the string is $$$\\color{red}{\\texttt{0}}\\texttt{b}\\color{red}{\\texttt{0}}\\texttt{c}\\color{red}{\\texttt{0}}\\texttt{b}\\color{red}{\\texttt{0}}$$$.  Replace $$$\\texttt{b}$$$ with $$$\\texttt{1}$$$. Now the string is $$${\\texttt{0}}\\color{red}{\\texttt{1}}{\\texttt{0}}\\texttt{c}{\\texttt{0}}\\color{red}{\\texttt{1}}{\\texttt{0}}$$$.  Replace $$$\\texttt{c}$$$ with $$$\\texttt{1}$$$. Now the string is $$${\\texttt{0}}{\\texttt{1}}{\\texttt{0}}\\color{red}{\\texttt{1}}{\\texttt{0}}{\\texttt{1}}{\\texttt{0}}$$$. This is an alternating binary string.\n$$$^{\\dagger}$$$An alternating binary string is a string of $$$\\texttt{0}$$$s and $$$\\texttt{1}$$$s such that no two adjacent bits are equal. For example, $$$\\texttt{01010101}$$$, $$$\\texttt{101}$$$, $$$\\texttt{1}$$$ are alternating binary strings, but $$$\\texttt{0110}$$$, $$$\\texttt{0a0a0}$$$, $$$\\texttt{10100}$$$ are not.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2000$$$) — the length of the string $$$s$$$.\nThe second line of each test case contains a string consisting of $$$n$$$ lowercase Latin characters — the string $$$s$$$.",
            "output_format": "For each test case, output \"YES\" (without quotes) if you can make the string into an alternating binary string, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "8",
                        "7",
                        "abacaba",
                        "2",
                        "aa",
                        "1",
                        "y",
                        "4",
                        "bkpt",
                        "6",
                        "ninfia",
                        "6",
                        "banana",
                        "10",
                        "codeforces",
                        "8",
                        "testcase"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": "The first test case is explained in the statement.\nIn the second test case, the only possible binary strings you can make are $$$\\texttt{00}$$$ and $$$\\texttt{11}$$$, neither of which are alternating.\nIn the third test case, you can make $$$\\texttt{1}$$$, which is an alternating binary string."
        },
        "D": {
            "name": "D. Odd Queries",
            "statement": "You have an array $$$a_1, a_2, \\dots, a_n$$$. Answer $$$q$$$ queries of the following form:\nIf we change all elements in the range $$$a_l, a_{l+1}, \\dots, a_r$$$ of the array to $$$k$$$, will the sum of the entire array be odd?\nNote that queries are\nindependent\nand do not affect future queries.",
            "input_format": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows.\nThe first line of each test case consists of $$$2$$$ integers $$$n$$$ and $$$q$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le q \\le 2 \\cdot 10^5$$$) — the length of the array and the number of queries.\nThe second line of each test case consists of $$$n$$$ integers $$$a_i$$$ ($$$1 \\le a_i \\le 10^9$$$) — the array $$$a$$$.\nThe next $$$q$$$ lines of each test case consists of $$$3$$$ integers $$$l,r,k$$$ ($$$1 \\le l \\le r \\le n$$$; $$$1 \\le k \\le 10^9$$$) — the queries.\nIt is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$, and the sum of $$$q$$$ doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each query, output \"YES\" if the sum of the entire array becomes odd, and \"NO\" otherwise.\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.",
            "examples": [
                {
                    "input": [
                        "2",
                        "5 5",
                        "2 2 1 3 2",
                        "2 3 3",
                        "2 3 4",
                        "1 5 5",
                        "1 4 9",
                        "2 4 3",
                        "10 5",
                        "1 1 1 1 1 1 1 1 1 1",
                        "3 8 13",
                        "2 5 10",
                        "3 8 10",
                        "1 10 2",
                        "1 9 100"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case:"
        },
        "E": {
            "name": "E. Interview",
            "statement": "This is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read the guide for participants.\nBefore the last stage of the exam, the director conducted an interview. He gave Gon $$$n$$$ piles of stones, the $$$i$$$-th pile having $$$a_i$$$ stones.\nEach stone is identical and weighs $$$1$$$ grams, except for one special stone that is part of an unknown pile and weighs $$$2$$$ grams.\nA picture of the first test case. Pile $$$2$$$ has the special stone. The piles have weights of $$$1,3,3,4,5$$$, respectively.\nGon can only ask the director questions of one kind: he can choose $$$k$$$ piles, and the director will tell him the total weight of the piles chosen. More formally, Gon can choose an integer $$$k$$$ ($$$1 \\leq k \\leq n$$$) and $$$k$$$ unique piles $$$p_1, p_2, \\dots, p_k$$$ ($$$1 \\leq p_i \\leq n$$$), and the director will return the total weight $$$m_{p_1} + m_{p_2} + \\dots + m_{p_k}$$$, where $$$m_i$$$ denotes the weight of pile $$$i$$$.\nGon is tasked with finding the pile that contains the special stone. However, the director is busy. Help Gon find this pile in at most $$$\\mathbf{30}$$$ queries.",
            "input_format": "The input data contains several test cases. The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of piles.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^4$$$) — the number of stones in each pile.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.\nAfter reading the input for each test case, proceed with the interaction as follows.",
            "output_format": "",
            "examples": [
                {
                    "input": [
                        "2",
                        "5",
                        "1 2 3 4 5",
                        "",
                        "11",
                        "",
                        "6",
                        "",
                        "3",
                        "",
                        "7",
                        "1 2 3 5 3 4 2",
                        "",
                        "12",
                        "",
                        "6"
                    ],
                    "output": [
                        "? 4 1 2 3 4",
                        "",
                        "? 2 2 3",
                        "",
                        "? 1 2",
                        "",
                        "! 2",
                        "",
                        "? 4 2 3 5 6",
                        "",
                        "? 2 1 4",
                        "",
                        "! 7"
                    ]
                }
            ],
            "notes": "In the first test case, the stone with weight two is located in pile $$$2$$$, as shown in the picture. We perform the following interaction:\nIn the second test case, the stone with weight two is located on index $$$7$$$. We perform the following interaction:"
        },
        "F": {
            "name": "F. Bouncy Ball",
            "statement": "You are given a room that can be represented by a $$$n \\times m$$$ grid. There is a ball at position $$$(i_1, j_1)$$$ (the intersection of row $$$i_1$$$ and column $$$j_1$$$), and it starts going diagonally in one of the four directions:\nThe ball is going down and right, denoted by $$$\\texttt{DR}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i+1, j+1)$$$.  The ball is going down and left, denoted by $$$\\texttt{DL}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i+1, j-1)$$$.  The ball is going up and right, denoted by $$$\\texttt{UR}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i-1, j+1)$$$.  The ball is going up and left, denoted by $$$\\texttt{UL}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i-1, j-1)$$$.\nAfter each step, the ball maintains its direction unless it hits a wall (that is, the direction takes it out of the room's bounds in the next step). In this case, the ball's direction gets flipped along the axis of the wall; if the ball hits a corner, both directions get flipped. Any instance of this is called a bounce. The ball never stops moving.\nIn the above example, the ball starts at $$$(1, 7)$$$ and goes $$$\\texttt{DL}$$$ until it reaches the bottom wall, then it bounces and continues in the direction $$$\\texttt{UL}$$$. After reaching the left wall, the ball bounces and continues to go in the direction $$$\\texttt{UR}$$$. When the ball reaches the upper wall, it bounces and continues in the direction $$$\\texttt{DR}$$$. After reaching the bottom-right corner, it bounces once and continues in direction $$$\\texttt{UL}$$$, and so on.\nYour task is to find how many bounces the ball will go through until it reaches cell $$$(i_2, j_2)$$$ in the room, or report that it never reaches cell $$$(i_2, j_2)$$$ by printing $$$-1$$$.\nNote that the ball first goes in a cell and only after that bounces if it needs to.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains six integers and a string $$$n, m, i_1, j_1, i_2, j_2, d$$$ ($$$2 \\leq n, m \\leq 25000$$$; $$$1 \\leq i_1, i_2 \\leq n$$$; $$$1 \\leq j_1, j_2 \\leq m$$$; $$$d \\in\\{ \\texttt{DR}, \\texttt{DL}, \\texttt{UR}, \\texttt{UL}\\}$$$) — the dimensions of the grid, the starting coordinates of the ball, the coordinates of the final cell and the starting direction of the ball.\nIt is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$5 \\cdot 10^4$$$.",
            "output_format": "For each test case, output a single integer — the number of bounces the ball does until it reaches cell $$$(i_2, j_2)$$$ for the first time, or $$$-1$$$ if the ball never reaches the final cell.",
            "examples": [
                {
                    "input": [
                        "6",
                        "5 7 1 7 2 4 DL",
                        "5 7 1 7 3 2 DL",
                        "3 3 1 3 2 2 UR",
                        "2 4 2 1 2 2 DR",
                        "4 3 1 1 1 3 UL",
                        "6 4 1 2 3 4 DR"
                    ],
                    "output": [
                        "3",
                        "-1",
                        "1",
                        "-1",
                        "4",
                        "0"
                    ]
                }
            ],
            "notes": ""
        },
        "G1": {
            "name": "G1. Subsequence Addition (Easy Version)",
            "statement": "The only difference between the two versions is that in this version, the constraints are lower.\nInitially, array $$$a$$$ contains just the number $$$1$$$. You can perform several operations in order to change the array. In an operation, you can select some subsequence$$$^{\\dagger}$$$ of $$$a$$$ and add into $$$a$$$ an element equal to the sum of all elements of the subsequence.\nYou are given a final array $$$c$$$. Check if $$$c$$$ can be obtained from the initial array $$$a$$$ by performing some number (possibly 0) of operations on the initial array.\n$$$^{\\dagger}$$$ A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly zero, but not all) elements. In other words, select $$$k$$$ ($$$1 \\leq k \\leq |a|$$$) distinct indices $$$i_1, i_2, \\dots, i_k$$$ and insert anywhere into $$$a$$$ a new element with the value equal to $$$a_{i_1} + a_{i_2} + \\dots + a_{i_k}$$$.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 5000$$$)  — the number of elements the final array $$$c$$$ should have.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$c_i$$$ ($$$1 \\leq c_i \\leq 5000$$$)  — the elements of the final array $$$c$$$ that should be obtained from the initial array $$$a$$$.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.",
            "output_format": "For each test case, output \"YES\" (without quotes) if such a sequence of operations exists, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "1",
                        "1",
                        "1",
                        "2",
                        "5",
                        "5 1 3 2 1",
                        "5",
                        "7 1 5 2 1",
                        "3",
                        "1 1 1",
                        "5",
                        "1 1 4 2 1"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case, the initial array $$$a$$$ is already equal to $$$[1]$$$, so the answer is \"YES\".\nFor the second test case, performing any amount of operations will change $$$a$$$ to an array of size at least two which doesn't only have the element $$$2$$$, thus obtaining the array $$$[2]$$$ is impossible and the answer is \"NO\".\nFor the third test case, we can perform the following operations in order to obtain the final given array $$$c$$$:"
        },
        "G2": {
            "name": "G2. Subsequence Addition (Hard Version)",
            "statement": "The only difference between the two versions is that in this version, the constraints are higher.\nInitially, array $$$a$$$ contains just the number $$$1$$$. You can perform several operations in order to change the array. In an operation, you can select some subsequence$$$^{\\dagger}$$$ of $$$a$$$ and add into $$$a$$$ an element equal to the sum of all elements of the subsequence.\nYou are given a final array $$$c$$$. Check if $$$c$$$ can be obtained from the initial array $$$a$$$ by performing some number (possibly 0) of operations on the initial array.\n$$$^{\\dagger}$$$ A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly zero, but not all) elements. In other words, select $$$k$$$ ($$$1 \\leq k \\leq |a|$$$) distinct indices $$$i_1, i_2, \\dots, i_k$$$ and insert anywhere into $$$a$$$ a new element with the value equal to $$$a_{i_1} + a_{i_2} + \\dots + a_{i_k}$$$.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)  — the number of elements the final array $$$c$$$ should have.\nThe second line of each test case contains $$$n$$$ space-separated integers $$$c_i$$$ ($$$1 \\leq c_i \\leq 2 \\cdot 10^5$$$)  — the elements of the final array $$$c$$$ that should be obtained from the initial array $$$a$$$.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output \"YES\" (without quotes) if such a sequence of operations exists, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "1",
                        "1",
                        "1",
                        "2",
                        "5",
                        "5 1 3 2 1",
                        "5",
                        "7 1 5 2 1",
                        "3",
                        "1 1 1",
                        "5",
                        "1 1 4 2 1"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case, the initial array $$$a$$$ is already equal to $$$[1]$$$, so the answer is \"YES\".\nFor the second test case, performing any amount of operations will change $$$a$$$ to an array of size at least two which doesn't only have the element $$$2$$$, thus obtaining the array $$$[2]$$$ is impossible and the answer is \"NO\".\nFor the third test case, we can perform the following operations in order to obtain the final given array $$$c$$$:"
        }
    },
    "1791": {
        "A": {
            "name": "A. Codeforces Checking",
            "statement": "Given a lowercase Latin character (letter), check if it appears in the string $$$\\texttt{codeforces}$$$.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 26$$$) — the number of test cases.\nThe only line of each test case contains a character $$$c$$$ — a single lowercase Latin character (letter).",
            "output_format": "For each test case, output \"YES\" (without quotes) if $$$c$$$ satisfies the condition, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "10",
                        "a",
                        "b",
                        "c",
                        "d",
                        "e",
                        "f",
                        "g",
                        "h",
                        "i",
                        "j"
                    ],
                    "output": [
                        "NO",
                        "NO",
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Following Directions",
            "statement": "Alperen is standing at the point $$$(0,0)$$$. He is given a string $$$s$$$ of length $$$n$$$ and performs $$$n$$$ moves. The $$$i$$$-th move is as follows:\nif $$$s_i = \\texttt{L}$$$, then move one unit left;  if $$$s_i = \\texttt{R}$$$, then move one unit right;  if $$$s_i = \\texttt{U}$$$, then move one unit up;  if $$$s_i = \\texttt{D}$$$, then move one unit down.\nIf Alperen starts at the center point, he can make the four moves shown.\nThere is a candy at $$$(1,1)$$$ (that is, one unit above and one unit to the right of Alperen's starting point). You need to determine if Alperen ever passes the candy.\nAlperen's path in the first test case.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of testcases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the string.\nThe second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of characters $$$\\texttt{L}$$$, $$$\\texttt{R}$$$, $$$\\texttt{D}$$$, and $$$\\texttt{U}$$$, denoting the moves Alperen makes.",
            "output_format": "For each test case, output \"YES\" (without quotes) if Alperen passes the candy, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "7",
                        "7",
                        "UUURDDL",
                        "2",
                        "UR",
                        "8",
                        "RRRUUDDD",
                        "3",
                        "LLL",
                        "4",
                        "DUUR",
                        "5",
                        "RUDLL",
                        "11",
                        "LLLLDDRUDRD"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "YES",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "In the first test case, Alperen follows the path $$$$$$(0,0) \\overset{\\texttt{U}}{\\to} (0,1) \\overset{\\texttt{U}}{\\to} (0,2) \\overset{\\texttt{U}}{\\to} (0,3) \\overset{\\texttt{R}}{\\to} (1,3) \\overset{\\texttt{D}}{\\to} (1,2) \\overset{\\texttt{D}}{\\to} \\color{green}{\\mathbf{(1,1)}} \\overset{\\texttt{L}}{\\to} (0,1).$$$$$$ Note that Alperen doesn't need to end at the candy's location of $$$(1,1)$$$, he just needs to pass it at some point.\nIn the second test case, Alperen follows the path $$$$$$(0,0) \\overset{\\texttt{U}}{\\to} (0,1) \\overset{\\texttt{R}}{\\to} \\color{green}{\\mathbf{(1,1)}}.$$$$$$\nIn the third test case, Alperen follows the path $$$$$$(0,0) \\overset{\\texttt{R}}{\\to} (1,0) \\overset{\\texttt{R}}{\\to} (2,0) \\overset{\\texttt{R}}{\\to} (3,0) \\overset{\\texttt{U}}{\\to} (3,1) \\overset{\\texttt{U}}{\\to} (3,2) \\overset{\\texttt{D}}{\\to} (3,1) \\overset{\\texttt{D}}{\\to} (3,0) \\overset{\\texttt{D}}{\\to} (3,-1).$$$$$$\nIn the fourth test case, Alperen follows the path $$$$$$(0,0) \\overset{\\texttt{L}}{\\to} (-1,0) \\overset{\\texttt{L}}{\\to} (-2,0) \\overset{\\texttt{L}}{\\to} (-3,0).$$$$$$"
        },
        "C": {
            "name": "C. Prepend and Append",
            "statement": "Timur initially had a binary string$$$^{\\dagger}$$$ $$$s$$$ (possibly of length $$$0$$$). He performed the following operation several (possibly zero) times:\nAdd $$$\\texttt{0}$$$ to one end of the string and $$$\\texttt{1}$$$ to the other end of the string. For example, starting from the string $$$\\texttt{1011}$$$, you can obtain either $$$\\color{red}{\\texttt{0}}\\texttt{1011}\\color{red}{\\texttt{1}}$$$ or $$$\\color{red}{\\texttt{1}}\\texttt{1011}\\color{red}{\\texttt{0}}$$$.\nYou are given Timur's final string. What is the length of the\nshortest\npossible string he could have started with?\n$$$^{\\dagger}$$$ A binary string is a string (possibly the empty string) whose characters are either $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of testcases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2000$$$) — the length of Timur's final string.\nThe second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of characters $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$, denoting the final string.",
            "output_format": "For each test case, output a single nonnegative integer — the shortest possible length of Timur's original string. Note that Timur's original string could have been empty, in which case you should output $$$0$$$.",
            "examples": [
                {
                    "input": [
                        "9",
                        "3",
                        "100",
                        "4",
                        "0111",
                        "5",
                        "10101",
                        "6",
                        "101010",
                        "7",
                        "1010110",
                        "1",
                        "1",
                        "2",
                        "10",
                        "2",
                        "11",
                        "10",
                        "1011011010"
                    ],
                    "output": [
                        "1",
                        "2",
                        "5",
                        "0",
                        "3",
                        "1",
                        "0",
                        "2",
                        "4"
                    ]
                }
            ],
            "notes": "In the first test case, the shortest possible string Timur started with is $$$\\texttt{0}$$$, and he performed the following operation: $$$\\texttt{0} \\to \\color{red}{\\texttt{1}}\\texttt{0}\\color{red}{\\texttt{0}}$$$.\nIn the second test case, the shortest possible string Timur started with is $$$\\texttt{11}$$$, and he performed the following operation: $$$\\texttt{11} \\to \\color{red}{\\texttt{0}}\\texttt{11}\\color{red}{\\texttt{1}}$$$.\nIn the third test case, the shortest possible string Timur started with is $$$\\texttt{10101}$$$, and he didn't perform any operations.\nIn the fourth test case, the shortest possible string Timur started with is the empty string (which we denote by $$$\\varepsilon$$$), and he performed the following operations: $$$\\varepsilon \\to \\color{red}{\\texttt{1}}\\texttt{}\\color{red}{\\texttt{0}} \\to \\color{red}{\\texttt{0}}\\texttt{10}\\color{red}{\\texttt{1}} \\to \\color{red}{\\texttt{1}}\\texttt{0101}\\color{red}{\\texttt{0}}$$$.\nIn the fifth test case, the shortest possible string Timur started with is $$$\\texttt{101}$$$, and he performed the following operations: $$$\\texttt{101} \\to \\color{red}{\\texttt{0}}\\texttt{101}\\color{red}{\\texttt{1}} \\to \\color{red}{\\texttt{1}}\\texttt{01011}\\color{red}{\\texttt{0}}$$$."
        },
        "D": {
            "name": "D. Distinct Split",
            "statement": "Let's denote the $$$f(x)$$$ function for a string $$$x$$$ as the number of distinct characters that the string contains. For example $$$f(\\texttt{abc}) = 3$$$, $$$f(\\texttt{bbbbb}) = 1$$$, and $$$f(\\texttt{babacaba}) = 3$$$.\nGiven a string $$$s$$$, split it into two non-empty strings $$$a$$$ and $$$b$$$ such that $$$f(a) + f(b)$$$ is the maximum possible. In other words, find the maximum possible value of $$$f(a) + f(b)$$$ such that $$$a + b = s$$$ (the concatenation of string $$$a$$$ and string $$$b$$$ is equal to string $$$s$$$).",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$) — the length of the string $$$s$$$.\nThe second line contains the string $$$s$$$, consisting of lowercase English letters.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output a single integer  — the maximum possible value of $$$f(a) + f(b)$$$ such that $$$a + b = s$$$.",
            "examples": [
                {
                    "input": [
                        "5",
                        "2",
                        "aa",
                        "7",
                        "abcabcd",
                        "5",
                        "aaaaa",
                        "10",
                        "paiumoment",
                        "4",
                        "aazz"
                    ],
                    "output": [
                        "2",
                        "7",
                        "2",
                        "10",
                        "3"
                    ]
                }
            ],
            "notes": "For the first test case, there is only one valid way to split $$$\\texttt{aa}$$$ into two non-empty strings $$$\\texttt{a}$$$ and $$$\\texttt{a}$$$, and $$$f(\\texttt{a}) + f(\\texttt{a}) = 1 + 1 = 2$$$.\nFor the second test case, by splitting $$$\\texttt{abcabcd}$$$ into $$$\\texttt{abc}$$$ and $$$\\texttt{abcd}$$$ we can get the answer of $$$f(\\texttt{abc}) + f(\\texttt{abcd}) = 3 + 4 = 7$$$ which is maximum possible.\nFor the third test case, it doesn't matter how we split the string, the answer will always be $$$2$$$."
        },
        "E": {
            "name": "E. Negatives and Positives",
            "statement": "Given an array $$$a$$$ consisting of $$$n$$$ elements, find the maximum possible sum the array can have after performing the following operation any number of times:\nChoose $$$2$$$ adjacent elements and flip both of their signs. In other words choose an index $$$i$$$ such that $$$1 \\leq i \\leq n - 1$$$ and assign $$$a_i = -a_i$$$ and $$$a_{i+1} = -a_{i+1}$$$.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The descriptions of the test cases follow.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe following line contains $$$n$$$ space-separated integers $$$a_1,a_2,\\dots,a_n$$$ ($$$-10^9 \\leq a_i \\leq 10^9$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output the maximum possible sum the array can have after performing the described operation any number of times.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3",
                        "-1 -1 -1",
                        "5",
                        "1 5 -5 0 2",
                        "3",
                        "1 2 3",
                        "6",
                        "-1 10 9 8 7 6",
                        "2",
                        "-1 -1"
                    ],
                    "output": [
                        "1",
                        "13",
                        "6",
                        "39",
                        "2"
                    ]
                }
            ],
            "notes": "For the first test case, by performing the operation on the first two elements, we can change the array from $$$[-1, -1, -1]$$$ to $$$[1, 1, -1]$$$, and it can be proven this array obtains the maximum possible sum which is $$$1 + 1 + (-1) = 1$$$.\nFor the second test case, by performing the operation on $$$-5$$$ and $$$0$$$, we change the array from $$$[1, 5, -5, 0, 2]$$$ to $$$[1, 5, -(-5), -0, 2] = [1, 5, 5, 0, 2]$$$, which has the maximum sum since all elements are non-negative. So, the answer is $$$1 + 5 + 5 + 0 + 2 = 13$$$.\nFor the third test case, the array already contains only positive numbers, so performing operations is unnecessary. The answer is just the sum of the whole array, which is $$$1 + 2 + 3 = 6$$$."
        },
        "F": {
            "name": "F. Range Update Point Query",
            "statement": "Given an array $$$a_1, a_2, \\dots, a_n$$$, you need to handle a total of $$$q$$$ updates and queries of two types:\n$$$1$$$ $$$l$$$ $$$r$$$ — for each index $$$i$$$ with $$$l \\leq i \\leq r$$$, update the value of $$$a_i$$$ to the sum of the digits of $$$a_i$$$.  $$$2$$$ $$$x$$$ — output $$$a_x$$$.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of testcases.\nThe first line of each test case contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\le n, q \\le 2 \\cdot 10^5$$$) — the size of the array and the number of queries, respectively.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).\nThe next $$$q$$$ lines of each test case are of two forms:\nThere is at least one query of the second type.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.\nThe sum of $$$q$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output the answers of queries of the second type, in the order they are given.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5 8",
                        "1 420 69 1434 2023",
                        "1 2 3",
                        "2 2",
                        "2 3",
                        "2 4",
                        "1 2 5",
                        "2 1",
                        "2 3",
                        "2 5",
                        "2 3",
                        "9999 1000",
                        "1 1 2",
                        "2 1",
                        "2 2",
                        "1 1",
                        "1",
                        "2 1"
                    ],
                    "output": [
                        "6",
                        "15",
                        "1434",
                        "1",
                        "6",
                        "7",
                        "36",
                        "1",
                        "1"
                    ]
                }
            ],
            "notes": "In the first test case, the following process occurs:"
        },
        "G1": {
            "name": "G1. Teleporters (Easy Version)",
            "statement": "The only difference between the easy and hard versions are the locations you can teleport to.\nConsider the points $$$0, 1, \\dots, n$$$ on the number line. There is a teleporter located on each of the points $$$1, 2, \\dots, n$$$. At point $$$i$$$, you can do the following:\nMove left one unit: it costs $$$1$$$ coin.  Move right one unit: it costs $$$1$$$ coin.  Use a teleporter at point $$$i$$$, if it exists: it costs $$$a_i$$$ coins. As a result, you teleport to point $$$0$$$. Once you use a teleporter, you can't use it again.\nYou have $$$c$$$ coins, and you start at point $$$0$$$. What's the most number of teleporters you can use?",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The descriptions of the test cases follow.\nThe first line of each test case contains two integers $$$n$$$ and $$$c$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$; $$$1 \\leq c \\leq 10^9$$$)  — the length of the array and the number of coins you have respectively.\nThe following line contains $$$n$$$ space-separated integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the costs to use the teleporters.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output the maximum number of teleporters you can use.",
            "examples": [
                {
                    "input": [
                        "10",
                        "5 6",
                        "1 1 1 1 1",
                        "8 32",
                        "100 52 13 6 9 4 100 35",
                        "1 1",
                        "5",
                        "4 5",
                        "4 3 2 1",
                        "5 9",
                        "2 3 1 4 1",
                        "5 8",
                        "2 3 1 4 1",
                        "4 3",
                        "2 3 4 1",
                        "4 9",
                        "5 4 3 3",
                        "2 14",
                        "7 5",
                        "5 600000000",
                        "500000000 400000000 300000000 200000000 100000000"
                    ],
                    "output": [
                        "2",
                        "2",
                        "0",
                        "1",
                        "2",
                        "2",
                        "1",
                        "1",
                        "1",
                        "2"
                    ]
                }
            ],
            "notes": "In the first test case, you can move one unit to the right, use the teleporter at index $$$1$$$ and teleport to point $$$0$$$, move two units to the right and use the teleporter at index $$$2$$$. You are left with $$$6-1-1-2-1 = 1$$$ coins you don't have enough coins to use another teleporter. You have used two teleporters, so the answer is two.\nIn the second test case, you go four units to the right and use the teleporter to go to $$$0$$$, then go six units right and use the teleporter at index $$$6$$$ to go to $$$0$$$. The total cost will be $$$4+6+6+4 = 20$$$. You are left with $$$12$$$ coins, but it is not enough to reach any other teleporter and use it so the answer is $$$2$$$.\nIn the third test case, you don't have enough coins to use any teleporter, so the answer is zero."
        },
        "G2": {
            "name": "G2. Teleporters (Hard Version)",
            "statement": "The only difference between the easy and hard versions are the locations you can teleport to.\nConsider the points $$$0,1,\\dots,n+1$$$ on the number line. There is a teleporter located on each of the points $$$1,2,\\dots,n$$$. At point $$$i$$$, you can do the following:\nMove left one unit: it costs $$$1$$$ coin.  Move right one unit: it costs $$$1$$$ coin.  Use a teleporter at point $$$i$$$, if it exists: it costs $$$a_i$$$ coins. As a result, you can choose whether to teleport to point $$$0$$$ or point $$$n+1$$$. Once you use a teleporter, you can't use it again.\nYou have $$$c$$$ coins, and you start at point $$$0$$$. What's the most number of teleporters you can use?",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The descriptions of the test cases follow.\nThe first line of each test case contains two integers $$$n$$$ and $$$c$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$; $$$1 \\leq c \\leq 10^9$$$)  — the length of the array and the number of coins you have respectively.\nThe following line contains $$$n$$$ space-separated positive integers $$$a_1,a_2,\\dots,a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the costs to use the teleporters.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output the maximum number of teleporters you can use.",
            "examples": [
                {
                    "input": [
                        "10",
                        "5 6",
                        "1 1 1 1 1",
                        "8 32",
                        "100 52 13 6 9 4 100 35",
                        "1 1",
                        "5",
                        "4 5",
                        "4 3 2 1",
                        "5 9",
                        "2 3 1 4 1",
                        "5 8",
                        "2 3 1 4 1",
                        "4 3",
                        "2 3 4 1",
                        "4 9",
                        "5 4 3 3",
                        "2 14",
                        "7 5",
                        "5 600000000",
                        "500000000 400000000 300000000 200000000 100000000"
                    ],
                    "output": [
                        "2",
                        "3",
                        "0",
                        "1",
                        "3",
                        "2",
                        "1",
                        "1",
                        "2",
                        "2"
                    ]
                }
            ],
            "notes": "In the first test case, you can move one unit to the right, use the teleporter at index $$$1$$$ and teleport to point $$$n+1$$$, move one unit to the left and use the teleporter at index $$$5$$$. You are left with $$$6-1-1-1-1 = 2$$$ coins, and wherever you teleport, you won't have enough coins to use another teleporter. You have used two teleporters, so the answer is two.\nIn the second test case, you go four units to the right and use the teleporter to go to $$$n+1$$$, then go three units left and use the teleporter at index $$$6$$$ to go to $$$n+1$$$, and finally, you go left four times and use the teleporter. The total cost will be $$$4+6+3+4+4+9 = 30$$$, and you used three teleporters.\nIn the third test case, you don't have enough coins to use any teleporter, so the answer is zero."
        }
    },
    "1760": {
        "A": {
            "name": "A. Medium Number",
            "statement": "Given three distinct integers $$$a$$$, $$$b$$$, and $$$c$$$, find the medium number between all of them.\nThe medium number is the number that is neither the minimum nor the maximum of the given three numbers.\nFor example, the median of $$$5,2,6$$$ is $$$5$$$, since the minimum is $$$2$$$ and the maximum is $$$6$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 6840$$$) — the number of test cases.\nThe description of each test case consists of three distinct integers $$$a$$$, $$$b$$$, $$$c$$$ ($$$1 \\leq a, b, c \\leq 20$$$).",
            "output_format": "For each test case, output a single integer — the medium number of the three numbers.",
            "examples": [
                {
                    "input": [
                        "9",
                        "5 2 6",
                        "14 3 4",
                        "20 2 1",
                        "1 2 3",
                        "11 19 12",
                        "10 8 20",
                        "6 20 3",
                        "4 1 3",
                        "19 8 4"
                    ],
                    "output": [
                        "5",
                        "4",
                        "2",
                        "2",
                        "12",
                        "10",
                        "6",
                        "3",
                        "8"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Atilla's Favorite Problem",
            "statement": "In order to write a string, Atilla needs to first learn all letters that are contained in the string.\nAtilla needs to write a message which can be represented as a string $$$s$$$. He asks you what is the minimum alphabet size required so that one can write this message.\nThe alphabet of size $$$x$$$ ($$$1 \\leq x \\leq 26$$$) contains only the first $$$x$$$ Latin letters. For example an alphabet of size $$$4$$$ contains only the characters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$ and $$$\\texttt{d}$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the length of the string.\nThe second line of each test case contains a string $$$s$$$ of length $$$n$$$, consisting of lowercase Latin letters.",
            "output_format": "For each test case, output a single integer — the minimum alphabet size required to so that Atilla can write his message $$$s$$$.",
            "examples": [
                {
                    "input": [
                        "5",
                        "1",
                        "a",
                        "4",
                        "down",
                        "10",
                        "codeforces",
                        "3",
                        "bcf",
                        "5",
                        "zzzzz"
                    ],
                    "output": [
                        "1",
                        "23",
                        "19",
                        "6",
                        "26"
                    ]
                }
            ],
            "notes": "For the first test case, Atilla needs to know only the character $$$\\texttt{a}$$$, so the alphabet of size $$$1$$$ which only contains $$$\\texttt{a}$$$ is enough.\nFor the second test case, Atilla needs to know the characters $$$\\texttt{d}$$$, $$$\\texttt{o}$$$, $$$\\texttt{w}$$$, $$$\\texttt{n}$$$. The smallest alphabet size that contains all of them is $$$23$$$ (such alphabet can be represented as the string $$$\\texttt{abcdefghijklmnopqrstuvw}$$$)."
        },
        "C": {
            "name": "C. Advantage",
            "statement": "There are $$$n$$$ participants in a competition, participant $$$i$$$ having a strength of $$$s_i$$$.\nEvery participant wonders how much of an advantage they have over the other best participant. In other words, each participant $$$i$$$ wants to know the difference between $$$s_i$$$ and $$$s_j$$$, where $$$j$$$ is the strongest participant in the competition, not counting $$$i$$$ (a difference can be negative).\nSo, they ask you for your help! For each $$$i$$$ ($$$1 \\leq i \\leq n$$$) output the difference between $$$s_i$$$ and the maximum strength of any participant other than participant $$$i$$$.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The descriptions of the test cases follow.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe following line contains $$$n$$$ space-separated positive integers $$$s_1$$$, $$$s_2$$$, ..., $$$s_n$$$ ($$$1 \\leq s_i \\leq 10^9$$$) — the strengths of the participants.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output $$$n$$$ space-separated integers. For each $$$i$$$ ($$$1 \\leq i \\leq n$$$) output the difference between $$$s_i$$$ and the maximum strength of any other participant.",
            "examples": [
                {
                    "input": [
                        "5",
                        "4",
                        "4 7 3 5",
                        "2",
                        "1 2",
                        "5",
                        "1 2 3 4 5",
                        "3",
                        "4 9 4",
                        "4",
                        "4 4 4 4"
                    ],
                    "output": [
                        "-3 2 -4 -2 ",
                        "-1 1 ",
                        "-4 -3 -2 -1 1 ",
                        "-5 5 -5 ",
                        "0 0 0 0"
                    ]
                }
            ],
            "notes": "For the first test case:"
        },
        "D": {
            "name": "D. Challenging Valleys",
            "statement": "You are given an array $$$a[0 \\dots n-1]$$$ of $$$n$$$ integers. This array is called a \"valley\" if there exists exactly one subarray $$$a[l \\dots r]$$$ such that:\n$$$0 \\le l \\le r \\le n-1$$$,  $$$a_l = a_{l+1} = a_{l+2} = \\dots = a_r$$$,  $$$l = 0$$$ or $$$a_{l-1} > a_{l}$$$,  $$$r = n-1$$$ or $$$a_r < a_{r+1}$$$.\nHere are three examples:\nThe first image shows the array [$$$3, 2, 2, 1, 2, 2, 3$$$], it is a valley because only subarray with indices $$$l=r=3$$$ satisfies the condition.\nThe second image shows the array [$$$1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 6$$$], it is a valley because only subarray with indices $$$l=0, r=2$$$ satisfies the codition.\nThe third image shows the array [$$$1, 2, 3, 4, 3, 2, 1$$$], it is not a valley because two subarrays $$$l=r=0$$$ and $$$l=r=6$$$ that satisfy the condition.\nYou are asked whether the given array is a valley or not.\nNote that we consider the array to be indexed from $$$0$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases is smaller than $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output \"YES\" (without quotes) if the array is a valley, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "7",
                        "3 2 2 1 2 2 3",
                        "11",
                        "1 1 1 2 3 3 4 5 6 6 6",
                        "7",
                        "1 2 3 4 3 2 1",
                        "7",
                        "9 7 4 6 9 9 10",
                        "1",
                        "1000000000",
                        "8",
                        "9 4 4 5 9 4 9 10"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "The first three test cases are explained in the statement."
        },
        "E": {
            "name": "E. Binary Inversions",
            "statement": "You are given a binary array$$$^{\\dagger}$$$ of length $$$n$$$. You are allowed to perform one operation on it at most once. In an operation, you can choose any element and flip it: turn a $$$0$$$ into a $$$1$$$ or vice-versa.\nWhat is the maximum number of inversions$$$^{\\ddagger}$$$ the array can have after performing at most one operation?\n$$$^\\dagger$$$ A binary array is an array that contains only zeroes and ones.\n$$$^\\ddagger$$$ The number of inversions in an array is the number of pairs of indices $$$i,j$$$ such that $$$i<j$$$ and $$$a_i > a_j$$$.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe following line contains $$$n$$$ space-separated positive integers $$$a_1$$$, $$$a_2$$$,..., $$$a_n$$$ ($$$0 \\leq a_i \\leq 1$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output a single integer  — the maximum number of inversions the array can have after performing at most one operation.",
            "examples": [
                {
                    "input": [
                        "5",
                        "4",
                        "1 0 1 0",
                        "6",
                        "0 1 0 0 1 0",
                        "2",
                        "0 0",
                        "8",
                        "1 0 1 1 0 0 0 1",
                        "3",
                        "1 1 1"
                    ],
                    "output": [
                        "3",
                        "7",
                        "1",
                        "13",
                        "2"
                    ]
                }
            ],
            "notes": "For the first test case, the inversions are initially formed by the pairs of indices ($$$1, 2$$$), ($$$1, 4$$$), ($$$3, 4$$$), being a total of $$$3$$$, which already is the maximum possible.\nFor the second test case, the inversions are initially formed by the pairs of indices ($$$2, 3$$$), ($$$2, 4$$$), ($$$2, 6$$$), ($$$5, 6$$$), being a total of four. But, by flipping the first element, the array becomes $$${1, 1, 0, 0, 1, 0}$$$, which has the inversions formed by the pairs of indices ($$$1, 3$$$), ($$$1, 4$$$), ($$$1, 6$$$), ($$$2, 3$$$), ($$$2, 4$$$), ($$$2, 6$$$), ($$$5, 6$$$) which total to $$$7$$$ inversions which is the maximum possible."
        },
        "F": {
            "name": "F. Quests",
            "statement": "There are $$$n$$$ quests. If you complete the $$$i$$$-th quest, you will gain $$$a_i$$$ coins. You can only complete at most one quest per day. However, once you complete a quest, you cannot do the same quest again for $$$k$$$ days. (For example, if $$$k=2$$$ and you do quest $$$1$$$ on day $$$1$$$, then you cannot do it on day $$$2$$$ or $$$3$$$, but you can do it again on day $$$4$$$.)\nYou are given two integers $$$c$$$ and $$$d$$$. Find the maximum value of $$$k$$$ such that you can gain at least $$$c$$$ coins over $$$d$$$ days. If no such $$$k$$$ exists, output Impossible. If $$$k$$$ can be arbitrarily large, output Infinity.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains three integers $$$n,c,d$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$; $$$1 \\leq c \\leq 10^{16}$$$; $$$1 \\leq d \\leq 2\\cdot10^5$$$) — the number of quests, the number of coins you need, and the number of days.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the rewards for the quests.\nThe sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$, and the sum of $$$d$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output one of the following.",
            "examples": [
                {
                    "input": [
                        "6",
                        "2 5 4",
                        "1 2",
                        "2 20 10",
                        "100 10",
                        "3 100 3",
                        "7 2 6",
                        "4 20 3",
                        "4 5 6 7",
                        "4 100000000000 2022",
                        "8217734 927368 26389746 627896974",
                        "2 20 4",
                        "5 1"
                    ],
                    "output": [
                        "2",
                        "Infinity",
                        "Impossible",
                        "1",
                        "12",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case, one way to earn $$$5$$$ coins over $$$4$$$ days with $$$k=2$$$ is as follows:\nIn the second test case, we can make over $$$20$$$ coins on the first day itself by doing the first quest to earn $$$100$$$ coins, so the value of $$$k$$$ can be arbitrarily large, since we never need to do another quest.\nIn the third test case, no matter what we do, we can't earn $$$100$$$ coins over $$$3$$$ days."
        },
        "G": {
            "name": "G. SlavicG's Favorite Problem",
            "statement": "You are given a weighted tree with $$$n$$$ vertices. Recall that a tree is a connected graph without any cycles. A weighted tree is a tree in which each edge has a certain weight. The tree is undirected, it doesn't have a root.\nSince trees bore you, you decided to challenge yourself and play a game on the given tree.\nIn a move, you can travel from a node to one of its neighbors (another node it has a direct edge with).\nYou start with a variable $$$x$$$ which is initially equal to $$$0$$$. When you pass through edge $$$i$$$, $$$x$$$ changes its value to $$$x ~\\mathsf{XOR}~ w_i$$$ (where $$$w_i$$$ is the weight of the $$$i$$$-th edge).\nYour task is to go from vertex $$$a$$$ to vertex $$$b$$$, but you are allowed to enter node $$$b$$$ if and only if after traveling to it, the value of $$$x$$$ will become $$$0$$$. In other words, you can travel to node $$$b$$$ only by using an edge $$$i$$$ such that $$$x ~\\mathsf{XOR}~ w_i = 0$$$. Once you enter node $$$b$$$ the game ends and you win.\nAdditionally, you can teleport at most once at any point in time to any vertex except vertex $$$b$$$. You can teleport from any vertex, even from $$$a$$$.\nAnswer with \"YES\" if you can reach vertex $$$b$$$ from $$$a$$$, and \"NO\" otherwise.\nNote that $$$\\mathsf{XOR}$$$ represents the bitwise XOR operation.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains three integers $$$n$$$, $$$a$$$, and $$$b$$$ ($$$2 \\leq n \\leq 10^5$$$), ($$$1 \\leq a, b \\leq n; a \\ne b$$$) — the number of vertices, and the starting and desired ending node respectively.\nEach of the next $$$n-1$$$ lines denotes an edge of the tree. Edge $$$i$$$ is denoted by three integers $$$u_i$$$, $$$v_i$$$ and $$$w_i$$$  — the labels of vertices it connects ($$$1 \\leq u_i, v_i \\leq n; u_i \\ne v_i; 1 \\leq w_i \\leq 10^9$$$) and the weight of the respective edge.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "For each test case output \"YES\" if you can reach vertex $$$b$$$, and \"NO\" otherwise.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5 1 4",
                        "1 3 1",
                        "2 3 2",
                        "4 3 3",
                        "3 5 1",
                        "2 1 2",
                        "1 2 2",
                        "6 2 3",
                        "1 2 1",
                        "2 3 1",
                        "3 4 1",
                        "4 5 3",
                        "5 6 5"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case, we can travel from node $$$1$$$ to node $$$3$$$, $$$x$$$ changing from $$$0$$$ to $$$1$$$, then we travel from node $$$3$$$ to node $$$2$$$, $$$x$$$ becoming equal to $$$3$$$. Now, we can teleport to node $$$3$$$ and travel from node $$$3$$$ to node $$$4$$$, reaching node $$$b$$$, since $$$x$$$ became equal to $$$0$$$ in the end, so we should answer \"YES\".\nFor the second test case, we have no moves, since we can't teleport to node $$$b$$$ and the only move we have is to travel to node $$$2$$$ which is impossible since $$$x$$$ wouldn't be equal to $$$0$$$ when reaching it, so we should answer \"NO\"."
        }
    },
    "1742": {
        "A": {
            "name": "A. Sum",
            "statement": "You are given three integers $$$a$$$, $$$b$$$, and $$$c$$$. Determine if one of them is the sum of the other two.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 9261$$$) — the number of test cases.\nThe description of each test case consists of three integers $$$a$$$, $$$b$$$, $$$c$$$ ($$$0 \\leq a, b, c \\leq 20$$$).",
            "output_format": "For each test case, output \"YES\" if one of the numbers is the sum of the other two, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "7",
                        "1 4 3",
                        "2 5 8",
                        "9 11 20",
                        "0 0 0",
                        "20 20 20",
                        "4 12 3",
                        "15 7 8"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, $$$1 + 3 = 4$$$.\nIn the second test case, none of the numbers is the sum of the other two.\nIn the third test case, $$$9 + 11 = 20$$$."
        },
        "B": {
            "name": "B. Increasing",
            "statement": "You are given an array $$$a$$$ of $$$n$$$ positive integers. Determine if, by rearranging the elements, you can make the array strictly increasing. In other words, determine if it is possible to rearrange the elements such that $$$a_1 < a_2 < \\dots < a_n$$$ holds.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array.",
            "output_format": "For each test case, output \"YES\" (without quotes) if the array satisfies the condition, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "3",
                        "4",
                        "1 1 1 1",
                        "5",
                        "8 7 1 3 4",
                        "1",
                        "5"
                    ],
                    "output": [
                        "NO",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case any rearrangement will keep the array $$$[1,1,1,1]$$$, which is not strictly increasing.\nIn the second test case, you can make the array $$$[1,3,4,7,8]$$$."
        },
        "C": {
            "name": "C. Stripes",
            "statement": "On an $$$8 \\times 8$$$ grid, some horizontal rows have been painted red, and some vertical columns have been painted blue, in some order. The stripes are drawn sequentially, one after the other. When the stripe is drawn, it repaints all the cells through which it passes.\nDetermine which color was used last.\nThe red stripe was painted after the blue one, so the answer is R.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 4000$$$) — the number of test cases. The description of test cases follows. There is an empty line before each test case.\nEach test case consists of $$$8$$$ lines, each containing $$$8$$$ characters. Each of these characters is either 'R', 'B', or '.', denoting a red square, a blue square, and an unpainted square, respectively.\nIt is guaranteed that the given field is obtained from a colorless one by drawing horizontal red rows and vertical blue columns.\nAt least one stripe is painted.",
            "output_format": "For each test case, output 'R' if a red stripe was painted last, and 'B' if a blue stripe was painted last (without quotes).",
            "examples": [
                {
                    "input": [
                        "4",
                        "",
                        "....B...",
                        "....B...",
                        "....B...",
                        "RRRRRRRR",
                        "....B...",
                        "....B...",
                        "....B...",
                        "....B...",
                        "",
                        "RRRRRRRB",
                        "B......B",
                        "B......B",
                        "B......B",
                        "B......B",
                        "B......B",
                        "B......B",
                        "RRRRRRRB",
                        "",
                        "RRRRRRBB",
                        ".B.B..BB",
                        "RRRRRRBB",
                        ".B.B..BB",
                        ".B.B..BB",
                        "RRRRRRBB",
                        ".B.B..BB",
                        ".B.B..BB",
                        "",
                        "........",
                        "........",
                        "........",
                        "RRRRRRRR",
                        "........",
                        "........",
                        "........",
                        "........"
                    ],
                    "output": [
                        "R",
                        "B",
                        "B",
                        "R"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement.\nIn the second test case, the first blue column is painted first, then the first and last red rows, and finally the last blue column. Since a blue stripe is painted last, the answer is B."
        },
        "D": {
            "name": "D. Coprime",
            "statement": "Given an array of $$$n$$$ positive integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 1000$$$). Find the maximum value of $$$i + j$$$ such that $$$a_i$$$ and $$$a_j$$$ are coprime,$$$^{\\dagger}$$$ or $$$-1$$$ if no such $$$i$$$, $$$j$$$ exist.\nFor example consider the array $$$[1, 3, 5, 2, 4, 7, 7]$$$. The maximum value of $$$i + j$$$ that can be obtained is $$$5 + 7$$$, since $$$a_5 = 4$$$ and $$$a_7 = 7$$$ are coprime.\n$$$^{\\dagger}$$$ Two integers $$$p$$$ and $$$q$$$ are coprime if the only positive integer that is a divisor of both of them is $$$1$$$ (that is, their greatest common divisor is $$$1$$$).",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe following line contains $$$n$$$ space-separated positive integers $$$a_1$$$, $$$a_2$$$,..., $$$a_n$$$ ($$$1 \\leq a_i \\leq 1000$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output a single integer  — the maximum value of $$$i + j$$$ such that $$$i$$$ and $$$j$$$ satisfy the condition that $$$a_i$$$ and $$$a_j$$$ are coprime, or output $$$-1$$$ in case no $$$i$$$, $$$j$$$ satisfy the condition.",
            "examples": [
                {
                    "input": [
                        "6",
                        "3",
                        "3 2 1",
                        "7",
                        "1 3 5 2 4 7 7",
                        "5",
                        "1 2 3 4 5",
                        "3",
                        "2 2 4",
                        "6",
                        "5 4 3 15 12 16",
                        "5",
                        "1 2 2 3 6"
                    ],
                    "output": [
                        "6",
                        "12",
                        "9",
                        "-1",
                        "10",
                        "7"
                    ]
                }
            ],
            "notes": "For the first test case, we can choose $$$i = j = 3$$$, with sum of indices equal to $$$6$$$, since $$$1$$$ and $$$1$$$ are coprime.\nFor the second test case, we can choose $$$i = 7$$$ and $$$j = 5$$$, with sum of indices equal to $$$7 + 5 = 12$$$, since $$$7$$$ and $$$4$$$ are coprime."
        },
        "E": {
            "name": "E. Scuza",
            "statement": "Timur has a stairway with $$$n$$$ steps. The $$$i$$$-th step is $$$a_i$$$ meters higher than its predecessor. The first step is $$$a_1$$$ meters higher than the ground, and the ground starts at $$$0$$$ meters.\nThe stairs for the first test case.\nTimur has $$$q$$$ questions, each denoted by an integer $$$k_1, \\dots, k_q$$$. For each question $$$k_i$$$, you have to print the maximum possible height Timur can achieve by climbing the steps if his legs are of length $$$k_i$$$. Timur can only climb the $$$j$$$-th step if his legs are of length at least $$$a_j$$$. In other words, $$$k_i \\geq a_j$$$ for each step $$$j$$$ climbed.\nNote that you should answer each question independently.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n, q$$$ ($$$1 \\leq n, q \\leq 2\\cdot10^5$$$) — the number of steps and the number of questions, respectively.\nThe second line of each test case contains $$$n$$$ integers ($$$1 \\leq a_i \\leq 10^9$$$) — the height of the steps.\nThe third line of each test case contains $$$q$$$ integers ($$$0 \\leq k_i \\leq 10^9$$$) — the numbers for each question.\nIt is guaranteed that the sum of $$$n$$$ does not exceed $$$2\\cdot10^5$$$, and the sum of $$$q$$$ does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output a single line containing $$$q$$$ integers, the answer for each question.\nPlease note, that the answer for some questions won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "examples": [
                {
                    "input": [
                        "3",
                        "4 5",
                        "1 2 1 5",
                        "1 2 4 9 10",
                        "2 2",
                        "1 1",
                        "0 1",
                        "3 1",
                        "1000000000 1000000000 1000000000",
                        "1000000000"
                    ],
                    "output": [
                        "1 4 4 9 9 ",
                        "0 2 ",
                        "3000000000"
                    ]
                }
            ],
            "notes": "Consider the first test case, pictured in the statement."
        },
        "F": {
            "name": "F. Smaller",
            "statement": "Alperen has two strings, $$$s$$$ and $$$t$$$ which are both initially equal to \"a\".\nHe will perform $$$q$$$ operations of two types on the given strings:\n$$$1 \\;\\; k \\;\\; x$$$ — Append the string $$$x$$$ exactly $$$k$$$ times at the end of string $$$s$$$. In other words, $$$s := s + \\underbrace{x + \\dots + x}_{k \\text{ times}}$$$.  $$$2 \\;\\; k \\;\\; x$$$ — Append the string $$$x$$$ exactly $$$k$$$ times at the end of string $$$t$$$. In other words, $$$t := t + \\underbrace{x + \\dots + x}_{k \\text{ times}}$$$.\nAfter each operation, determine if it is possible to rearrange the characters of $$$s$$$ and $$$t$$$ such that $$$s$$$ is lexicographically smaller$$$^{\\dagger}$$$ than $$$t$$$.\nNote that the strings change after performing each operation and don't go back to their initial states.\n$$$^{\\dagger}$$$ Simply speaking, the lexicographical order is the order in which words are listed in a dictionary. A formal definition is as follows: string $$$p$$$ is lexicographically smaller than string $$$q$$$ if there exists a position $$$i$$$ such that $$$p_i < q_i$$$, and for all $$$j < i$$$, $$$p_j = q_j$$$. If no such $$$i$$$ exists, then $$$p$$$ is lexicographically smaller than $$$q$$$ if the length of $$$p$$$ is less than the length of $$$q$$$. For example, $$$\\texttt{abdc} < \\texttt{abe}$$$ and $$$\\texttt{abc} < \\texttt{abcd}$$$, where we write $$$p < q$$$ if $$$p$$$ is lexicographically smaller than $$$q$$$.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$q$$$ $$$(1 \\leq q \\leq 10^5)$$$ — the number of operations Alperen will perform.\nThen $$$q$$$ lines follow, each containing two positive integers $$$d$$$ and $$$k$$$ ($$$1 \\leq d \\leq 2$$$; $$$1 \\leq k \\leq 10^5$$$) and a non-empty string $$$x$$$ consisting of lowercase English letters — the type of the operation, the number of times we will append string $$$x$$$ and the string we need to append respectively.\nIt is guaranteed that the sum of $$$q$$$ over all test cases doesn't exceed $$$10^5$$$ and that the sum of lengths of all strings $$$x$$$ in the input doesn't exceed $$$5 \\cdot 10^5$$$.",
            "output_format": "For each operation, output \"YES\", if it is possible to arrange the elements in both strings in such a way that $$$s$$$ is lexicographically smaller than $$$t$$$ and \"NO\" otherwise.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5",
                        "2 1 aa",
                        "1 2 a",
                        "2 3 a",
                        "1 2 b",
                        "2 3 abca",
                        "2",
                        "1 5 mihai",
                        "2 2 buiucani",
                        "3",
                        "1 5 b",
                        "2 3 a",
                        "2 4 paiu"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, the strings are initially $$$s = $$$ \"a\" and $$$t = $$$ \"a\".\nAfter the first operation the string $$$t$$$ becomes \"aaa\". Since \"a\" is already lexicographically smaller than \"aaa\", the answer for this operation should be \"YES\".\nAfter the second operation string $$$s$$$ becomes \"aaa\", and since $$$t$$$ is also equal to \"aaa\", we can't arrange $$$s$$$ in any way such that it is lexicographically smaller than $$$t$$$, so the answer is \"NO\".\nAfter the third operation string $$$t$$$ becomes \"aaaaaa\" and $$$s$$$ is already lexicographically smaller than it so the answer is \"YES\".\nAfter the fourth operation $$$s$$$ becomes \"aaabb\" and there is no way to make it lexicographically smaller than \"aaaaaa\" so the answer is \"NO\".\nAfter the fifth operation the string $$$t$$$ becomes \"aaaaaaabcaabcaabca\", and we can rearrange the strings to: \"bbaaa\" and \"caaaaaabcaabcaabaa\" so that $$$s$$$ is lexicographically smaller than $$$t$$$, so we should answer \"YES\"."
        },
        "G": {
            "name": "G. Orray",
            "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ nonnegative integers.\nLet's define the prefix OR array $$$b$$$ as the array $$$b_i = a_1~\\mathsf{OR}~a_2~\\mathsf{OR}~\\dots~\\mathsf{OR}~a_i$$$, where $$$\\mathsf{OR}$$$ represents the bitwise OR operation. In other words, the array $$$b$$$ is formed by computing the $$$\\mathsf{OR}$$$ of every prefix of $$$a$$$.\nYou are asked to rearrange the elements of the array $$$a$$$ in such a way that its prefix OR array is lexicographically maximum.\nAn array $$$x$$$ is lexicographically greater than an array $$$y$$$ if in the first position where $$$x$$$ and $$$y$$$ differ, $$$x_i > y_i$$$.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array $$$a$$$.\nThe second line of each test case contains $$$n$$$ nonnegative integers $$$a_1, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq 10^9$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case print $$$n$$$ integers — any rearrangement of the array $$$a$$$ that obtains the lexicographically maximum prefix OR array.",
            "examples": [
                {
                    "input": [
                        "5",
                        "4",
                        "1 2 4 8",
                        "7",
                        "5 1 2 3 4 5 5",
                        "2",
                        "1 101",
                        "6",
                        "2 3 4 2 3 4",
                        "8",
                        "1 4 2 3 4 5 7 1"
                    ],
                    "output": [
                        "8 4 2 1 ",
                        "5 2 1 3 4 5 5 ",
                        "101 1 ",
                        "4 3 2 2 3 4 ",
                        "7 1 4 2 3 4 5 1"
                    ]
                }
            ],
            "notes": ""
        }
    },
    "1722": {
        "A": {
            "name": "A. Spell Check",
            "statement": "Timur likes his name. As a spelling of his name, he allows any permutation of the letters of the name. For example, the following strings are valid spellings of his name: Timur, miurT, Trumi, mriTu. Note that the correct spelling must have uppercased T and lowercased other letters.\nToday he wrote string $$$s$$$ of length $$$n$$$ consisting only of uppercase or lowercase Latin letters. He asks you to check if $$$s$$$ is the correct spelling of his name.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ $$$(1 \\leq n \\leq 10)$$$ — the length of string $$$s$$$.\nThe second line of each test case contains a string $$$s$$$ consisting of only uppercase or lowercase Latin characters.",
            "output_format": "For each test case, output \"YES\" (without quotes) if $$$s$$$ satisfies the condition, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "10",
                        "5",
                        "Timur",
                        "5",
                        "miurT",
                        "5",
                        "Trumi",
                        "5",
                        "mriTu",
                        "5",
                        "timur",
                        "4",
                        "Timr",
                        "6",
                        "Timuur",
                        "10",
                        "codeforces",
                        "10",
                        "TimurTimur",
                        "5",
                        "TIMUR"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Colourblindness",
            "statement": "Vasya has a grid with $$$2$$$ rows and $$$n$$$ columns. He colours each cell red, green, or blue.\nVasya is colourblind and can't distinguish green from blue. Determine if Vasya will consider the two rows of the grid to be coloured the same.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the number of columns of the grid.\nThe following two lines each contain a string consisting of $$$n$$$ characters, each of which is either R, G, or B, representing a red, green, or blue cell, respectively — the description of the grid.",
            "output_format": "For each test case, output \"YES\" if Vasya considers the grid's two rows to be identical, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "2",
                        "RG",
                        "RB",
                        "4",
                        "GRBG",
                        "GBGB",
                        "5",
                        "GGGGG",
                        "BBBBB",
                        "7",
                        "BBBBBBB",
                        "RRRRRRR",
                        "8",
                        "RGBRRGBR",
                        "RGGRRBGR",
                        "1",
                        "G",
                        "G"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, Vasya sees the second cell of each row as the same because the second cell of the first row is green and the second cell of the second row is blue, so he can't distinguish these two cells. The rest of the rows are equal in colour. Therefore, Vasya will say that the two rows are coloured the same, even though they aren't.\nIn the second test case, Vasya can see that the two rows are different.\nIn the third test case, every cell is green or blue, so Vasya will think they are the same."
        },
        "C": {
            "name": "C. Word Game",
            "statement": "Three guys play a game: first, each person writes down $$$n$$$ distinct words of length $$$3$$$. Then, they total up the number of points as follows:\nif a word was written by one person — that person gets 3 points,  if a word was written by two people — each of the two gets 1 point,  if a word was written by all — nobody gets any points.\nIn the end, how many points does each player have?",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 1000$$$) — the number of words written by each person.\nThe following three lines each contain $$$n$$$ distinct strings — the words written by each person. Each string consists of $$$3$$$ lowercase English characters.",
            "output_format": "For each test case, output three space-separated integers — the number of points each of the three guys earned. You should output the answers in the same order as the input; the $$$i$$$-th integer should be the number of points earned by the $$$i$$$-th guy.",
            "examples": [
                {
                    "input": [
                        "3",
                        "1",
                        "abc",
                        "def",
                        "abc",
                        "3",
                        "orz for qaq",
                        "qaq orz for",
                        "cod for ces",
                        "5",
                        "iat roc hem ica lly",
                        "bac ter iol ogi sts",
                        "bac roc lly iol iat"
                    ],
                    "output": [
                        "1 3 1 ",
                        "2 2 6 ",
                        "9 11 5"
                    ]
                }
            ],
            "notes": "In the first test case:"
        },
        "D": {
            "name": "D. Line",
            "statement": "There are $$$n$$$ people in a horizontal line, each looking either to the left or the right. Each person counts the number of people in the direction they are looking. The value of the line is the sum of each person's count.\nFor example, in the arrangement LRRLL, where L stands for a person looking left and R stands for a person looking right, the counts for each person are $$$[0, 3, 2, 3, 4]$$$, and the value is $$$0+3+2+3+4=12$$$.\nYou are given the initial arrangement of people in the line. For each $$$k$$$ from $$$1$$$ to $$$n$$$, determine the maximum value of the line if you can change the direction of at most $$$k$$$ people.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of the line.\nThe following line contains a string consisting of $$$n$$$ characters, each of which is either L or R, representing a person facing left or right, respectively — the description of the line.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.\nPlease note that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "output_format": "For each test case, output $$$n$$$ space-separated non-negative integers — the maximum value of the line if you can change the direction of at most $$$k$$$ people for each $$$k$$$ from $$$1$$$ to $$$n$$$, inclusive.",
            "examples": [
                {
                    "input": [
                        "6",
                        "3",
                        "LLR",
                        "5",
                        "LRRLL",
                        "1",
                        "L",
                        "12",
                        "LRRRLLLRLLRL",
                        "10",
                        "LLLLLRRRRR",
                        "9",
                        "LRLRLRLRL"
                    ],
                    "output": [
                        "3 5 5 ",
                        "16 16 16 16 16 ",
                        "0 ",
                        "86 95 98 101 102 102 102 102 102 102 102 102 ",
                        "29 38 45 52 57 62 65 68 69 70 ",
                        "44 50 54 56 56 56 56 56 56"
                    ]
                }
            ],
            "notes": "In the first test case:\nIn the second test case, it is optimal to only change the direction of the first person for all $$$k$$$ from $$$1$$$ to $$$5$$$ (that is, make the line RRRLL)."
        },
        "E": {
            "name": "E. Counting Rectangles",
            "statement": "You have $$$n$$$ rectangles, the $$$i$$$-th rectangle has height $$$h_i$$$ and width $$$w_i$$$.\nYou are asked $$$q$$$ queries of the form $$$h_s \\ w_s \\ h_b \\ w_b$$$.\nFor each query output, the total area of rectangles you own that can fit a rectangle of height $$$h_s$$$ and width $$$w_s$$$ while also fitting in a rectangle of height $$$h_b$$$ and width $$$w_b$$$. In other words, print $$$\\sum h_i \\cdot w_i$$$ for $$$i$$$ such that $$$h_s < h_i < h_b$$$ and $$$w_s < w_i < w_b$$$.\nPlease note, that if two rectangles have the same height or the same width, then they cannot fit inside each other. Also note that you cannot rotate rectangles.\nPlease note that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case two integers $$$n, q$$$ ($$$1 \\leq n \\leq 10^5$$$; $$$1 \\leq q \\leq 10^5$$$) — the number of rectangles you own and the number of queries.\nThen $$$n$$$ lines follow, each containing two integers $$$h_i, w_i$$$ ($$$1 \\leq h_i, w_i \\leq 1000$$$) — the height and width of the $$$i$$$-th rectangle.\nThen $$$q$$$ lines follow, each containing four integers $$$h_s, w_s, h_b, w_b$$$ ($$$1 \\leq h_s < h_b,\\ w_s < w_b \\leq 1000$$$) — the description of each query.\nThe sum of $$$q$$$ over all test cases does not exceed $$$10^5$$$, and the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "For each test case, output $$$q$$$ lines, the $$$i$$$-th line containing the answer to the $$$i$$$-th query.",
            "examples": [
                {
                    "input": [
                        "3",
                        "2 1",
                        "2 3",
                        "3 2",
                        "1 1 3 4",
                        "5 5",
                        "1 1",
                        "2 2",
                        "3 3",
                        "4 4",
                        "5 5",
                        "3 3 6 6",
                        "2 1 4 5",
                        "1 1 2 10",
                        "1 1 100 100",
                        "1 1 3 3",
                        "3 1",
                        "999 999",
                        "999 999",
                        "999 998",
                        "1 1 1000 1000"
                    ],
                    "output": [
                        "6",
                        "41",
                        "9",
                        "0",
                        "54",
                        "4",
                        "2993004"
                    ]
                }
            ],
            "notes": "In the first test case, there is only one query. We need to find the sum of areas of all rectangles that can fit a $$$1 \\times 1$$$ rectangle inside of it and fit into a $$$3 \\times 4$$$ rectangle.\nOnly the $$$2 \\times 3$$$ rectangle works, because $$$1 < 2$$$ (comparing heights) and $$$1 < 3$$$ (comparing widths), so the $$$1 \\times 1$$$ rectangle fits inside, and $$$2 < 3$$$ (comparing heights) and $$$3 < 4$$$ (comparing widths), so it fits inside the $$$3 \\times 4$$$ rectangle. The $$$3 \\times 2$$$ rectangle is too tall to fit in a $$$3 \\times 4$$$ rectangle. The total area is $$$2 \\cdot 3 = 6$$$."
        },
        "F": {
            "name": "F. L-shapes",
            "statement": "An L-shape is a figure on gridded paper that looks like the first four pictures below. An L-shape contains exactly three shaded cells (denoted by *), which can be rotated in any way.\nYou are given a rectangular grid. Determine if it contains L-shapes only, where L-shapes can't touch an edge or corner. More formally:\nEach shaded cell in the grid is part of exactly one L-shape, and  no two L-shapes are adjacent by edge or corner.\nFor example, the last two grids in the picture above do not satisfy the condition because the two L-shapes touch by corner and edge, respectively.",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 50$$$) — the number of rows and columns in the grid, respectively.\nThen $$$n$$$ lines follow, each containing $$$m$$$ characters. Each of these characters is either '.' or '*' — an empty cell or a shaded cell, respectively.",
            "output_format": "For each test case, output \"YES\" if the grid is made up of L-shape that don't share edges or corners, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "10",
                        "6 10",
                        "........**",
                        ".**......*",
                        "..*..*....",
                        ".....**...",
                        "...*.....*",
                        "..**....**",
                        "6 10",
                        "....*...**",
                        ".**......*",
                        "..*..*....",
                        ".....**...",
                        "...*.....*",
                        "..**....**",
                        "3 3",
                        "...",
                        "***",
                        "...",
                        "4 4",
                        ".*..",
                        "**..",
                        "..**",
                        "..*.",
                        "5 4",
                        ".*..",
                        "**..",
                        "....",
                        "..**",
                        "..*.",
                        "3 2",
                        ".*",
                        "**",
                        "*.",
                        "2 3",
                        "*..",
                        ".**",
                        "3 2",
                        "..",
                        "**",
                        "*.",
                        "3 3",
                        ".**",
                        "*.*",
                        "**.",
                        "3 3",
                        "..*",
                        ".**",
                        "..*"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": ""
        },
        "G": {
            "name": "G. Even-Odd XOR",
            "statement": "Given an integer $$$n$$$, find any array $$$a$$$ of $$$n$$$ distinct nonnegative integers less than $$$2^{31}$$$ such that the bitwise XOR of the elements on odd indices equals the bitwise XOR of the elements on even indices.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 629$$$) — the number of test cases.\nThen $$$t$$$ lines follow, each containing a single integer $$$n$$$ $$$(3 \\leq n \\leq 2\\cdot10^5)$$$ — the length of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
            "output_format": "For each test case, output one line containing $$$n$$$ distinct integers that satisfy the conditions.\nIf there are multiple answers, you can output any of them.",
            "examples": [
                {
                    "input": [
                        "7",
                        "8",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "9"
                    ],
                    "output": [
                        "4 2 1 5 0 6 7 3",
                        "2 1 3",
                        "2 1 3 0",
                        "2 0 4 5 3",
                        "4 1 2 12 3 8",
                        "1 2 3 4 5 6 7",
                        "8 2 3 7 4 0 5 6 9"
                    ]
                }
            ],
            "notes": "In the first test case the XOR on odd indices is $$$4 \\oplus 1 \\oplus 0 \\oplus 7 = 2$$$ and the XOR on even indices is $$$2 \\oplus 5 \\oplus 6 \\oplus 3= 2$$$."
        }
    },
    "1703": {
        "A": {
            "name": "A. YES or YES?",
            "statement": "There is a string $$$s$$$ of length $$$3$$$, consisting of uppercase and lowercase English letters. Check if it is equal to \"YES\" (without quotes), where each letter can be in any case. For example, \"yES\", \"Yes\", \"yes\" are all allowable.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of testcases.\nThe description of each test consists of one line containing one string $$$s$$$ consisting of three characters. Each character of $$$s$$$ is either an uppercase or lowercase English letter.",
            "output_format": "For each test case, output \"YES\" (without quotes) if $$$s$$$ satisfies the condition, and \"NO\" (without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\" and \"Yes\" will be recognized as a positive response).",
            "examples": [
                {
                    "input": [
                        "10",
                        "YES",
                        "yES",
                        "yes",
                        "Yes",
                        "YeS",
                        "Noo",
                        "orZ",
                        "yEz",
                        "Yas",
                        "XES"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"
                    ]
                }
            ],
            "notes": "The first five test cases contain the strings \"YES\", \"yES\", \"yes\", \"Yes\", \"YeS\". All of these are equal to \"YES\", where each character is either uppercase or lowercase."
        },
        "B": {
            "name": "B. ICPC Balloons",
            "statement": "In an ICPC contest, balloons are distributed as follows:\nWhenever a team solves a problem, that team gets a balloon.  The first team to solve a problem gets an additional balloon.\nA contest has 26 problems, labelled $$$\\textsf{A}$$$, $$$\\textsf{B}$$$, $$$\\textsf{C}$$$, ..., $$$\\textsf{Z}$$$. You are given the order of solved problems in the contest, denoted as a string $$$s$$$, where the $$$i$$$-th character indicates that the problem $$$s_i$$$ has been solved by some team. No team will solve the same problem twice.\nDetermine the total number of balloons that the teams received. Note that some problems may be solved by none of the teams.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of testcases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the string.\nThe second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of uppercase English letters, denoting the order of solved problems.",
            "output_format": "For each test case, output a single integer — the total number of balloons that the teams received.",
            "examples": [
                {
                    "input": [
                        "6",
                        "3",
                        "ABA",
                        "1",
                        "A",
                        "3",
                        "ORZ",
                        "5",
                        "BAAAA",
                        "4",
                        "BKPT",
                        "10",
                        "CODEFORCES"
                    ],
                    "output": [
                        "5",
                        "2",
                        "6",
                        "7",
                        "8",
                        "17"
                    ]
                }
            ],
            "notes": "In the first test case, $$$5$$$ balloons are given out:\nIn the second test case, there is only one problem solved. The team who solved it receives $$$2$$$ balloons: one because they solved the problem, an an additional one because they are the first team to solve problem $$$\\textsf{A}$$$."
        },
        "C": {
            "name": "C. Cypher",
            "statement": "Luca has a cypher made up of a sequence of $$$n$$$ wheels, each with a digit $$$a_i$$$ written on it. On the $$$i$$$-th wheel, he made $$$b_i$$$ moves. Each move is one of two types:\nup move (denoted by $$$\\texttt{U}$$$): it increases the $$$i$$$-th digit by $$$1$$$. After applying the up move on $$$9$$$, it becomes $$$0$$$.  down move (denoted by $$$\\texttt{D}$$$): it decreases the $$$i$$$-th digit by $$$1$$$. After applying the down move on $$$0$$$, it becomes $$$9$$$.\nExample for $$$n=4$$$. The current sequence is 0 0 0 0.\nLuca knows the final sequence of wheels and the moves for each wheel. Help him find the original sequence and crack the cypher.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the number of wheels.\nThe second line contains $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 9$$$) — the digit shown on the $$$i$$$-th wheel after all moves have been performed.\nThen $$$n$$$ lines follow, the $$$i$$$-th of which contains the integer $$$b_i$$$ ($$$1 \\leq b_i \\leq 10$$$) and $$$b_i$$$ characters that are either $$$\\texttt{U}$$$ or $$$\\texttt{D}$$$ — the number of moves performed on the $$$i$$$-th wheel, and the moves performed. $$$\\texttt{U}$$$ and $$$\\texttt{D}$$$ represent an up move and a down move respectively.",
            "output_format": "For each test case, output $$$n$$$ space-separated digits  — the initial sequence of the cypher.",
            "examples": [
                {
                    "input": [
                        "3",
                        "3",
                        "9 3 1",
                        "3 DDD",
                        "4 UDUU",
                        "2 DU",
                        "2",
                        "0 9",
                        "9 DDDDDDDDD",
                        "9 UUUUUUUUU",
                        "5",
                        "0 5 9 8 3",
                        "10 UUUUUUUUUU",
                        "3 UUD",
                        "8 UUDUUDDD",
                        "10 UUDUUDUDDU",
                        "4 UUUU"
                    ],
                    "output": [
                        "2 1 1 ",
                        "9 0 ",
                        "0 4 9 6 9"
                    ]
                }
            ],
            "notes": "In the first test case, we can prove that initial sequence was $$$[2,1,1]$$$. In that case, the following moves were performed:"
        },
        "D": {
            "name": "D. Double Strings",
            "statement": "You are given $$$n$$$ strings $$$s_1, s_2, \\dots, s_n$$$ of length at most $$$\\mathbf{8}$$$.\nFor each string $$$s_i$$$, determine if there exist two strings $$$s_j$$$ and $$$s_k$$$ such that $$$s_i = s_j + s_k$$$. That is, $$$s_i$$$ is the concatenation of $$$s_j$$$ and $$$s_k$$$. Note that $$$j$$$ can be equal to $$$k$$$.\nRecall that the concatenation of strings $$$s$$$ and $$$t$$$ is $$$s + t = s_1 s_2 \\dots s_p t_1 t_2 \\dots t_q$$$, where $$$p$$$ and $$$q$$$ are the lengths of strings $$$s$$$ and $$$t$$$ respectively. For example, concatenation of \"code\" and \"forces\" is \"codeforces\".",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) — the number of strings.\nThen $$$n$$$ lines follow, the $$$i$$$-th of which contains non-empty string $$$s_i$$$ of length at most $$$\\mathbf{8}$$$, consisting of lowercase English letters. Among the given $$$n$$$ strings, there may be equal (duplicates).\nThe sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$.",
            "output_format": "For each test case, output a binary string of length $$$n$$$. The $$$i$$$-th bit should be $$$\\texttt{1}$$$ if there exist two strings $$$s_j$$$ and $$$s_k$$$ where $$$s_i = s_j + s_k$$$, and $$$\\texttt{0}$$$ otherwise. Note that $$$j$$$ can be equal to $$$k$$$.",
            "examples": [
                {
                    "input": [
                        "3",
                        "5",
                        "abab",
                        "ab",
                        "abc",
                        "abacb",
                        "c",
                        "3",
                        "x",
                        "xx",
                        "xxx",
                        "8",
                        "codeforc",
                        "es",
                        "codes",
                        "cod",
                        "forc",
                        "forces",
                        "e",
                        "code"
                    ],
                    "output": [
                        "10100",
                        "011",
                        "10100101"
                    ]
                }
            ],
            "notes": "In the first test case, we have the following:"
        },
        "E": {
            "name": "E. Mirror Grid",
            "statement": "You are given a square grid with $$$n$$$ rows and $$$n$$$ columns. Each cell contains either $$$0$$$ or $$$1$$$.\nIn an operation, you can select a cell of the grid and flip it (from $$$0 \\to 1$$$ or $$$1 \\to 0$$$). Find the minimum number of operations you need to obtain a square that remains the same when rotated $$$0^{\\circ}$$$, $$$90^{\\circ}$$$, $$$180^{\\circ}$$$ and $$$270^{\\circ}$$$.\nThe picture below shows an example of all rotations of a grid.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the size of the grid.\nThen $$$n$$$ lines follow, each with $$$n$$$ characters $$$a_{i,j}$$$ ($$$0 \\leq a_{i,j} \\leq 1$$$) — the number written in each cell.",
            "output_format": "For each test case output a single integer  — the minimum number of operations needed to make the square look the same rotated $$$0^{\\circ}$$$, $$$90^{\\circ}$$$, $$$180^{\\circ}$$$ and $$$270^{\\circ}$$$.",
            "examples": [
                {
                    "input": [
                        "5",
                        "3",
                        "010",
                        "110",
                        "010",
                        "1",
                        "0",
                        "5",
                        "11100",
                        "11011",
                        "01011",
                        "10011",
                        "11000",
                        "5",
                        "01000",
                        "10101",
                        "01010",
                        "00010",
                        "01001",
                        "5",
                        "11001",
                        "00000",
                        "11111",
                        "10110",
                        "01111"
                    ],
                    "output": [
                        "1",
                        "0",
                        "9",
                        "7",
                        "6"
                    ]
                }
            ],
            "notes": "In the first test case, we can perform one operations to make the grid $$$\\begin{matrix}0 & 1 & 0\\\\ 1 & 1 & \\color{red}{1}\\\\ 0 & 1 & 0\\end{matrix}$$$. Now, all rotations of the square are the same.\nIn the second test case, all rotations of the square are already the same, so we don't need any flips."
        },
        "F": {
            "name": "F. Yet Another Problem About Pairs Satisfying an Inequality",
            "statement": "You are given an array $$$a_1, a_2, \\dots a_n$$$. Count the number of pairs of indices $$$1 \\leq i, j \\leq n$$$ such that $$$a_i < i < a_j < j$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\leq a_i \\leq 10^9$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of pairs of indices satisfying the condition in the statement.\nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "examples": [
                {
                    "input": [
                        "5",
                        "8",
                        "1 1 2 3 8 2 1 4",
                        "2",
                        "1 2",
                        "10",
                        "0 2 1 6 3 4 1 2 8 3",
                        "2",
                        "1 1000000000",
                        "3",
                        "0 1000000000 2"
                    ],
                    "output": [
                        "3",
                        "0",
                        "10",
                        "0",
                        "1"
                    ]
                }
            ],
            "notes": "For the first test cases the pairs are $$$(i, j)$$$ = $$$\\{(2, 4), (2, 8), (3, 8)\\}$$$."
        },
        "G": {
            "name": "G. Good Key, Bad Key",
            "statement": "There are $$$n$$$ chests. The $$$i$$$-th chest contains $$$a_i$$$ coins. You need to open all $$$n$$$ chests in order from chest $$$1$$$ to chest $$$n$$$.\nThere are two types of keys you can use to open a chest:\na good key, which costs $$$k$$$ coins to use;  a bad key, which does not cost any coins, but will halve all the coins in each unopened chest, including the chest it is about to open. The halving operation will round down to the nearest integer for each chest halved. In other words using a bad key to open chest $$$i$$$ will do $$$a_i = \\lfloor{\\frac{a_i}{2}\\rfloor}$$$, $$$a_{i+1} = \\lfloor\\frac{a_{i+1}}{2}\\rfloor, \\dots, a_n = \\lfloor \\frac{a_n}{2}\\rfloor$$$;  any key (both good and bad) breaks after a usage, that is, it is a one-time use.\nYou need to use in total $$$n$$$ keys, one for each chest. Initially, you have no coins and no keys. If you want to use a good key, then you need to buy it.\nDuring the process, you are allowed to go into debt; for example, if you have $$$1$$$ coin, you are allowed to buy a good key worth $$$k=3$$$ coins, and your balance will become $$$-2$$$ coins.\nFind the maximum number of coins you can have after opening all $$$n$$$ chests in order from chest $$$1$$$ to chest $$$n$$$.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 10^5$$$; $$$0 \\leq k \\leq 10^9$$$) — the number of chests and the cost of a good key respectively.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 10^9$$$)  — the amount of coins in each chest.\nThe sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "For each test case output a single integer  — the maximum number of coins you can obtain after opening the chests in order from chest $$$1$$$ to chest $$$n$$$.\nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "examples": [
                {
                    "input": [
                        "5",
                        "4 5",
                        "10 10 3 1",
                        "1 2",
                        "1",
                        "3 12",
                        "10 10 29",
                        "12 51",
                        "5 74 89 45 18 69 67 67 11 96 23 59",
                        "2 57",
                        "85 60"
                    ],
                    "output": [
                        "11",
                        "0",
                        "13",
                        "60",
                        "58"
                    ]
                }
            ],
            "notes": "In the first test case, one possible strategy is as follows:"
        }
    },
    "1692": {
        "A": {
            "name": "A. Marathon",
            "statement": "You are given four distinct integers $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$.\nTimur and three other people are running a marathon. The value $$$a$$$ is the distance that Timur has run and $$$b$$$, $$$c$$$, $$$d$$$ correspond to the distances the other three participants ran.\nOutput the number of participants in front of Timur.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe description of each test case consists of four distinct integers $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$ ($$$0 \\leq a, b, c, d \\leq 10^4$$$).",
            "output_format": "For each test case, output a single integer — the number of participants in front of Timur.",
            "examples": [
                {
                    "input": [
                        "4",
                        "2 3 4 1",
                        "10000 0 1 2",
                        "500 600 400 300",
                        "0 9999 10000 9998"
                    ],
                    "output": [
                        "2",
                        "0",
                        "1",
                        "3"
                    ]
                }
            ],
            "notes": "For the first test case, there are $$$2$$$ people in front of Timur, specifically the participants who ran distances of $$$3$$$ and $$$4$$$. The other participant is not in front of Timur because he ran a shorter distance than Timur.\nFor the second test case, no one is in front of Timur, since he ran a distance of $$$10000$$$ while all others ran a distance of $$$0$$$, $$$1$$$, and $$$2$$$ respectively.\nFor the third test case, only the second person is in front of Timur, who ran a total distance of $$$600$$$ while Timur ran a distance of $$$500$$$."
        },
        "B": {
            "name": "B. All Distinct",
            "statement": "Sho has an array $$$a$$$ consisting of $$$n$$$ integers. An operation consists of choosing two distinct indices $$$i$$$ and $$$j$$$ and removing $$$a_i$$$ and $$$a_j$$$ from the array.\nFor example, for the array $$$[2, 3, 4, 2, 5]$$$, Sho can choose to remove indices $$$1$$$ and $$$3$$$. After this operation, the array becomes $$$[3, 2, 5]$$$. Note that after any operation, the length of the array is reduced by two.\nAfter he made some operations, Sho has an array that has only distinct elements. In addition, he made operations such that the resulting array is the longest possible.\nMore formally, the array after Sho has made his operations respects these criteria:\nNo pairs such that ($$$i < j$$$) and $$$a_i = a_j$$$ exist.  The length of $$$a$$$ is maximized.\nOutput the length of the final array.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^4$$$) — the elements of the array.",
            "output_format": "For each test case, output a single integer — the length of the final array. Remember that in the final array, all elements are different, and its length is maximum.",
            "examples": [
                {
                    "input": [
                        "4",
                        "6",
                        "2 2 2 3 3 3",
                        "5",
                        "9 1 9 9 1",
                        "4",
                        "15 16 16 15",
                        "4",
                        "10 100 1000 10000"
                    ],
                    "output": [
                        "2",
                        "1",
                        "2",
                        "4"
                    ]
                }
            ],
            "notes": "For the first test case Sho can perform operations as follows:\nFor the second test case Sho can perform operations as follows:"
        },
        "C": {
            "name": "C. Where's the Bishop?",
            "statement": "Mihai has an $$$8 \\times 8$$$ chessboard whose rows are numbered from $$$1$$$ to $$$8$$$ from top to bottom and whose columns are numbered from $$$1$$$ to $$$8$$$ from left to right.\nMihai has placed exactly one bishop on the chessboard. The bishop is not placed on the edges of the board. (In other words, the row and column of the bishop are between $$$2$$$ and $$$7$$$, inclusive.)\nThe bishop attacks in all directions diagonally, and there is no limit to the distance which the bishop can attack. Note that the cell on which the bishop is placed is also considered attacked.\nAn example of a bishop on a chessboard. The squares it attacks are marked in red.\nMihai has marked all squares the bishop attacks, but forgot where the bishop was! Help Mihai find the position of the bishop.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 36$$$) — the number of test cases. The description of test cases follows. There is an empty line before each test case.\nEach test case consists of $$$8$$$ lines, each containing $$$8$$$ characters. Each of these characters is either '#' or '.', denoting a square under attack and a square not under attack, respectively.",
            "output_format": "For each test case, output two integers $$$r$$$ and $$$c$$$ ($$$2 \\leq r, c \\leq 7$$$) — the row and column of the bishop.\nThe input is generated in such a way that there is always exactly one possible location of the bishop that is not on the edge of the board.",
            "examples": [
                {
                    "input": [
                        "3",
                        "",
                        ".....#..",
                        "#...#...",
                        ".#.#....",
                        "..#.....",
                        ".#.#....",
                        "#...#...",
                        ".....#..",
                        "......#.",
                        "",
                        "#.#.....",
                        ".#......",
                        "#.#.....",
                        "...#....",
                        "....#...",
                        ".....#..",
                        "......#.",
                        ".......#",
                        "",
                        ".#.....#",
                        "..#...#.",
                        "...#.#..",
                        "....#...",
                        "...#.#..",
                        "..#...#.",
                        ".#.....#",
                        "#......."
                    ],
                    "output": [
                        "4 3",
                        "2 2",
                        "4 5"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. Since the bishop lies in the intersection row $$$4$$$ and column $$$3$$$, the correct output is 4 3."
        },
        "D": {
            "name": "D. The Clock",
            "statement": "Victor has a 24-hour clock that shows the time in the format \"HH:MM\" (00 $$$\\le$$$ HH $$$\\le$$$ 23, 00 $$$\\le$$$ MM $$$\\le$$$ 59). He looks at the clock every $$$x$$$ minutes, and the clock is currently showing time $$$s$$$.\nHow many different palindromes will Victor see in total after looking at the clock every $$$x$$$ minutes, the first time being at time $$$s$$$?\nFor example, if the clock starts out as 03:12 and Victor looks at the clock every $$$360$$$ minutes (i.e. every $$$6$$$ hours), then he will see the times 03:12, 09:12, 15:12, 21:12, 03:12, and the times will continue to repeat. Here the time 21:12 is the only palindrome he will ever see, so the answer is $$$1$$$.\nA palindrome is a string that reads the same backward as forward. For example, the times 12:21, 05:50, 11:11 are palindromes but 13:13, 22:10, 02:22 are not.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of each test case follows.\nThe only line of each test case contains a string $$$s$$$ of length $$$5$$$ with the format \"HH:MM\" where \"HH\" is from \"00\" to \"23\" and \"MM\" is from \"00\" to \"59\" (both \"HH\" and \"MM\" have exactly two digits) and an integer $$$x$$$ ($$$1 \\leq x \\leq 1440$$$) — the number of minutes Victor takes to look again at the clock.",
            "output_format": "For each test case, output a single integer — the number of different palindromes Victor will see if he looks at the clock every $$$x$$$ minutes starting from time $$$s$$$.",
            "examples": [
                {
                    "input": [
                        "6",
                        "03:12 360",
                        "00:00 1",
                        "13:22 2",
                        "15:15 10",
                        "11:11 1440",
                        "22:30 27"
                    ],
                    "output": [
                        "1",
                        "16",
                        "10",
                        "0",
                        "1",
                        "1"
                    ]
                }
            ],
            "notes": "The first test case is explained in the statement."
        },
        "E": {
            "name": "E. Binary Deque",
            "statement": "Slavic has an array of length $$$n$$$ consisting only of zeroes and ones. In one operation, he removes either the first or the last element of the array.\nWhat is the minimum number of operations Slavic has to perform such that the total sum of the array is equal to $$$s$$$ after performing all the operations? In case the sum $$$s$$$ can't be obtained after any amount of operations, you should output -1.",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$ and $$$s$$$ ($$$1 \\leq n, s \\leq 2 \\cdot 10^5$$$) — the length of the array and the needed sum of elements.\nThe second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 1$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the minimum amount of operations required to have the total sum of the array equal to $$$s$$$, or -1 if obtaining an array with sum $$$s$$$ isn't possible.",
            "examples": [
                {
                    "input": [
                        "7",
                        "3 1",
                        "1 0 0",
                        "3 1",
                        "1 1 0",
                        "9 3",
                        "0 1 0 1 1 1 0 0 1",
                        "6 4",
                        "1 1 1 1 1 1",
                        "5 1",
                        "0 0 1 1 0",
                        "16 2",
                        "1 1 0 0 1 0 0 1 1 0 0 0 0 0 1 1",
                        "6 3",
                        "1 0 1 0 0 0"
                    ],
                    "output": [
                        "0",
                        "1",
                        "3",
                        "2",
                        "2",
                        "7",
                        "-1"
                    ]
                }
            ],
            "notes": "In the first test case, the sum of the whole array is $$$1$$$ from the beginning, so we don't have to make any operations.\nIn the second test case, the sum of the array is $$$2$$$ and we want it to be equal to $$$1$$$, so we should remove the first element. The array turns into $$$[1, 0]$$$, which has a sum equal to $$$1$$$.\nIn the third test case, the sum of the array is $$$5$$$ and we need it to be $$$3$$$. We can obtain such a sum by removing the first two elements and the last element, doing a total of three operations. The array turns into $$$[0, 1, 1, 1, 0, 0]$$$, which has a sum equal to $$$3$$$."
        },
        "F": {
            "name": "F. 3SUM",
            "statement": "Given an array $$$a$$$ of positive integers with length $$$n$$$, determine if there exist three distinct indices $$$i$$$, $$$j$$$, $$$k$$$ such that $$$a_i + a_j + a_k$$$ ends in the digit $$$3$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$3 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array.\nThe sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "Output $$$t$$$ lines, each of which contains the answer to the corresponding test case. Output \"YES\" if there exist three distinct indices $$$i$$$, $$$j$$$, $$$k$$$ satisfying the constraints in the statement, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "6",
                        "4",
                        "20 22 19 84",
                        "4",
                        "1 11 1 2022",
                        "4",
                        "1100 1100 1100 1111",
                        "5",
                        "12 34 56 78 90",
                        "4",
                        "1 9 8 4",
                        "6",
                        "16 38 94 25 18 99"
                    ],
                    "output": [
                        "YES",
                        "YES",
                        "NO",
                        "NO",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "In the first test case, you can select $$$i=1$$$, $$$j=4$$$, $$$k=3$$$. Then $$$a_1 + a_4 + a_3 = 20 + 84 + 19 = 123$$$, which ends in the digit $$$3$$$.\nIn the second test case, you can select $$$i=1$$$, $$$j=2$$$, $$$k=3$$$. Then $$$a_1 + a_2 + a_3 = 1 + 11 + 1 = 13$$$, which ends in the digit $$$3$$$.\nIn the third test case, it can be proven that no such $$$i$$$, $$$j$$$, $$$k$$$ exist. Note that $$$i=4$$$, $$$j=4$$$, $$$k=4$$$ is not a valid solution, since although $$$a_4 + a_4 + a_4 = 1111 + 1111 + 1111 = 3333$$$, which ends in the digit $$$3$$$, the indices need to be distinct.\nIn the fourth test case, it can be proven that no such $$$i$$$, $$$j$$$, $$$k$$$ exist.\nIn the fifth test case, you can select $$$i=4$$$, $$$j=3$$$, $$$k=1$$$. Then $$$a_4 + a_3 + a_1 = 4 + 8 + 1 = 13$$$, which ends in the digit $$$3$$$.\nIn the sixth test case, you can select $$$i=1$$$, $$$j=2$$$, $$$k=6$$$. Then $$$a_1 + a_2 + a_6 = 16 + 38 + 99 = 153$$$, which ends in the digit $$$3$$$."
        },
        "G": {
            "name": "G. 2^Sort",
            "statement": "Given an array $$$a$$$ of length $$$n$$$ and an integer $$$k$$$, find the number of indices $$$1 \\leq i \\leq n - k$$$ such that the subarray $$$[a_i, \\dots, a_{i+k}]$$$ with length $$$k+1$$$ (not with length $$$k$$$) has the following property:\nIf you multiply the first element by $$$2^0$$$, the second element by $$$2^1$$$, ..., and the ($$$k+1$$$)-st element by $$$2^k$$$, then this subarray is sorted in strictly increasing order.\nMore formally, count the number of indices $$$1 \\leq i \\leq n - k$$$ such that $$$$$$2^0 \\cdot a_i < 2^1 \\cdot a_{i+1} < 2^2 \\cdot a_{i+2} < \\dots < 2^k \\cdot a_{i+k}.$$$$$$",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains two integers $$$n$$$, $$$k$$$ ($$$3 \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq k < n$$$) — the length of the array and the number of inequalities.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array.\nThe sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of indices satisfying the condition in the statement.",
            "examples": [
                {
                    "input": [
                        "6",
                        "4 2",
                        "20 22 19 84",
                        "5 1",
                        "9 5 3 2 1",
                        "5 2",
                        "9 5 3 2 1",
                        "7 2",
                        "22 12 16 4 3 22 12",
                        "7 3",
                        "22 12 16 4 3 22 12",
                        "9 3",
                        "3 9 12 3 9 12 3 9 12"
                    ],
                    "output": [
                        "2",
                        "3",
                        "2",
                        "3",
                        "1",
                        "0"
                    ]
                }
            ],
            "notes": "In the first test case, both subarrays satisfy the condition:"
        },
        "H": {
            "name": "H. Gambling",
            "statement": "Marian is at a casino. The game at the casino works like this.\nBefore each round, the player selects a number between $$$1$$$ and $$$10^9$$$. After that, a dice with $$$10^9$$$ faces is rolled so that a random number between $$$1$$$ and $$$10^9$$$ appears. If the player guesses the number correctly their total money is doubled, else their total money is halved.\nMarian predicted the future and knows all the numbers $$$x_1, x_2, \\dots, x_n$$$ that the dice will show in the next $$$n$$$ rounds.\nHe will pick three integers $$$a$$$, $$$l$$$ and $$$r$$$ ($$$l \\leq r$$$). He will play $$$r-l+1$$$ rounds (rounds between $$$l$$$ and $$$r$$$ inclusive). In each of these rounds, he will guess the same number $$$a$$$. At the start (before the round $$$l$$$) he has $$$1$$$ dollar.\nMarian asks you to determine the integers $$$a$$$, $$$l$$$ and $$$r$$$ ($$$1 \\leq a \\leq 10^9$$$, $$$1 \\leq l \\leq r \\leq n$$$) such that he makes the most money at the end.\nNote that during halving and multiplying there is no rounding and there are no precision errors. So, for example during a game, Marian could have money equal to $$$\\dfrac{1}{1024}$$$, $$$\\dfrac{1}{128}$$$, $$$\\dfrac{1}{2}$$$, $$$1$$$, $$$2$$$, $$$4$$$, etc. (any value of $$$2^t$$$, where $$$t$$$ is an integer of any sign).",
            "input_format": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot 10^5$$$) — the number of rounds.\nThe second line of each test case contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$1 \\leq x_i \\leq 10^9$$$), where $$$x_i$$$ is the number that will fall on the dice in the $$$i$$$-th round.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, output three integers $$$a$$$, $$$l$$$, and $$$r$$$ such that Marian makes the most amount of money gambling with his strategy. If there are multiple answers, you may output any of them.",
            "examples": [
                {
                    "input": [
                        "4",
                        "5",
                        "4 4 3 4 4",
                        "5",
                        "11 1 11 1 11",
                        "1",
                        "1000000000",
                        "10",
                        "8 8 8 9 9 6 6 9 6 6"
                    ],
                    "output": [
                        "4 1 5",
                        "1 2 2",
                        "1000000000 1 1",
                        "6 6 10"
                    ]
                }
            ],
            "notes": "For the first test case, the best choice is $$$a=4$$$, $$$l=1$$$, $$$r=5$$$, and the game would go as follows.\nThere are many possible answers for the second test case, but it can be proven that Marian will not end up with more than $$$2$$$ dollars, so any choice with $$$l = r$$$ with the appropriate $$$a$$$ is acceptable."
        }
    },
    "1676": {
        "A": {
            "name": "A. Lucky?",
            "statement": "A ticket is a string consisting of six digits. A ticket is considered lucky if the sum of the first three digits is equal to the sum of the last three digits. Given a ticket, output if it is lucky or not. Note that a ticket can have leading zeroes.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of testcases.\nThe description of each test consists of one line containing one string consisting of six digits.",
            "output_format": "Output $$$t$$$ lines, each of which contains the answer to the corresponding test case. Output \"YES\" if the given ticket is lucky, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "5",
                        "213132",
                        "973894",
                        "045207",
                        "000000",
                        "055776"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "In the first test case, the sum of the first three digits is $$$2 + 1 + 3 = 6$$$ and the sum of the last three digits is $$$1 + 3 + 2 = 6$$$, they are equal so the answer is \"YES\".\nIn the second test case, the sum of the first three digits is $$$9 + 7 + 3 = 19$$$ and the sum of the last three digits is $$$8 + 9 + 4 = 21$$$, they are not equal so the answer is \"NO\".\nIn the third test case, the sum of the first three digits is $$$0 + 4 + 5 = 9$$$ and the sum of the last three digits is $$$2 + 0 + 7 = 9$$$, they are equal so the answer is \"YES\"."
        },
        "B": {
            "name": "B. Equal Candies",
            "statement": "There are $$$n$$$ boxes with different quantities of candies in each of them. The $$$i$$$-th box has $$$a_i$$$ candies inside.\nYou also have $$$n$$$ friends that you want to give the candies to, so you decided to give each friend a box of candies. But, you don't want any friends to get upset so you decided to eat some (possibly none) candies from each box so that all boxes have the same quantity of candies in them. Note that you may eat a different number of candies from different boxes and you cannot add candies to any of the boxes.\nWhat's the minimum total number of candies you have to eat to satisfy the requirements?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the number of boxes you have.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^7$$$) — the quantity of candies in each box.",
            "output_format": "For each test case, print a single integer denoting the minimum number of candies you have to eat to satisfy the requirements.",
            "examples": [
                {
                    "input": [
                        "5",
                        "5",
                        "1 2 3 4 5",
                        "6",
                        "1000 1000 5 1000 1000 1000",
                        "10",
                        "1 2 3 5 1 2 7 9 13 5",
                        "3",
                        "8 8 8",
                        "1",
                        "10000000"
                    ],
                    "output": [
                        "10",
                        "4975",
                        "38",
                        "0",
                        "0"
                    ]
                }
            ],
            "notes": "For the first test case, you can eat $$$1$$$ candy from the second box, $$$2$$$ candies from the third box, $$$3$$$ candies from the fourth box and $$$4$$$ candies from the fifth box. Now the boxes have $$$[1, 1, 1, 1, 1]$$$ candies in them and you ate $$$0 + 1 + 2 + 3 + 4 = 10$$$ candies in total so the answer is $$$10$$$.\nFor the second test case, the best answer is obtained by making all boxes contain $$$5$$$ candies in them, thus eating $$$995 + 995 + 0 + 995 + 995 + 995 = 4975$$$ candies in total."
        },
        "C": {
            "name": "C. Most Similar Words",
            "statement": "You are given $$$n$$$ words of equal length $$$m$$$, consisting of lowercase Latin alphabet letters. The $$$i$$$-th word is denoted $$$s_i$$$.\nIn one move you can choose any position in any single word and change the letter at that position to the previous or next letter in alphabetical order. For example:\nyou can change 'e' to 'd' or to 'f';  'a' can only be changed to 'b';  'z' can only be changed to 'y'.\nThe difference between two words is the minimum number of moves required to make them equal. For example, the difference between \"best\" and \"cost\" is $$$1 + 10 + 0 + 0 = 11$$$.\nFind the minimum difference of $$$s_i$$$ and $$$s_j$$$ such that $$$(i < j)$$$. In other words, find the minimum difference over all possible pairs of the $$$n$$$ words.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains $$$2$$$ integers $$$n$$$ and $$$m$$$ ($$$2 \\leq n \\leq 50$$$, $$$1 \\leq m \\leq 8$$$) — the number of strings and their length respectively.\nThen follows $$$n$$$ lines, the $$$i$$$-th of which containing a single string $$$s_i$$$ of length $$$m$$$, consisting of lowercase Latin letters.",
            "output_format": "For each test case, print a single integer — the minimum difference over all possible pairs of the given strings.",
            "examples": [
                {
                    "input": [
                        "6",
                        "2 4",
                        "best",
                        "cost",
                        "6 3",
                        "abb",
                        "zba",
                        "bef",
                        "cdu",
                        "ooo",
                        "zzz",
                        "2 7",
                        "aaabbbc",
                        "bbaezfe",
                        "3 2",
                        "ab",
                        "ab",
                        "ab",
                        "2 8",
                        "aaaaaaaa",
                        "zzzzzzzz",
                        "3 1",
                        "a",
                        "u",
                        "y"
                    ],
                    "output": [
                        "11",
                        "8",
                        "35",
                        "0",
                        "200",
                        "4"
                    ]
                }
            ],
            "notes": "For the second test case, one can show that the best pair is (\"abb\",\"bef\"), which has difference equal to $$$8$$$, which can be obtained in the following way: change the first character of the first string to 'b' in one move, change the second character of the second string to 'b' in $$$3$$$ moves and change the third character of the second string to 'b' in $$$4$$$ moves, thus making in total $$$1 + 3 + 4 = 8$$$ moves.\nFor the third test case, there is only one possible pair and it can be shown that the minimum amount of moves necessary to make the strings equal is $$$35$$$.\nFor the fourth test case, there is a pair of strings which is already equal, so the answer is $$$0$$$."
        },
        "D": {
            "name": "D. X-Sum",
            "statement": "Timur's grandfather gifted him a chessboard to practice his chess skills. This chessboard is a grid $$$a$$$ with $$$n$$$ rows and $$$m$$$ columns with each cell having a non-negative integer written on it.\nTimur's challenge is to place a bishop on the board such that the sum of all cells attacked by the bishop is maximal. The bishop attacks in all directions diagonally, and there is no limit to the distance which the bishop can attack. Note that the cell on which the bishop is placed is also considered attacked. Help him find the maximal sum he can get.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains the integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 200$$$, $$$1 \\leq m \\leq 200$$$).\nThe following $$$n$$$ lines contain $$$m$$$ integers each, the $$$j$$$-th element of the $$$i$$$-th line $$$a_{ij}$$$ is the number written in the $$$j$$$-th cell of the $$$i$$$-th row $$$(0\\leq a_{ij} \\leq 10^6)$$$\nIt is guaranteed that the sum of $$$n\\cdot m$$$ over all test cases does not exceed $$$4\\cdot10^4$$$.",
            "output_format": "For each test case output a single integer, the maximum sum over all possible placements of the bishop.",
            "examples": [
                {
                    "input": [
                        "4",
                        "4 4",
                        "1 2 2 1",
                        "2 4 2 4",
                        "2 2 3 1",
                        "2 4 2 4",
                        "2 1",
                        "1",
                        "0",
                        "3 3",
                        "1 1 1",
                        "1 1 1",
                        "1 1 1",
                        "3 3",
                        "0 1 1",
                        "1 0 1",
                        "1 1 0"
                    ],
                    "output": [
                        "20",
                        "1",
                        "5",
                        "3"
                    ]
                }
            ],
            "notes": "For the first test case here the best sum is achieved by the bishop being in this position:"
        },
        "E": {
            "name": "E. Eating Queries",
            "statement": "Timur has $$$n$$$ candies. The $$$i$$$-th candy has a quantity of sugar equal to $$$a_i$$$. So, by eating the $$$i$$$-th candy, Timur consumes a quantity of sugar equal to $$$a_i$$$.\nTimur will ask you $$$q$$$ queries regarding his candies. For the $$$j$$$-th query you have to answer what is the minimum number of candies he needs to eat in order to reach a quantity of sugar greater than or equal to $$$x_j$$$ or print -1 if it's not possible to obtain such a quantity. In other words, you should print the minimum possible $$$k$$$ such that after eating $$$k$$$ candies, Timur consumes a quantity of sugar of at least $$$x_j$$$ or say that no possible $$$k$$$ exists.\nNote that he can't eat the same candy twice and queries are independent of each other (Timur can use the same candy in different queries).",
            "input_format": "The first line of input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$)  — the number of test cases. The description of test cases follows.\nThe first line contains $$$2$$$ integers $$$n$$$ and $$$q$$$ ($$$1 \\leq n, q \\leq 1.5\\cdot10^5$$$) — the number of candies Timur has and the number of queries you have to print an answer for respectively.\nThe second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^4$$$) — the quantity of sugar in each of the candies respectively.\nThen $$$q$$$ lines follow.\nEach of the next $$$q$$$ lines contains a single integer $$$x_j$$$ ($$$1 \\leq x_j \\leq 2 \\cdot 10^9$$$) – the quantity Timur wants to reach for the given query.\nIt is guaranteed that the sum of $$$n$$$ and the sum of $$$q$$$ over all test cases do not exceed $$$1.5 \\cdot 10^5$$$.",
            "output_format": "For each test case output $$$q$$$ lines. For the $$$j$$$-th line output the number of candies Timur needs to eat in order to reach a quantity of sugar greater than or equal to $$$x_j$$$ or print -1 if it's not possible to obtain such a quantity.",
            "examples": [
                {
                    "input": [
                        "3",
                        "8 7",
                        "4 3 3 1 1 4 5 9",
                        "1",
                        "10",
                        "50",
                        "14",
                        "15",
                        "22",
                        "30",
                        "4 1",
                        "1 2 3 4",
                        "3",
                        "1 2",
                        "5",
                        "4",
                        "6"
                    ],
                    "output": [
                        "1",
                        "2",
                        "-1",
                        "2",
                        "3",
                        "4",
                        "8",
                        "1",
                        "1",
                        "-1"
                    ]
                }
            ],
            "notes": "For the first test case:\nFor the first query, Timur can eat any candy, and he will reach the desired quantity.\nFor the second query, Timur can reach a quantity of at least $$$10$$$ by eating the $$$7$$$-th and the $$$8$$$-th candies, thus consuming a quantity of sugar equal to $$$14$$$.\nFor the third query, there is no possible answer.\nFor the fourth query, Timur can reach a quantity of at least $$$14$$$ by eating the $$$7$$$-th and the $$$8$$$-th candies, thus consuming a quantity of sugar equal to $$$14$$$.\nFor the second test case:\nFor the only query of the second test case, we can choose the third candy from which Timur receives exactly $$$3$$$ sugar. It's also possible to obtain the same answer by choosing the fourth candy."
        },
        "F": {
            "name": "F. Longest Strike",
            "statement": "Given an array $$$a$$$ of length $$$n$$$ and an integer $$$k$$$, you are tasked to find any two numbers $$$l$$$ and $$$r$$$ ($$$l \\leq r$$$) such that:\nFor each $$$x$$$ $$$(l \\leq x \\leq r)$$$, $$$x$$$ appears in $$$a$$$ at least $$$k$$$ times (i.e. $$$k$$$ or more array elements are equal to $$$x$$$).  The value $$$r-l$$$ is maximized.\nIf no numbers satisfy the conditions, output -1.\nFor example, if $$$a=[11, 11, 12, 13, 13, 14, 14]$$$ and $$$k=2$$$, then:\nfor $$$l=12$$$, $$$r=14$$$ the first condition fails because $$$12$$$ does not appear at least $$$k=2$$$ times.  for $$$l=13$$$, $$$r=14$$$ the first condition holds, because $$$13$$$ occurs at least $$$k=2$$$ times in $$$a$$$ and $$$14$$$ occurs at least $$$k=2$$$ times in $$$a$$$.  for $$$l=11$$$, $$$r=11$$$ the first condition holds, because $$$11$$$ occurs at least $$$k=2$$$ times in $$$a$$$.\nA pair of $$$l$$$ and $$$r$$$ for which the first condition holds and $$$r-l$$$ is maximal is $$$l = 13$$$, $$$r = 14$$$.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains the integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\leq k \\leq n$$$) — the length of the array $$$a$$$ and the minimum amount of times each number in the range $$$[l, r]$$$ should appear respectively.\nThen a single line follows, containing $$$n$$$ integers describing the array $$$a$$$ ($$$1 \\leq a_i \\leq 10^9$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case output $$$2$$$ numbers, $$$l$$$ and $$$r$$$ that satisfy the conditions, or \"-1\" if no numbers satisfy the conditions.\nIf multiple answers exist, you can output any.",
            "examples": [
                {
                    "input": [
                        "4",
                        "7 2",
                        "11 11 12 13 13 14 14",
                        "5 1",
                        "6 3 5 2 1",
                        "6 4",
                        "4 3 4 3 3 4",
                        "14 2",
                        "1 1 2 2 2 3 3 3 3 4 4 4 4 4"
                    ],
                    "output": [
                        "13 14",
                        "1 3",
                        "-1",
                        "1 4"
                    ]
                }
            ],
            "notes": ""
        },
        "G": {
            "name": "G. White-Black Balanced Subtrees",
            "statement": "You are given a rooted tree consisting of $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$. The root is vertex $$$1$$$. There is also a string $$$s$$$ denoting the color of each vertex: if $$$s_i = \\texttt{B}$$$, then vertex $$$i$$$ is black, and if $$$s_i = \\texttt{W}$$$, then vertex $$$i$$$ is white.\nA subtree of the tree is called balanced if the number of white vertices equals the number of black vertices. Count the number of balanced subtrees.\nA tree is a connected undirected graph without cycles. A rooted tree is a tree with a selected vertex, which is called the root. In this problem, all trees have root $$$1$$$.\nThe tree is specified by an array of parents $$$a_2, \\dots, a_n$$$ containing $$$n-1$$$ numbers: $$$a_i$$$ is the parent of the vertex with the number $$$i$$$ for all $$$i = 2, \\dots, n$$$. The parent of a vertex $$$u$$$ is a vertex that is the next vertex on a simple path from $$$u$$$ to the root.\nThe subtree of a vertex $$$u$$$ is the set of all vertices that pass through $$$u$$$ on a simple path to the root. For example, in the picture below, $$$7$$$ is in the subtree of $$$3$$$ because the simple path $$$7 \\to 5 \\to 3 \\to 1$$$ passes through $$$3$$$. Note that a vertex is included in its subtree, and the subtree of the root is the entire tree.\nThe picture shows the tree for $$$n=7$$$, $$$a=[1,1,2,3,3,5]$$$, and $$$s=\\texttt{WBBWWBW}$$$. The subtree at the vertex $$$3$$$ is balanced.",
            "input_format": "The first line of input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\le n \\le 4000$$$) — the number of vertices in the tree.\nThe second line of each test case contains $$$n-1$$$ integers $$$a_2, \\dots, a_n$$$ ($$$1 \\le a_i < i$$$) — the parents of the vertices $$$2, \\dots, n$$$.\nThe third line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of the characters $$$\\texttt{B}$$$ and $$$\\texttt{W}$$$ — the coloring of the tree.\nIt is guaranteed that the sum of the values $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the number of balanced subtrees.",
            "examples": [
                {
                    "input": [
                        "3",
                        "7",
                        "1 1 2 3 3 5",
                        "WBBWWBW",
                        "2",
                        "1",
                        "BW",
                        "8",
                        "1 2 3 4 5 6 7",
                        "BWBWBWBW"
                    ],
                    "output": [
                        "2",
                        "1",
                        "4"
                    ]
                }
            ],
            "notes": "The first test case is pictured in the statement. Only the subtrees at vertices $$$2$$$ and $$$3$$$ are balanced.\nIn the second test case, only the subtree at vertex $$$1$$$ is balanced.\nIn the third test case, only the subtrees at vertices $$$1$$$, $$$3$$$, $$$5$$$, and $$$7$$$ are balanced."
        },
        "H1": {
            "name": "H1. Maximum Crossings (Easy Version)",
            "statement": "The only difference between the two versions is that in this version $$$n \\leq 1000$$$ and the sum of $$$n$$$ over all test cases does not exceed $$$1000$$$.\nA terminal is a row of $$$n$$$ equal segments numbered $$$1$$$ to $$$n$$$ in order. There are two terminals, one above the other.\nYou are given an array $$$a$$$ of length $$$n$$$. For all $$$i = 1, 2, \\dots, n$$$, there should be a straight wire from some point on segment $$$i$$$ of the top terminal to some point on segment $$$a_i$$$ of the bottom terminal. You can't select the endpoints of a segment. For example, the following pictures show two possible wirings if $$$n=7$$$ and $$$a=[4,1,4,6,7,7,5]$$$.\nA crossing occurs when two wires share a point in common. In the picture above, crossings are circled in red.\nWhat is the maximum number of crossings there can be if you place the wires optimally?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 1000$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — the elements of the array.\nThe sum of $$$n$$$ across all test cases does not exceed $$$1000$$$.",
            "output_format": "For each test case, output a single integer — the maximum number of crossings there can be if you place the wires optimally.",
            "examples": [
                {
                    "input": [
                        "4",
                        "7",
                        "4 1 4 6 7 7 5",
                        "2",
                        "2 1",
                        "1",
                        "1",
                        "3",
                        "2 2 2"
                    ],
                    "output": [
                        "6",
                        "1",
                        "0",
                        "3"
                    ]
                }
            ],
            "notes": "The first test case is shown in the second picture in the statement.\nIn the second test case, the only wiring possible has the two wires cross, so the answer is $$$1$$$.\nIn the third test case, the only wiring possible has one wire, so the answer is $$$0$$$."
        },
        "H2": {
            "name": "H2. Maximum Crossings (Hard Version)",
            "statement": "The only difference between the two versions is that in this version $$$n \\leq 2 \\cdot 10^5$$$ and the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.\nA terminal is a row of $$$n$$$ equal segments numbered $$$1$$$ to $$$n$$$ in order. There are two terminals, one above the other.\nYou are given an array $$$a$$$ of length $$$n$$$. For all $$$i = 1, 2, \\dots, n$$$, there should be a straight wire from some point on segment $$$i$$$ of the top terminal to some point on segment $$$a_i$$$ of the bottom terminal. You can't select the endpoints of a segment. For example, the following pictures show two possible wirings if $$$n=7$$$ and $$$a=[4,1,4,6,7,7,5]$$$.\nA crossing occurs when two wires share a point in common. In the picture above, crossings are circled in red.\nWhat is the maximum number of crossings there can be if you place the wires optimally?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — the elements of the array.\nThe sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single integer — the maximum number of crossings there can be if you place the wires optimally.",
            "examples": [
                {
                    "input": [
                        "4",
                        "7",
                        "4 1 4 6 7 7 5",
                        "2",
                        "2 1",
                        "1",
                        "1",
                        "3",
                        "2 2 2"
                    ],
                    "output": [
                        "6",
                        "1",
                        "0",
                        "3"
                    ]
                }
            ],
            "notes": "The first test case is shown in the second picture in the statement.\nIn the second test case, the only wiring possible has the two wires cross, so the answer is $$$1$$$.\nIn the third test case, the only wiring possible has one wire, so the answer is $$$0$$$."
        }
    },
    "1669": {
        "A": {
            "name": "A. Division?",
            "statement": "Codeforces separates its users into $$$4$$$ divisions by their rating:\nFor Division 1: $$$1900 \\leq \\mathrm{rating}$$$  For Division 2: $$$1600 \\leq \\mathrm{rating} \\leq 1899$$$  For Division 3: $$$1400 \\leq \\mathrm{rating} \\leq 1599$$$  For Division 4: $$$\\mathrm{rating} \\leq 1399$$$\nGiven a $$$\\mathrm{rating}$$$, print in which division the $$$\\mathrm{rating}$$$ belongs.",
            "input_format": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of testcases.\nThe description of each test consists of one line containing one integer $$$\\mathrm{rating}$$$ ($$$-5000 \\leq \\mathrm{rating} \\leq 5000$$$).",
            "output_format": "For each test case, output a single line containing the correct division in the format \"Division X\", where $$$X$$$ is an integer between $$$1$$$ and $$$4$$$ representing the division for the corresponding rating.",
            "examples": [
                {
                    "input": [
                        "7",
                        "-789",
                        "1299",
                        "1300",
                        "1399",
                        "1400",
                        "1679",
                        "2300"
                    ],
                    "output": [
                        "Division 4",
                        "Division 4",
                        "Division 4",
                        "Division 4",
                        "Division 3",
                        "Division 2",
                        "Division 1"
                    ]
                }
            ],
            "notes": "For test cases $$$1-4$$$, the corresponding ratings are $$$-789$$$, $$$1299$$$, $$$1300$$$, $$$1399$$$, so all of them are in division $$$4$$$.\nFor the fifth test case, the corresponding rating is $$$1400$$$, so it is in division $$$3$$$.\nFor the sixth test case, the corresponding rating is $$$1679$$$, so it is in division $$$2$$$.\nFor the seventh test case, the corresponding rating is $$$2300$$$, so it is in division $$$1$$$."
        },
        "B": {
            "name": "B. Triple",
            "statement": "Given an array $$$a$$$ of $$$n$$$ elements, print any value that appears at least three times or print -1 if there is no such value.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — the elements of the array.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, print any value that appears at least three times or print -1 if there is no such value.",
            "examples": [
                {
                    "input": [
                        "7",
                        "1",
                        "1",
                        "3",
                        "2 2 2",
                        "7",
                        "2 2 3 3 4 2 2",
                        "8",
                        "1 4 3 4 3 2 4 1",
                        "9",
                        "1 1 1 2 2 2 3 3 3",
                        "5",
                        "1 5 2 4 3",
                        "4",
                        "4 4 4 4"
                    ],
                    "output": [
                        "-1",
                        "2",
                        "2",
                        "4",
                        "3",
                        "-1",
                        "4"
                    ]
                }
            ],
            "notes": "In the first test case there is just a single element, so it can't occur at least three times and the answer is -1.\nIn the second test case, all three elements of the array are equal to $$$2$$$, so $$$2$$$ occurs three times, and so the answer is $$$2$$$.\nFor the third test case, $$$2$$$ occurs four times, so the answer is $$$2$$$.\nFor the fourth test case, $$$4$$$ occurs three times, so the answer is $$$4$$$.\nFor the fifth test case, $$$1$$$, $$$2$$$ and $$$3$$$ all occur at least three times, so they are all valid outputs.\nFor the sixth test case, all elements are distinct, so none of them occurs at least three times and the answer is -1."
        },
        "C": {
            "name": "C. Odd/Even Increments",
            "statement": "Given an array $$$a=[a_1,a_2,\\dots,a_n]$$$ of $$$n$$$ positive integers, you can do operations of two types on it:\nAdd $$$1$$$ to every element with an odd index. In other words change the array as follows: $$$a_1 := a_1 +1, a_3 := a_3 + 1, a_5 := a_5+1, \\dots$$$.  Add $$$1$$$ to every element with an even index. In other words change the array as follows: $$$a_2 := a_2 +1, a_4 := a_4 + 1, a_6 := a_6+1, \\dots$$$.\nDetermine if after any number of operations it is possible to make the final array contain only even numbers or only odd numbers. In other words, determine if you can make all elements of the array have the same parity after any number of operations.\nNote that you can do operations of both types any number of times (even none). Operations of different types can be performed a different number of times.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 50$$$) — the length of the array.\nThe second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^3$$$) — the elements of the array.\nNote that after the performed operations the elements in the array can become greater than $$$10^3$$$.",
            "output_format": "Output $$$t$$$ lines, each of which contains the answer to the corresponding test case. As an answer, output \"YES\" if after any number of operations it is possible to make the final array contain only even numbers or only odd numbers, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "4",
                        "3",
                        "1 2 1",
                        "4",
                        "2 2 2 3",
                        "4",
                        "2 2 2 2",
                        "5",
                        "1000 1 1000 1 1000"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "YES",
                        "YES"
                    ]
                }
            ],
            "notes": "For the first test case, we can increment the elements with an even index, obtaining the array $$$[1, 3, 1]$$$, which contains only odd numbers, so the answer is \"YES\".\nFor the second test case, we can show that after performing any number of operations we won't be able to make all elements have the same parity, so the answer is \"NO\".\nFor the third test case, all elements already have the same parity so the answer is \"YES\".\nFor the fourth test case, we can perform one operation and increase all elements at odd positions by $$$1$$$, thus obtaining the array $$$[1001, 1, 1001, 1, 1001]$$$, and all elements become odd so the answer is \"YES\"."
        },
        "D": {
            "name": "D. Colorful Stamp",
            "statement": "A row of $$$n$$$ cells is given, all initially white. Using a stamp, you can stamp any two neighboring cells such that one becomes red and the other becomes blue. A stamp can be rotated, i.e. it can be used in both ways: as $$$\\color{blue}{\\texttt{B}}\\color{red}{\\texttt{R}}$$$ and as $$$\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}$$$.\nDuring use, the stamp must completely fit on the given $$$n$$$ cells (it cannot be partially outside the cells). The stamp can be applied multiple times to the same cell. Each usage of the stamp recolors both cells that are under the stamp.\nFor example, one possible sequence of stamps to make the picture $$$\\color{blue}{\\texttt{B}}\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}\\color{blue}{\\texttt{B}}\\texttt{W}$$$ could be $$$\\texttt{WWWWW} \\to \\texttt{WW}\\color{brown}{\\underline{\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}}}\\texttt{W} \\to \\color{brown}{\\underline{\\color{blue}{\\texttt{B}}\\color{red}{\\texttt{R}}}}\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}\\texttt{W} \\to \\color{blue}{\\texttt{B}}\\color{brown}{\\underline{\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}}}\\color{blue}{\\texttt{B}}\\texttt{W}$$$. Here $$$\\texttt{W}$$$, $$$\\color{red}{\\texttt{R}}$$$, and $$$\\color{blue}{\\texttt{B}}$$$ represent a white, red, or blue cell, respectively, and the cells that the stamp is used on are marked with an underline.\nGiven a final picture, is it possible to make it using the stamp zero or more times?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) — the length of the picture.\nThe second line of each test case contains a string $$$s$$$ — the picture you need to make. It is guaranteed that the length of $$$s$$$ is $$$n$$$ and that $$$s$$$ only consists of the characters $$$\\texttt{W}$$$, $$$\\texttt{R}$$$, and $$$\\texttt{B}$$$, representing a white, red, or blue cell, respectively.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "Output $$$t$$$ lines, each of which contains the answer to the corresponding test case. As an answer, output \"YES\" if it possible to make the picture using the stamp zero or more times, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
            "examples": [
                {
                    "input": [
                        "12",
                        "5",
                        "BRBBW",
                        "1",
                        "B",
                        "2",
                        "WB",
                        "2",
                        "RW",
                        "3",
                        "BRB",
                        "3",
                        "RBB",
                        "7",
                        "WWWWWWW",
                        "9",
                        "RBWBWRRBW",
                        "10",
                        "BRBRBRBRRB",
                        "12",
                        "BBBRWWRRRWBR",
                        "10",
                        "BRBRBRBRBW",
                        "5",
                        "RBWBW"
                    ],
                    "output": [
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "YES",
                        "YES",
                        "YES",
                        "NO",
                        "YES",
                        "NO",
                        "YES",
                        "NO"
                    ]
                }
            ],
            "notes": "The first test case is explained in the statement.\nFor the second, third, and fourth test cases, it is not possible to stamp a single cell, so the answer is \"NO\".\nFor the fifth test case, you can use the stamp as follows: $$$\\texttt{WWW} \\to \\texttt{W}\\color{brown}{\\underline{\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}}} \\to \\color{brown}{\\underline{\\color{blue}{\\texttt{B}}\\color{red}{\\texttt{R}}}}\\color{blue}{\\texttt{B}}$$$.\nFor the sixth test case, you can use the stamp as follows: $$$\\texttt{WWW} \\to \\texttt{W}\\color{brown}{\\underline{\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}}} \\to \\color{brown}{\\underline{\\color{red}{\\texttt{R}}\\color{blue}{\\texttt{B}}}}\\color{blue}{\\texttt{B}}$$$.\nFor the seventh test case, you don't need to use the stamp at all."
        },
        "E": {
            "name": "E. 2-Letter Strings",
            "statement": "Given $$$n$$$ strings, each of length $$$2$$$, consisting of lowercase Latin alphabet letters from 'a' to 'k', output the number of pairs of indices $$$(i, j)$$$ such that $$$i < j$$$ and the $$$i$$$-th string and the $$$j$$$-th string differ in exactly one position.\nIn other words, count the number of pairs $$$(i, j)$$$ ($$$i < j$$$) such that the $$$i$$$-th string and the $$$j$$$-th string have exactly one position $$$p$$$ ($$$1 \\leq p \\leq 2$$$) such that $$${s_{i}}_{p} \\neq {s_{j}}_{p}$$$.\nThe answer may not fit into 32-bit integer type, so you should use 64-bit integers like long long in C++ to avoid integer overflow.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the number of strings.\nThen follows $$$n$$$ lines, the $$$i$$$-th of which containing a single string $$$s_i$$$ of length $$$2$$$, consisting of lowercase Latin letters from 'a' to 'k'.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
            "output_format": "For each test case, print a single integer — the number of pairs $$$(i, j)$$$ ($$$i < j$$$) such that the $$$i$$$-th string and the $$$j$$$-th string have exactly one position $$$p$$$ ($$$1 \\leq p \\leq 2$$$) such that $$${s_{i}}_{p} \\neq {s_{j}}_{p}$$$.\nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
            "examples": [
                {
                    "input": [
                        "4",
                        "6",
                        "ab",
                        "cb",
                        "db",
                        "aa",
                        "cc",
                        "ef",
                        "7",
                        "aa",
                        "bb",
                        "cc",
                        "ac",
                        "ca",
                        "bb",
                        "aa",
                        "4",
                        "kk",
                        "kk",
                        "ab",
                        "ab",
                        "5",
                        "jf",
                        "jf",
                        "jk",
                        "jk",
                        "jk"
                    ],
                    "output": [
                        "5",
                        "6",
                        "0",
                        "6"
                    ]
                }
            ],
            "notes": "For the first test case the pairs that differ in exactly one position are: (\"ab\", \"cb\"), (\"ab\", \"db\"), (\"ab\", \"aa\"), (\"cb\", \"db\") and (\"cb\", \"cc\").\nFor the second test case the pairs that differ in exactly one position are: (\"aa\", \"ac\"), (\"aa\", \"ca\"), (\"cc\", \"ac\"), (\"cc\", \"ca\"), (\"ac\", \"aa\") and (\"ca\", \"aa\").\nFor the third test case, the are no pairs satisfying the conditions."
        },
        "F": {
            "name": "F. Eating Candies",
            "statement": "There are $$$n$$$ candies put from left to right on a table. The candies are numbered from left to right. The $$$i$$$-th candy has weight $$$w_i$$$. Alice and Bob eat candies.\nAlice can eat any number of candies from the left (she can't skip candies, she eats them in a row).\nBob can eat any number of candies from the right (he can't skip candies, he eats them in a row).\nOf course, if Alice ate a candy, Bob can't eat it (and vice versa).\nThey want to be fair. Their goal is to eat the same total weight of candies. What is the most number of candies they can eat in total?",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases.\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the number of candies on the table.\nThe second line of each test case contains $$$n$$$ integers $$$w_1, w_2, \\dots, w_n$$$ ($$$1 \\leq w_i \\leq 10^4$$$) — the weights of candies from left to right.\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each test case, print a single integer — the maximum number of candies Alice and Bob can eat in total while satisfying the condition.",
            "examples": [
                {
                    "input": [
                        "4",
                        "3",
                        "10 20 10",
                        "6",
                        "2 1 4 2 4 1",
                        "5",
                        "1 2 4 8 16",
                        "9",
                        "7 3 20 5 15 1 11 8 10"
                    ],
                    "output": [
                        "2",
                        "6",
                        "0",
                        "7"
                    ]
                }
            ],
            "notes": "For the first test case, Alice will eat one candy from the left and Bob will eat one candy from the right. There is no better way for them to eat the same total amount of weight. The answer is $$$2$$$ because they eat two candies in total.\nFor the second test case, Alice will eat the first three candies from the left (with total weight $$$7$$$) and Bob will eat the first three candies from the right (with total weight $$$7$$$). They cannot eat more candies since all the candies have been eaten, so the answer is $$$6$$$ (because they eat six candies in total).\nFor the third test case, there is no way Alice and Bob will eat the same non-zero weight so the answer is $$$0$$$.\nFor the fourth test case, Alice will eat candies with weights $$$[7, 3, 20]$$$ and Bob will eat candies with weights $$$[10, 8, 11, 1]$$$, they each eat $$$30$$$ weight. There is no better partition so the answer is $$$7$$$."
        },
        "G": {
            "name": "G. Fall Down",
            "statement": "There is a grid with $$$n$$$ rows and $$$m$$$ columns, and three types of cells:\nAn empty cell, denoted with '.'.  A stone, denoted with '*'.  An obstacle, denoted with the lowercase Latin letter 'o'.\nAll stones fall down until they meet the floor (the bottom row), an obstacle, or other stone which is already immovable. (In other words, all the stones just fall down as long as they can fall.)\nSimulate the process. What does the resulting grid look like?",
            "input_format": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 50$$$) — the number of rows and the number of columns in the grid, respectively.\nThen $$$n$$$ lines follow, each containing $$$m$$$ characters. Each of these characters is either '.', '*', or 'o' — an empty cell, a stone, or an obstacle, respectively.",
            "output_format": "For each test case, output a grid with $$$n$$$ rows and $$$m$$$ columns, showing the result of the process.\nYou don't need to output a new line after each test, it is in the samples just for clarity.",
            "examples": [
                {
                    "input": [
                        "3",
                        "6 10",
                        ".*.*....*.",
                        ".*.......*",
                        "...o....o.",
                        ".*.*....*.",
                        "..........",
                        ".o......o*",
                        "2 9",
                        "...***ooo",
                        ".*o.*o.*o",
                        "5 5",
                        "*****",
                        "*....",
                        "*****",
                        "....*",
                        "*****"
                    ],
                    "output": [
                        "..........",
                        "...*....*.",
                        ".*.o....o.",
                        ".*........",
                        ".*......**",
                        ".o.*....o*",
                        "",
                        "....**ooo",
                        ".*o**o.*o",
                        "",
                        ".....",
                        "*...*",
                        "*****",
                        "*****",
                        "*****"
                    ]
                }
            ],
            "notes": ""
        },
        "H": {
            "name": "H. Maximal AND",
            "statement": "Let $$$\\mathsf{AND}$$$ denote the bitwise AND operation, and $$$\\mathsf{OR}$$$ denote the bitwise OR operation.\nYou are given an array $$$a$$$ of length $$$n$$$ and a non-negative integer $$$k$$$. You can perform at most $$$k$$$ operations on the array of the following type:\nSelect an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and replace $$$a_i$$$ with $$$a_i$$$ $$$\\mathsf{OR}$$$ $$$2^j$$$ where $$$j$$$ is any integer between $$$0$$$ and $$$30$$$ inclusive. In other words, in an operation you can choose an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and set the $$$j$$$-th bit of $$$a_i$$$ to $$$1$$$ ($$$0 \\leq j \\leq 30$$$).\nOutput the maximum possible value of $$$a_1$$$ $$$\\mathsf{AND}$$$ $$$a_2$$$ $$$\\mathsf{AND}$$$ $$$\\dots$$$ $$$\\mathsf{AND}$$$ $$$a_n$$$ after performing at most $$$k$$$ operations.",
            "input_format": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains the integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$0 \\le k \\le 10^9$$$).\nThen a single line follows, containing $$$n$$$ integers describing the arrays $$$a$$$ ($$$0 \\leq a_i < 2^{31}$$$).\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
            "output_format": "For each test case, output a single line containing the maximum possible $$$\\mathsf{AND}$$$ value of $$$a_1$$$ $$$\\mathsf{AND}$$$ $$$a_2$$$ $$$\\mathsf{AND}$$$ $$$\\dots$$$ $$$\\mathsf{AND}$$$ $$$a_n$$$ after performing at most $$$k$$$ operations.",
            "examples": [
                {
                    "input": [
                        "4",
                        "3 2",
                        "2 1 1",
                        "7 0",
                        "4 6 6 28 6 6 12",
                        "1 30",
                        "0",
                        "4 4",
                        "3 1 3 1"
                    ],
                    "output": [
                        "2",
                        "4",
                        "2147483646",
                        "1073741825"
                    ]
                }
            ],
            "notes": "For the first test case, we can set the bit $$$1$$$ ($$$2^1$$$) of the last $$$2$$$ elements using the $$$2$$$ operations, thus obtaining the array [$$$2$$$, $$$3$$$, $$$3$$$], which has $$$\\mathsf{AND}$$$ value equal to $$$2$$$.\nFor the second test case, we can't perform any operations so the answer is just the $$$\\mathsf{AND}$$$ of the whole array which is $$$4$$$."
        }
    },
    "1352": {
        "A": {
            "name": "A. Sum of Round Numbers",
            "statement": "A positive (strictly greater than zero) integer is called round if it is of the form d00...0. In other words, a positive integer is round if all its digits except the leftmost (most significant) are equal to zero. In particular, all numbers from $$$1$$$ to $$$9$$$ (inclusive) are round.\nFor example, the following numbers are round: $$$4000$$$, $$$1$$$, $$$9$$$, $$$800$$$, $$$90$$$. The following numbers are not round: $$$110$$$, $$$707$$$, $$$222$$$, $$$1001$$$.\nYou are given a positive integer $$$n$$$ ($$$1 \\le n \\le 10^4$$$). Represent the number $$$n$$$ as a sum of round numbers using the minimum number of summands (addends). In other words, you need to represent the given number $$$n$$$ as a sum of the least number of terms, each of which is a round number.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the input. Then $$$t$$$ test cases follow.\nEach test case is a line containing an integer $$$n$$$ ($$$1 \\le n \\le 10^4$$$).",
            "output_format": "Print $$$t$$$ answers to the test cases. Each answer must begin with an integer $$$k$$$ — the minimum number of summands. Next, $$$k$$$ terms must follow, each of which is a round number, and their sum is $$$n$$$. The terms can be printed in any order. If there are several answers, print any of them.",
            "examples": [
                {
                    "input": [
                        "5",
                        "5009",
                        "7",
                        "9876",
                        "10000",
                        "10"
                    ],
                    "output": [
                        "2",
                        "5000 9",
                        "1",
                        "7 ",
                        "4",
                        "800 70 6 9000 ",
                        "1",
                        "10000 ",
                        "1",
                        "10"
                    ]
                }
            ],
            "notes": ""
        },
        "B": {
            "name": "B. Same Parity Summands",
            "statement": "You are given two positive integers $$$n$$$ ($$$1 \\le n \\le 10^9$$$) and $$$k$$$ ($$$1 \\le k \\le 100$$$). Represent the number $$$n$$$ as the sum of $$$k$$$ positive integers of the same parity (have the same remainder when divided by $$$2$$$).\nIn other words, find $$$a_1, a_2, \\ldots, a_k$$$ such that all $$$a_i>0$$$, $$$n = a_1 + a_2 + \\ldots + a_k$$$ and either all $$$a_i$$$ are even or all $$$a_i$$$ are odd at the same time.\nIf such a representation does not exist, then report it.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases in the input. Next, $$$t$$$ test cases are given, one per line.\nEach test case is two positive integers $$$n$$$ ($$$1 \\le n \\le 10^9$$$) and $$$k$$$ ($$$1 \\le k \\le 100$$$).",
            "output_format": "For each test case print:\nThe letters in the words YES and NO can be printed in any case.",
            "examples": [
                {
                    "input": [
                        "8",
                        "10 3",
                        "100 4",
                        "8 7",
                        "97 2",
                        "8 8",
                        "3 10",
                        "5 3",
                        "1000000000 9"
                    ],
                    "output": [
                        "YES",
                        "4 2 4",
                        "YES",
                        "55 5 5 35",
                        "NO",
                        "NO",
                        "YES",
                        "1 1 1 1 1 1 1 1",
                        "NO",
                        "YES",
                        "3 1 1",
                        "YES",
                        "111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120"
                    ]
                }
            ],
            "notes": ""
        },
        "C": {
            "name": "C. K-th Not Divisible by n",
            "statement": "You are given two positive integers $$$n$$$ and $$$k$$$. Print the $$$k$$$-th positive integer that is not divisible by $$$n$$$.\nFor example, if $$$n=3$$$, and $$$k=7$$$, then all numbers that are not divisible by $$$3$$$ are: $$$1, 2, 4, 5, 7, 8, 10, 11, 13 \\dots$$$. The $$$7$$$-th number among them is $$$10$$$.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases in the input. Next, $$$t$$$ test cases are given, one per line.\nEach test case is two positive integers $$$n$$$ ($$$2 \\le n \\le 10^9$$$) and $$$k$$$ ($$$1 \\le k \\le 10^9$$$).",
            "output_format": "For each test case print the $$$k$$$-th positive integer that is not divisible by $$$n$$$.",
            "examples": [
                {
                    "input": [
                        "6",
                        "3 7",
                        "4 12",
                        "2 1000000000",
                        "7 97",
                        "1000000000 1000000000",
                        "2 1"
                    ],
                    "output": [
                        "10",
                        "15",
                        "1999999999",
                        "113",
                        "1000000001",
                        "1"
                    ]
                }
            ],
            "notes": ""
        },
        "D": {
            "name": "D. Alice, Bob and Candies",
            "statement": "There are $$$n$$$ candies in a row, they are numbered from left to right from $$$1$$$ to $$$n$$$. The size of the $$$i$$$-th candy is $$$a_i$$$.\nAlice and Bob play an interesting and tasty game: they eat candy. Alice will eat candy from left to right, and Bob — from right to left. The game ends if all the candies are eaten.\nThe process consists of moves. During a move, the player eats one or more sweets from her/his side (Alice eats from the left, Bob — from the right).\nAlice makes the first move. During the first move, she will eat $$$1$$$ candy (its size is $$$a_1$$$). Then, each successive move the players alternate — that is, Bob makes the second move, then Alice, then again Bob and so on.\nOn each move, a player counts the total size of candies eaten during the current move. Once this number becomes strictly greater than the total size of candies eaten by the other player on their previous move, the current player stops eating and the move ends. In other words, on a move, a player eats the smallest possible number of candies such that the sum of the sizes of candies eaten on this move is strictly greater than the sum of the sizes of candies that the other player ate on the previous move. If there are not enough candies to make a move this way, then the player eats up all the remaining candies and the game ends.\nFor example, if $$$n=11$$$ and $$$a=[3,1,4,1,5,9,2,6,5,3,5]$$$, then:\nmove 1: Alice eats one candy of size $$$3$$$ and the sequence of candies becomes $$$[1,4,1,5,9,2,6,5,3,5]$$$.  move 2: Alice ate $$$3$$$ on the previous move, which means Bob must eat $$$4$$$ or more. Bob eats one candy of size $$$5$$$ and the sequence of candies becomes $$$[1,4,1,5,9,2,6,5,3]$$$.  move 3: Bob ate $$$5$$$ on the previous move, which means Alice must eat $$$6$$$ or more. Alice eats three candies with the total size of $$$1+4+1=6$$$ and the sequence of candies becomes $$$[5,9,2,6,5,3]$$$.  move 4: Alice ate $$$6$$$ on the previous move, which means Bob must eat $$$7$$$ or more. Bob eats two candies with the total size of $$$3+5=8$$$ and the sequence of candies becomes $$$[5,9,2,6]$$$.  move 5: Bob ate $$$8$$$ on the previous move, which means Alice must eat $$$9$$$ or more. Alice eats two candies with the total size of $$$5+9=14$$$ and the sequence of candies becomes $$$[2,6]$$$.  move 6 (the last): Alice ate $$$14$$$ on the previous move, which means Bob must eat $$$15$$$ or more. It is impossible, so Bob eats the two remaining candies and the game ends.\nPrint the number of moves in the game and two numbers:\n$$$a$$$ — the total size of all sweets eaten by Alice during the game;  $$$b$$$ — the total size of all sweets eaten by Bob during the game.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases in the input. The following are descriptions of the $$$t$$$ test cases.\nEach test case consists of two lines. The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 1000$$$) — the number of candies. The second line contains a sequence of integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 1000$$$) — the sizes of candies in the order they are arranged from left to right.\nIt is guaranteed that the sum of the values of $$$n$$$ for all sets of input data in a test does not exceed $$$2\\cdot10^5$$$.",
            "output_format": "For each set of input data print three integers — the number of moves in the game and the required values $$$a$$$ and $$$b$$$.",
            "examples": [
                {
                    "input": [
                        "7",
                        "11",
                        "3 1 4 1 5 9 2 6 5 3 5",
                        "1",
                        "1000",
                        "3",
                        "1 1 1",
                        "13",
                        "1 2 3 4 5 6 7 8 9 10 11 12 13",
                        "2",
                        "2 1",
                        "6",
                        "1 1 1 1 1 1",
                        "7",
                        "1 1 1 1 1 1 1"
                    ],
                    "output": [
                        "6 23 21",
                        "1 1000 0",
                        "2 1 2",
                        "6 45 46",
                        "2 2 1",
                        "3 4 2",
                        "4 4 3"
                    ]
                }
            ],
            "notes": ""
        },
        "E": {
            "name": "E. Special Elements",
            "statement": "Pay attention to the non-standard memory limit in this problem.\nIn order to cut off efficient solutions from inefficient ones in this problem, the time limit is rather strict. Prefer to use compiled statically typed languages (e.g. C++). If you use Python, then submit solutions on PyPy. Try to write an efficient solution.\nThe array $$$a=[a_1, a_2, \\ldots, a_n]$$$ ($$$1 \\le a_i \\le n$$$) is given. Its element $$$a_i$$$ is called special if there exists a pair of indices $$$l$$$ and $$$r$$$ ($$$1 \\le l < r \\le n$$$) such that $$$a_i = a_l + a_{l+1} + \\ldots + a_r$$$. In other words, an element is called special if it can be represented as the sum of two or more consecutive elements of an array (no matter if they are special or not).\nPrint the number of special elements of the given array $$$a$$$.\nFor example, if $$$n=9$$$ and $$$a=[3,1,4,1,5,9,2,6,5]$$$, then the answer is $$$5$$$:\n$$$a_3=4$$$ is a special element, since $$$a_3=4=a_1+a_2=3+1$$$;  $$$a_5=5$$$ is a special element, since $$$a_5=5=a_2+a_3=1+4$$$;  $$$a_6=9$$$ is a special element, since $$$a_6=9=a_1+a_2+a_3+a_4=3+1+4+1$$$;  $$$a_8=6$$$ is a special element, since $$$a_8=6=a_2+a_3+a_4=1+4+1$$$;  $$$a_9=5$$$ is a special element, since $$$a_9=5=a_2+a_3=1+4$$$.\nPlease note that some of the elements of the array $$$a$$$ may be equal — if several elements are equal and special, then all of them should be counted in the answer.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases in the input. Then $$$t$$$ test cases follow.\nEach test case is given in two lines. The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 8000$$$) — the length of the array $$$a$$$. The second line contains integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$).\nIt is guaranteed that the sum of the values of $$$n$$$ for all test cases in the input does not exceed $$$8000$$$.",
            "output_format": "Print $$$t$$$ numbers — the number of special elements for each of the given arrays.",
            "examples": [
                {
                    "input": [
                        "5",
                        "9",
                        "3 1 4 1 5 9 2 6 5",
                        "3",
                        "1 1 2",
                        "5",
                        "1 1 1 1 1",
                        "8",
                        "8 7 6 5 4 3 2 1",
                        "1",
                        "1"
                    ],
                    "output": [
                        "5",
                        "1",
                        "0",
                        "4",
                        "0"
                    ]
                }
            ],
            "notes": ""
        },
        "F": {
            "name": "F. Binary String Reconstruction",
            "statement": "For some binary string $$$s$$$ (i.e. each character $$$s_i$$$ is either '0' or '1'), all pairs of consecutive (adjacent) characters were written. In other words, all substrings of length $$$2$$$ were written. For each pair (substring of length $$$2$$$), the number of '1' (ones) in it was calculated.\nYou are given three numbers:\n$$$n_0$$$ — the number of such pairs of consecutive characters (substrings) where the number of ones equals $$$0$$$;  $$$n_1$$$ — the number of such pairs of consecutive characters (substrings) where the number of ones equals $$$1$$$;  $$$n_2$$$ — the number of such pairs of consecutive characters (substrings) where the number of ones equals $$$2$$$.\nFor example, for the string $$$s=$$$\"1110011110\", the following substrings would be written: \"11\", \"11\", \"10\", \"00\", \"01\", \"11\", \"11\", \"11\", \"10\". Thus, $$$n_0=1$$$, $$$n_1=3$$$, $$$n_2=5$$$.\nYour task is to restore any suitable binary string $$$s$$$ from the given values $$$n_0, n_1, n_2$$$. It is guaranteed that at least one of the numbers $$$n_0, n_1, n_2$$$ is greater than $$$0$$$. Also, it is guaranteed that a solution exists.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases in the input. Then test cases follow.\nEach test case consists of one line which contains three integers $$$n_0, n_1, n_2$$$ ($$$0 \\le n_0, n_1, n_2 \\le 100$$$; $$$n_0 + n_1 + n_2 > 0$$$). It is guaranteed that the answer for given $$$n_0, n_1, n_2$$$ exists.",
            "output_format": "Print $$$t$$$ lines. Each of the lines should contain a binary string corresponding to a test case. If there are several possible solutions, print any of them.",
            "examples": [
                {
                    "input": [
                        "7",
                        "1 3 5",
                        "1 1 1",
                        "3 9 3",
                        "0 1 0",
                        "3 1 2",
                        "0 0 3",
                        "2 0 0"
                    ],
                    "output": [
                        "1110011110",
                        "0011",
                        "0110001100101011",
                        "10",
                        "0000111",
                        "1111",
                        "000"
                    ]
                }
            ],
            "notes": ""
        },
        "G": {
            "name": "G. Special Permutation",
            "statement": "A permutation of length $$$n$$$ is an array $$$p=[p_1,p_2,\\dots,p_n]$$$, which contains every integer from $$$1$$$ to $$$n$$$ (inclusive) and, moreover, each number appears exactly once. For example, $$$p=[3,1,4,2,5]$$$ is a permutation of length $$$5$$$.\nFor a given number $$$n$$$ ($$$n \\ge 2$$$), find a permutation $$$p$$$ in which absolute difference (that is, the absolute value of difference) of any two neighboring (adjacent) elements is between $$$2$$$ and $$$4$$$, inclusive. Formally, find such permutation $$$p$$$ that $$$2 \\le |p_i - p_{i+1}| \\le 4$$$ for each $$$i$$$ ($$$1 \\le i < n$$$).\nPrint any such permutation for the given integer $$$n$$$ or determine that it does not exist.",
            "input_format": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases in the input. Then $$$t$$$ test cases follow.\nEach test case is described by a single line containing an integer $$$n$$$ ($$$2 \\le n \\le 1000$$$).",
            "output_format": "Print $$$t$$$ lines. Print a permutation that meets the given requirements. If there are several such permutations, then print any of them. If no such permutation exists, print -1.",
            "examples": [
                {
                    "input": [
                        "6",
                        "10",
                        "2",
                        "4",
                        "6",
                        "7",
                        "13"
                    ],
                    "output": [
                        "9 6 10 8 4 7 3 1 5 2 ",
                        "-1",
                        "3 1 4 2 ",
                        "5 3 6 2 4 1 ",
                        "5 1 3 6 2 4 7 ",
                        "13 9 7 11 8 4 1 3 5 2 6 10 12"
                    ]
                }
            ],
            "notes": ""
        }
    }
}